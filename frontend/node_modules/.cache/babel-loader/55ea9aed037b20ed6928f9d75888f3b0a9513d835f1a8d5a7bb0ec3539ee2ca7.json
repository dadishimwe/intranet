{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock, normalizeClass as _normalizeClass, withCtx as _withCtx, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  class: \"page-header\"\n};\nconst _hoisted_3 = {\n  class: \"page-actions\"\n};\nconst _hoisted_4 = {\n  class: \"card\"\n};\nconst _hoisted_5 = {\n  class: \"calendar-toolbar\"\n};\nconst _hoisted_6 = {\n  class: \"view-buttons\"\n};\nconst _hoisted_7 = {\n  class: \"month-navigation\"\n};\nconst _hoisted_8 = {\n  class: \"calendar-title\"\n};\nconst _hoisted_9 = {\n  class: \"filter-buttons\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"calendar-loading\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"calendar-view\"\n};\nconst _hoisted_12 = {\n  class: \"event-form\"\n};\nconst _hoisted_13 = {\n  class: \"field\"\n};\nconst _hoisted_14 = {\n  key: 0,\n  class: \"p-error\"\n};\nconst _hoisted_15 = {\n  class: \"field\"\n};\nconst _hoisted_16 = {\n  class: \"field\"\n};\nconst _hoisted_17 = {\n  class: \"field-checkbox\"\n};\nconst _hoisted_18 = {\n  class: \"field\"\n};\nconst _hoisted_19 = {\n  class: \"date-time-fields\"\n};\nconst _hoisted_20 = {\n  class: \"start-datetime\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"p-error\"\n};\nconst _hoisted_22 = {\n  class: \"end-datetime\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"p-error\"\n};\nconst _hoisted_24 = {\n  key: 1,\n  class: \"p-error\"\n};\nconst _hoisted_25 = {\n  class: \"field\"\n};\nconst _hoisted_26 = {\n  class: \"field\"\n};\nconst _hoisted_27 = {\n  class: \"field\"\n};\nconst _hoisted_28 = {\n  class: \"field-checkbox\"\n};\nconst _hoisted_29 = {\n  class: \"field\"\n};\nconst _hoisted_30 = {\n  key: 0,\n  class: \"event-details\"\n};\nconst _hoisted_31 = {\n  class: \"event-detail-item\"\n};\nconst _hoisted_32 = {\n  key: 0\n};\nconst _hoisted_33 = {\n  key: 0\n};\nconst _hoisted_34 = {\n  key: 1\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"event-detail-item\"\n};\nconst _hoisted_36 = {\n  key: 1,\n  class: \"event-description\"\n};\nconst _hoisted_37 = {\n  key: 2,\n  class: \"event-detail-item\"\n};\nconst _hoisted_38 = {\n  key: 3,\n  class: \"event-detail-item\"\n};\nconst _hoisted_39 = {\n  key: 5,\n  class: \"attendees-section\"\n};\nconst _hoisted_40 = {\n  class: \"attendee-list\"\n};\nconst _hoisted_41 = {\n  class: \"attendee-avatar\"\n};\nconst _hoisted_42 = {\n  class: \"attendee-info\"\n};\nconst _hoisted_43 = {\n  class: \"attendee-name\"\n};\nconst _hoisted_44 = {\n  key: 6,\n  class: \"response-section\"\n};\nconst _hoisted_45 = {\n  class: \"response-buttons\"\n};\nexport function render(_ctx, _cache) {\n  const _component_Button = _resolveComponent(\"Button\");\n  const _component_SelectButton = _resolveComponent(\"SelectButton\");\n  const _component_MultiSelect = _resolveComponent(\"MultiSelect\");\n  const _component_ToggleButton = _resolveComponent(\"ToggleButton\");\n  const _component_ProgressSpinner = _resolveComponent(\"ProgressSpinner\");\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  const _component_InputText = _resolveComponent(\"InputText\");\n  const _component_Textarea = _resolveComponent(\"Textarea\");\n  const _component_Checkbox = _resolveComponent(\"Checkbox\");\n  const _component_Calendar = _resolveComponent(\"Calendar\", true);\n  const _component_Dropdown = _resolveComponent(\"Dropdown\");\n  const _component_Dialog = _resolveComponent(\"Dialog\");\n  const _component_Tag = _resolveComponent(\"Tag\");\n  const _component_Divider = _resolveComponent(\"Divider\");\n  const _component_Avatar = _resolveComponent(\"Avatar\");\n  const _component_ConfirmDialog = _resolveComponent(\"ConfirmDialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[18] || (_cache[18] = _createElementVNode(\"h1\", {\n    class: \"page-title\"\n  }, \"Calendar\", -1)), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Button, {\n    label: \"New Event\",\n    icon: \"pi pi-plus\",\n    onClick: _ctx.openNewEventAppDialog,\n    class: \"p-button-primary\"\n  }, null, 8, [\"onClick\"])])]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_SelectButton, {\n    modelValue: _ctx.calendarView,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.calendarView = $event),\n    options: _ctx.viewOptions\n  }, null, 8, [\"modelValue\", \"options\"])]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_Button, {\n    icon: \"pi pi-chevron-left\",\n    class: \"p-button-text\",\n    onClick: _ctx.previousPeriod\n  }, null, 8, [\"onClick\"]), _createElementVNode(\"h2\", _hoisted_8, _toDisplayString(_ctx.currentViewTitle), 1), _createVNode(_component_Button, {\n    icon: \"pi pi-chevron-right\",\n    class: \"p-button-text\",\n    onClick: _ctx.nextPeriod\n  }, null, 8, [\"onClick\"])]), _createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_MultiSelect, {\n    modelValue: _ctx.selectedAppDepartments,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedAppDepartments = $event),\n    options: _ctx.departments,\n    optionLabel: \"name\",\n    placeholder: \"All AppDepartments\",\n    class: \"departments-filter\",\n    maxSelectedLabels: 1\n  }, null, 8, [\"modelValue\", \"options\"]), _createVNode(_component_ToggleButton, {\n    modelValue: _ctx.showOnlyMyEvents,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.showOnlyMyEvents = $event),\n    onLabel: \"My Events\",\n    offLabel: \"All Events\",\n    onIcon: \"pi pi-user\",\n    offIcon: \"pi pi-users\",\n    class: \"ml-2\"\n  }, null, 8, [\"modelValue\"])])]), _ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createVNode(_component_ProgressSpinner)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_ctx.calendarView === 'month' ? (_openBlock(), _createBlock(_component_FullCalendar, {\n    key: 0,\n    ref: \"fullCalendar\",\n    options: _ctx.calendarOptions\n  }, null, 8, [\"options\"])) : _ctx.calendarView === 'week' ? (_openBlock(), _createBlock(_component_FullCalendar, {\n    key: 1,\n    ref: \"fullCalendar\",\n    options: _ctx.calendarWeekOptions\n  }, null, 8, [\"options\"])) : _ctx.calendarView === 'day' ? (_openBlock(), _createBlock(_component_FullCalendar, {\n    key: 2,\n    ref: \"fullCalendar\",\n    options: _ctx.calendarDayOptions\n  }, null, 8, [\"options\"])) : _ctx.calendarView === 'list' ? (_openBlock(), _createBlock(_component_FullCalendar, {\n    key: 3,\n    ref: \"fullCalendar\",\n    options: _ctx.calendarListOptions\n  }, null, 8, [\"options\"])) : _createCommentVNode(\"\", true)]))]), _createVNode(_component_Dialog, {\n    visible: _ctx.eventDialogVisible,\n    \"onUpdate:visible\": _cache[12] || (_cache[12] = $event => _ctx.eventDialogVisible = $event),\n    style: {\n      width: '500px'\n    },\n    header: _ctx.dialogMode === 'create' ? 'New Event' : 'Edit Event',\n    modal: true,\n    class: \"p-fluid\"\n  }, {\n    footer: _withCtx(() => [_createVNode(_component_Button, {\n      label: \"Cancel\",\n      icon: \"pi pi-times\",\n      class: \"p-button-text\",\n      onClick: _ctx.closeEventAppDialog\n    }, null, 8, [\"onClick\"]), _ctx.dialogMode === 'edit' && _ctx.canDeleteEvent ? (_openBlock(), _createBlock(_component_Button, {\n      key: 0,\n      label: \"Delete\",\n      icon: \"pi pi-trash\",\n      class: \"p-button-danger mr-2\",\n      onClick: _ctx.confirmDeleteEvent\n    }, null, 8, [\"onClick\"])) : _createCommentVNode(\"\", true), _createVNode(_component_Button, {\n      label: \"Save\",\n      icon: \"pi pi-check\",\n      onClick: _ctx.saveEvent,\n      loading: _ctx.saving\n    }, null, 8, [\"onClick\", \"loading\"])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_cache[19] || (_cache[19] = _createElementVNode(\"label\", {\n      for: \"title\"\n    }, \"Title *\", -1)), _createVNode(_component_InputText, {\n      id: \"title\",\n      modelValue: _ctx.event.title,\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.event.title = $event),\n      required: \"\",\n      autofocus: \"\",\n      class: _normalizeClass({\n        'p-invalid': _ctx.submitted && !_ctx.event.title\n      })\n    }, null, 8, [\"modelValue\", \"class\"]), _ctx.submitted && !_ctx.event.title ? (_openBlock(), _createElementBlock(\"small\", _hoisted_14, \"Title is required.\")) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_15, [_cache[20] || (_cache[20] = _createElementVNode(\"label\", {\n      for: \"description\"\n    }, \"Description\", -1)), _createVNode(_component_Textarea, {\n      id: \"description\",\n      modelValue: _ctx.event.description,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.event.description = $event),\n      rows: \"3\",\n      autoResize: \"\"\n    }, null, 8, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_16, [_cache[22] || (_cache[22] = _createElementVNode(\"label\", null, \"All Day\", -1)), _createElementVNode(\"div\", _hoisted_17, [_createVNode(_component_Checkbox, {\n      modelValue: _ctx.event.allDay,\n      \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.event.allDay = $event),\n      binary: \"\",\n      id: \"allDay\"\n    }, null, 8, [\"modelValue\"]), _cache[21] || (_cache[21] = _createElementVNode(\"label\", {\n      for: \"allDay\"\n    }, \"Event runs all day\", -1))])]), _createElementVNode(\"div\", _hoisted_18, [_cache[23] || (_cache[23] = _createElementVNode(\"label\", null, \"Date/Time *\", -1)), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createVNode(_component_Calendar, {\n      modelValue: _ctx.event.startDate,\n      \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.event.startDate = $event),\n      dateFormat: \"mm/dd/yy\",\n      placeholder: \"Start Date\",\n      showTime: !_ctx.event.allDay,\n      timeOnly: false,\n      showIcon: true,\n      class: _normalizeClass({\n        'p-invalid': _ctx.submitted && !_ctx.event.startDate\n      })\n    }, null, 8, [\"modelValue\", \"showTime\", \"class\"]), _ctx.submitted && !_ctx.event.startDate ? (_openBlock(), _createElementBlock(\"small\", _hoisted_21, \"Start date is required.\")) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_22, [_createVNode(_component_Calendar, {\n      modelValue: _ctx.event.endDate,\n      \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.event.endDate = $event),\n      dateFormat: \"mm/dd/yy\",\n      placeholder: \"End Date\",\n      showTime: !_ctx.event.allDay,\n      timeOnly: false,\n      showIcon: true,\n      class: _normalizeClass({\n        'p-invalid': _ctx.submitted && !_ctx.event.endDate\n      })\n    }, null, 8, [\"modelValue\", \"showTime\", \"class\"]), _ctx.submitted && !_ctx.event.endDate ? (_openBlock(), _createElementBlock(\"small\", _hoisted_23, \"End date is required.\")) : _createCommentVNode(\"\", true), _ctx.dateRangeError ? (_openBlock(), _createElementBlock(\"small\", _hoisted_24, \"End date must be after start date.\")) : _createCommentVNode(\"\", true)])])]), _createElementVNode(\"div\", _hoisted_25, [_cache[24] || (_cache[24] = _createElementVNode(\"label\", {\n      for: \"location\"\n    }, \"Location\", -1)), _createVNode(_component_InputText, {\n      id: \"location\",\n      modelValue: _ctx.event.location,\n      \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => _ctx.event.location = $event)\n    }, null, 8, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_26, [_cache[25] || (_cache[25] = _createElementVNode(\"label\", {\n      for: \"departmentId\"\n    }, \"Department\", -1)), _createVNode(_component_Dropdown, {\n      id: \"departmentId\",\n      modelValue: _ctx.event.departmentId,\n      \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => _ctx.event.departmentId = $event),\n      options: _ctx.departments,\n      optionLabel: \"name\",\n      optionValue: \"id\",\n      placeholder: \"Select Department\"\n    }, null, 8, [\"modelValue\", \"options\"])]), _createElementVNode(\"div\", _hoisted_27, [_cache[27] || (_cache[27] = _createElementVNode(\"label\", null, \"Visibility\", -1)), _createElementVNode(\"div\", _hoisted_28, [_createVNode(_component_Checkbox, {\n      modelValue: _ctx.event.isCompanyWide,\n      \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => _ctx.event.isCompanyWide = $event),\n      binary: \"\",\n      id: \"isCompanyWide\"\n    }, null, 8, [\"modelValue\"]), _cache[26] || (_cache[26] = _createElementVNode(\"label\", {\n      for: \"isCompanyWide\"\n    }, \"Company-wide event\", -1))]), _cache[28] || (_cache[28] = _createElementVNode(\"small\", null, \"If checked, all employees will see this event\", -1))]), _createElementVNode(\"div\", _hoisted_29, [_cache[29] || (_cache[29] = _createElementVNode(\"label\", {\n      for: \"attendees\"\n    }, \"Attendees\", -1)), _createVNode(_component_MultiSelect, {\n      id: \"attendees\",\n      modelValue: _ctx.event.attendees,\n      \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => _ctx.event.attendees = $event),\n      options: _ctx.users,\n      optionLabel: \"fullName\",\n      optionValue: \"id\",\n      placeholder: \"Select Attendees\",\n      display: \"chip\"\n    }, null, 8, [\"modelValue\", \"options\"])])])]),\n    _: 1\n  }, 8, [\"visible\", \"header\"]), _createVNode(_component_Dialog, {\n    visible: _ctx.eventDetailsVisible,\n    \"onUpdate:visible\": _cache[17] || (_cache[17] = $event => _ctx.eventDetailsVisible = $event),\n    style: {\n      width: '500px'\n    },\n    header: _ctx.selectedEvent.title,\n    modal: true\n  }, {\n    footer: _withCtx(() => [_createVNode(_component_Button, {\n      label: \"Close\",\n      icon: \"pi pi-times\",\n      class: \"p-button-text\",\n      onClick: _cache[16] || (_cache[16] = $event => _ctx.eventDetailsVisible = false)\n    }), _ctx.canEditEvent ? (_openBlock(), _createBlock(_component_Button, {\n      key: 0,\n      label: \"Edit\",\n      icon: \"pi pi-pencil\",\n      onClick: _ctx.editSelectedEvent\n    }, null, 8, [\"onClick\"])) : _createCommentVNode(\"\", true)]),\n    default: _withCtx(() => [_ctx.selectedEvent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[30] || (_cache[30] = _createElementVNode(\"i\", {\n      class: \"pi pi-calendar\"\n    }, null, -1)), _ctx.selectedEvent.allDay ? (_openBlock(), _createElementBlock(\"span\", _hoisted_32, [_createTextVNode(_toDisplayString(_ctx.formatDate(_ctx.selectedEvent.startTime)) + \" \", 1), !_ctx.isSameDay(_ctx.selectedEvent.startTime, _ctx.selectedEvent.endTime) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_33, \" - \" + _toDisplayString(_ctx.formatDate(_ctx.selectedEvent.endTime)), 1)) : _createCommentVNode(\"\", true), _createVNode(_component_Tag, {\n      value: \"All Day\",\n      class: \"ml-2\"\n    })])) : (_openBlock(), _createElementBlock(\"span\", _hoisted_34, _toDisplayString(_ctx.formatDateTime(_ctx.selectedEvent.startTime)) + \" - \" + _toDisplayString(_ctx.formatTime(_ctx.selectedEvent.endTime)), 1))]), _ctx.selectedEvent.location ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, [_cache[31] || (_cache[31] = _createElementVNode(\"i\", {\n      class: \"pi pi-map-marker\"\n    }, null, -1)), _createElementVNode(\"span\", null, _toDisplayString(_ctx.selectedEvent.location), 1)])) : _createCommentVNode(\"\", true), _ctx.selectedEvent.description ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, _toDisplayString(_ctx.selectedEvent.description), 1)) : _createCommentVNode(\"\", true), _ctx.selectedEvent.department_name ? (_openBlock(), _createElementBlock(\"div\", _hoisted_37, [_cache[32] || (_cache[32] = _createElementVNode(\"i\", {\n      class: \"pi pi-sitemap\"\n    }, null, -1)), _createElementVNode(\"span\", null, \"Department: \" + _toDisplayString(_ctx.selectedEvent.department_name), 1)])) : _createCommentVNode(\"\", true), _ctx.selectedEvent.created_by_name ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [_cache[33] || (_cache[33] = _createElementVNode(\"i\", {\n      class: \"pi pi-user\"\n    }, null, -1)), _createElementVNode(\"span\", null, \"Created by: \" + _toDisplayString(_ctx.selectedEvent.created_by_name), 1)])) : _createCommentVNode(\"\", true), _ctx.selectedEvent.attendees && _ctx.selectedEvent.attendees.length > 0 ? (_openBlock(), _createBlock(_component_Divider, {\n      key: 4\n    })) : _createCommentVNode(\"\", true), _ctx.selectedEvent.attendees && _ctx.selectedEvent.attendees.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_39, [_cache[34] || (_cache[34] = _createElementVNode(\"h3\", null, \"Attendees\", -1)), _createElementVNode(\"ul\", _hoisted_40, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedEvent.attendees, attendee => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: attendee.user_id,\n        class: \"attendee-item\"\n      }, [_createElementVNode(\"div\", _hoisted_41, [_createVNode(_component_Avatar, {\n        image: attendee.profile_image,\n        size: \"small\",\n        shape: \"circle\",\n        pt: {\n          image: {\n            style: {\n              objectFit: 'cover',\n              width: '32px',\n              height: '32px'\n            }\n          }\n        }\n      }, null, 8, [\"image\"])]), _createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"span\", _hoisted_43, _toDisplayString(attendee.first_name) + \" \" + _toDisplayString(attendee.last_name), 1), _createVNode(_component_Tag, {\n        value: _ctx.capitalizeFirst(attendee.status),\n        severity: _ctx.getAttendanceTagSeverity(attendee.status),\n        class: \"attendee-status\"\n      }, null, 8, [\"value\", \"severity\"])])]);\n    }), 128))])])) : _createCommentVNode(\"\", true), _ctx.isAttendee ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, [_createVNode(_component_Divider), _cache[35] || (_cache[35] = _createElementVNode(\"h3\", null, \"Your Response\", -1)), _createElementVNode(\"div\", _hoisted_45, [_createVNode(_component_Button, {\n      label: \"Accept\",\n      class: \"p-button-success mr-2\",\n      onClick: _cache[13] || (_cache[13] = $event => _ctx.updateAttendance('accepted')),\n      disabled: _ctx.currentAttendanceStatus === 'accepted'\n    }, null, 8, [\"disabled\"]), _createVNode(_component_Button, {\n      label: \"Maybe\",\n      class: \"p-button-warning mr-2\",\n      onClick: _cache[14] || (_cache[14] = $event => _ctx.updateAttendance('tentative')),\n      disabled: _ctx.currentAttendanceStatus === 'tentative'\n    }, null, 8, [\"disabled\"]), _createVNode(_component_Button, {\n      label: \"Decline\",\n      class: \"p-button-danger\",\n      onClick: _cache[15] || (_cache[15] = $event => _ctx.updateAttendance('declined')),\n      disabled: _ctx.currentAttendanceStatus === 'declined'\n    }, null, 8, [\"disabled\"])])])) : _createCommentVNode(\"\", true)])) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }, 8, [\"visible\", \"header\"]), _createVNode(_component_ConfirmDialog)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_Button","label","icon","onClick","_ctx","openNewEventAppDialog","_hoisted_4","_hoisted_5","_hoisted_6","_component_SelectButton","modelValue","calendarView","_cache","$event","options","viewOptions","_hoisted_7","previousPeriod","_hoisted_8","_toDisplayString","currentViewTitle","nextPeriod","_hoisted_9","_component_MultiSelect","selectedAppDepartments","departments","optionLabel","placeholder","maxSelectedLabels","_component_ToggleButton","showOnlyMyEvents","onLabel","offLabel","onIcon","offIcon","loading","_hoisted_10","_component_ProgressSpinner","_hoisted_11","_createBlock","_component_FullCalendar","ref","calendarOptions","calendarWeekOptions","calendarDayOptions","calendarListOptions","_createCommentVNode","_component_Dialog","visible","eventDialogVisible","style","width","header","dialogMode","modal","footer","_withCtx","closeEventAppDialog","canDeleteEvent","confirmDeleteEvent","saveEvent","saving","default","_hoisted_12","_hoisted_13","for","_component_InputText","id","event","title","required","autofocus","_normalizeClass","submitted","_hoisted_14","_hoisted_15","_component_Textarea","description","rows","autoResize","_hoisted_16","_hoisted_17","_component_Checkbox","allDay","binary","_hoisted_18","_hoisted_19","_hoisted_20","_component_Calendar","startDate","dateFormat","showTime","timeOnly","showIcon","_hoisted_21","_hoisted_22","endDate","_hoisted_23","dateRangeError","_hoisted_24","_hoisted_25","location","_hoisted_26","_component_Dropdown","departmentId","optionValue","_hoisted_27","_hoisted_28","isCompanyWide","_hoisted_29","attendees","users","display","_","eventDetailsVisible","selectedEvent","canEditEvent","editSelectedEvent","_hoisted_30","_hoisted_31","_hoisted_32","_createTextVNode","formatDate","startTime","isSameDay","endTime","_hoisted_33","_component_Tag","value","_hoisted_34","formatDateTime","formatTime","_hoisted_35","_hoisted_36","department_name","_hoisted_37","created_by_name","_hoisted_38","length","_component_Divider","_hoisted_39","_hoisted_40","_Fragment","_renderList","attendee","user_id","_hoisted_41","_component_Avatar","image","profile_image","size","shape","pt","_hoisted_42","_hoisted_43","first_name","last_name","capitalizeFirst","status","severity","getAttendanceTagSeverity","isAttendee","_hoisted_44","_hoisted_45","updateAttendance","disabled","currentAttendanceStatus","_component_ConfirmDialog"],"sources":["/home/pi/projects/intranet/frontend/src/views/Calendar.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Calendar</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Event\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewEventAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <div class=\"calendar-toolbar\">\r\n        <div class=\"view-buttons\">\r\n          <SelectButton v-model=\"calendarView\" :options=\"viewOptions\" />\r\n        </div>\r\n        <div class=\"month-navigation\">\r\n          <Button \r\n            icon=\"pi pi-chevron-left\" \r\n            class=\"p-button-text\" \r\n            @click=\"previousPeriod\" \r\n          />\r\n          <h2 class=\"calendar-title\">{{ currentViewTitle }}</h2>\r\n          <Button \r\n            icon=\"pi pi-chevron-right\" \r\n            class=\"p-button-text\" \r\n            @click=\"nextPeriod\" \r\n          />\r\n        </div>\r\n        <div class=\"filter-buttons\">\r\n          <MultiSelect \r\n            v-model=\"selectedAppDepartments\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            placeholder=\"All AppDepartments\" \r\n            class=\"departments-filter\" \r\n            :maxSelectedLabels=\"1\"\r\n          />\r\n          <ToggleButton \r\n            v-model=\"showOnlyMyEvents\" \r\n            onLabel=\"My Events\" \r\n            offLabel=\"All Events\" \r\n            onIcon=\"pi pi-user\" \r\n            offIcon=\"pi pi-users\" \r\n            class=\"ml-2\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"calendar-loading\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- Calendar view -->\r\n      <div v-else class=\"calendar-view\">\r\n        <!-- Month view -->\r\n        <FullCalendar \r\n          v-if=\"calendarView === 'month'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarOptions\"\r\n        />\r\n\r\n        <!-- Week view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'week'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarWeekOptions\"\r\n        />\r\n\r\n        <!-- Day view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'day'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarDayOptions\"\r\n        />\r\n\r\n        <!-- List view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'list'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarListOptions\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Event Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDialogVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New Event' : 'Edit Event'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid\"\r\n    >\r\n      <div class=\"event-form\">\r\n        <div class=\"field\">\r\n          <label for=\"title\">Title *</label>\r\n          <InputText \r\n            id=\"title\" \r\n            v-model=\"event.title\" \r\n            required \r\n            autofocus \r\n            :class=\"{ 'p-invalid': submitted && !event.title }\"\r\n          />\r\n          <small v-if=\"submitted && !event.title\" class=\"p-error\">Title is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"description\">Description</label>\r\n          <Textarea \r\n            id=\"description\" \r\n            v-model=\"event.description\" \r\n            rows=\"3\" \r\n            autoResize \r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>All Day</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.allDay\" binary id=\"allDay\" />\r\n            <label for=\"allDay\">Event runs all day</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Date/Time *</label>\r\n          <div class=\"date-time-fields\">\r\n            <div class=\"start-datetime\">\r\n              <Calendar \r\n                v-model=\"event.startDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"Start Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.startDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.startDate\" class=\"p-error\">Start date is required.</small>\r\n            </div>\r\n\r\n            <div class=\"end-datetime\">\r\n              <Calendar \r\n                v-model=\"event.endDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"End Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.endDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.endDate\" class=\"p-error\">End date is required.</small>\r\n              <small v-if=\"dateRangeError\" class=\"p-error\">End date must be after start date.</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"location\">Location</label>\r\n          <InputText id=\"location\" v-model=\"event.location\" />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"departmentId\">Department</label>\r\n          <Dropdown \r\n            id=\"departmentId\" \r\n            v-model=\"event.departmentId\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Department\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Visibility</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.isCompanyWide\" binary id=\"isCompanyWide\" />\r\n            <label for=\"isCompanyWide\">Company-wide event</label>\r\n          </div>\r\n          <small>If checked, all employees will see this event</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"attendees\">Attendees</label>\r\n          <MultiSelect \r\n            id=\"attendees\" \r\n            v-model=\"event.attendees\" \r\n            :options=\"users\" \r\n            optionLabel=\"fullName\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Attendees\"\r\n            display=\"chip\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeEventAppDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && canDeleteEvent\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteEvent\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveEvent\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Event Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDetailsVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"selectedEvent.title\" \r\n      :modal=\"true\"\r\n    >\r\n      <div v-if=\"selectedEvent\" class=\"event-details\">\r\n        <div class=\"event-detail-item\">\r\n          <i class=\"pi pi-calendar\"></i>\r\n          <span v-if=\"selectedEvent.allDay\">\r\n            {{ formatDate(selectedEvent.startTime) }}\r\n            <span v-if=\"!isSameDay(selectedEvent.startTime, selectedEvent.endTime)\">\r\n              - {{ formatDate(selectedEvent.endTime) }}\r\n            </span>\r\n            <Tag value=\"All Day\" class=\"ml-2\" />\r\n          </span>\r\n          <span v-else>\r\n            {{ formatDateTime(selectedEvent.startTime) }} - {{ formatTime(selectedEvent.endTime) }}\r\n          </span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.location\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-map-marker\"></i>\r\n          <span>{{ selectedEvent.location }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.description\" class=\"event-description\">\r\n          {{ selectedEvent.description }}\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.department_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-sitemap\"></i>\r\n          <span>Department: {{ selectedEvent.department_name }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.created_by_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-user\"></i>\r\n          <span>Created by: {{ selectedEvent.created_by_name }}</span>\r\n        </div>\r\n\r\n        <Divider v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" />\r\n\r\n        <div v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" class=\"attendees-section\">\r\n          <h3>Attendees</h3>\r\n          <ul class=\"attendee-list\">\r\n            <li v-for=\"attendee in selectedEvent.attendees\" :key=\"attendee.user_id\" class=\"attendee-item\">\r\n              <div class=\"attendee-avatar\">\r\n                <Avatar \r\n                  :image=\"attendee.profile_image\" \r\n                  size=\"small\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '32px',\r\n                        height: '32px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n              </div>\r\n              <div class=\"attendee-info\">\r\n                <span class=\"attendee-name\">{{ attendee.first_name }} {{ attendee.last_name }}</span>\r\n                <Tag \r\n                  :value=\"capitalizeFirst(attendee.status)\" \r\n                  :severity=\"getAttendanceTagSeverity(attendee.status)\" \r\n                  class=\"attendee-status\"\r\n                />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div v-if=\"isAttendee\" class=\"response-section\">\r\n          <Divider />\r\n          <h3>Your Response</h3>\r\n          <div class=\"response-buttons\">\r\n            <Button \r\n              label=\"Accept\" \r\n              class=\"p-button-success mr-2\" \r\n              @click=\"updateAttendance('accepted')\" \r\n              :disabled=\"currentAttendanceStatus === 'accepted'\" \r\n            />\r\n            <Button \r\n              label=\"Maybe\" \r\n              class=\"p-button-warning mr-2\" \r\n              @click=\"updateAttendance('tentative')\" \r\n              :disabled=\"currentAttendanceStatus === 'tentative'\" \r\n            />\r\n            <Button \r\n              label=\"Decline\" \r\n              class=\"p-button-danger\" \r\n              @click=\"updateAttendance('declined')\" \r\n              :disabled=\"currentAttendanceStatus === 'declined'\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"eventDetailsVisible = false\" \r\n        />\r\n        <Button \r\n          v-if=\"canEditEvent\" \r\n          label=\"Edit\" \r\n          icon=\"pi pi-pencil\" \r\n          @click=\"editSelectedEvent\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Delete Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\nimport FullCalendar from '@fullcalendar/vue3';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport SelectButton from 'primevue/selectbutton';\r\nimport MultiSelect from 'primevue/multiselect';\r\nimport ToggleButton from 'primevue/togglebutton';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport InputText from 'primevue/inputtext';\r\nimport Textarea from 'primevue/textarea';\r\nimport Checkbox from 'primevue/checkbox';\r\nimport Calendar from 'primevue/calendar';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Avatar from 'primevue/avatar';\r\nimport Tag from 'primevue/tag';\r\nimport Divider from 'primevue/divider';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\n\r\nexport default {\r\n  name: 'CalendarView',\r\n  components: {\r\n    FullCalendar,\r\n    Button,\r\n    SelectButton,\r\n    MultiSelect,\r\n    ToggleButton,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    InputText,\r\n    Textarea,\r\n    Checkbox,\r\n    Calendar,\r\n    Dropdown,\r\n    Avatar,\r\n    Tag,\r\n    Divider,\r\n    ConfirmDialog\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n    const fullCalendar = ref(null);\r\n\r\n    // State\r\n    const loading = ref(true);\r\n    const events = ref([]);\r\n    const calendarView = ref('month');\r\n    const currentDate = ref(new Date());\r\n    const selectedDepartments = ref([]);\r\n    const showOnlyMyEvents = ref(false);\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const dateRangeError = ref(false);\r\n\r\n    // Event dialog state\r\n    const eventDialogVisible = ref(false);\r\n    const dialogMode = ref('create'); // 'create' or 'edit'\r\n    \r\n    // Event details dialog\r\n    const eventDetailsVisible = ref(false);\r\n    const selectedEvent = ref(null);\r\n    \r\n    // Form state\r\n    const event = reactive({\r\n      id: null,\r\n      title: '',\r\n      description: '',\r\n      startDate: null,\r\n      endDate: null,\r\n      allDay: false,\r\n      location: '',\r\n      departmentId: null,\r\n      isCompanyWide: false,\r\n      attendees: []\r\n    });\r\n\r\n    // Options for calendar view selector\r\n    const viewOptions = [\r\n      { label: 'Month', value: 'month' },\r\n      { label: 'Week', value: 'week' },\r\n      { label: 'Day', value: 'day' },\r\n      { label: 'List', value: 'list' }\r\n    ];\r\n\r\n    // Mock departments data (should be fetched from API)\r\n    const departments = ref([]);\r\n    \r\n    // Mock users data (should be fetched from API)\r\n    const users = ref([]);\r\n\r\n    // Calendar options\r\n    const calendarOptions = computed(() => ({\r\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n      initialView: 'dayGridMonth',\r\n      headerToolbar: false, // We're using our own header\r\n      editable: true,\r\n      selectable: true,\r\n      selectMirror: true,\r\n      dayMaxEvents: true,\r\n      weekends: true,\r\n      initialDate: currentDate.value,\r\n      events: mapEventsToCalendar(events.value),\r\n      eventClick: handleEventClick,\r\n      dateClick: handleDateClick,\r\n      select: handleDateSelect,\r\n      eventDrop: handleEventDrop,\r\n      eventResize: handleEventResize,\r\n      height: 'auto'\r\n    }));\r\n\r\n    // Week view options\r\n    const calendarWeekOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridWeek',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // Day view options\r\n    const calendarDayOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridDay',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // List view options\r\n    const calendarListOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],\r\n      initialView: 'listWeek'\r\n    }));\r\n\r\n    // Current view title (month/year)\r\n    const currentViewTitle = computed(() => {\r\n      const date = currentDate.value;\r\n      const formatter = new Intl.DateTimeFormat('en-US', { \r\n        month: 'long', \r\n        year: 'numeric' \r\n      });\r\n      \r\n      return formatter.format(date);\r\n    });\r\n\r\n    // Check if current user is an attendee of the selected event\r\n    const isAttendee = computed(() => {\r\n      if (!selectedEvent.value || !selectedEvent.value.attendees) return false;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedEvent.value.attendees.some(attendee => \r\n        attendee.user_id === currentUserId\r\n      );\r\n    });\r\n\r\n    // Get current user's attendance status\r\n    const currentAttendanceStatus = computed(() => {\r\n      if (!isAttendee.value) return null;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      const attendee = selectedEvent.value.attendees.find(a => \r\n        a.user_id === currentUserId\r\n      );\r\n      \r\n      return attendee ? attendee.status : null;\r\n    });\r\n\r\n    // Check if user can edit the selected event\r\n    const canEditEvent = computed(() => {\r\n      if (!selectedEvent.value) return false;\r\n      \r\n      const currentUser = store.getters['auth/currentUser'];\r\n      if (!currentUser) return false;\r\n      \r\n      // Admin can edit any event\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // Creator can edit their own event\r\n      return selectedEvent.value.created_by === currentUser.id;\r\n    });\r\n\r\n    // Check if user can delete the selected event\r\n    const canDeleteEvent = computed(() => {\r\n      return canEditEvent.value;\r\n    });\r\n\r\n    // Methods\r\n    const fetchEvents = async () => {\r\n      try {\r\n        loading.value = true;\r\n        \r\n        // Build filter query\r\n        const filters = {};\r\n        \r\n        // Date range for current view\r\n        const calendarApi = fullCalendar.value?.getApi();\r\n        if (calendarApi) {\r\n          const view = calendarApi.view;\r\n          filters.start = view.activeStart.toISOString();\r\n          filters.end = view.activeEnd.toISOString();\r\n        }\r\n        \r\n        // Department filter\r\n        if (selectedDepartments.value.length > 0) {\r\n          filters.departmentId = selectedDepartments.value[0].id;\r\n        }\r\n        \r\n        // Show only my events filter\r\n        if (showOnlyMyEvents.value) {\r\n          filters.userId = store.getters['auth/currentUser']?.id;\r\n        }\r\n        \r\n        // Fetch events from API\r\n//        const response = await fetch('/api/calendar', { \r\n          params: filters \r\n        });\r\n        \r\n        // For now, using mock data since we don't have the actual API integrated\r\n        events.value = await mockFetchEvents();\r\n      } catch (error) {\r\n        console.error('Error fetching events:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load events',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Mock event data fetch function \r\n    const mockFetchEvents = () => {\r\n      // Return a promise to simulate API call\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve([\r\n            {\r\n              id: '1',\r\n              title: 'Annual Budget Meeting',\r\n              description: 'Review annual budget and forecast for next fiscal year',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 10, 0),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 12, 0),\r\n              all_day: false,\r\n              location: 'Conference Room A',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: '1',\r\n              department_name: 'Finance',\r\n              is_company_wide: true,\r\n              attendees: [\r\n                {\r\n                  user_id: '1',\r\n                  first_name: 'John',\r\n                  last_name: 'Doe',\r\n                  email: 'john@example.com',\r\n                  status: 'accepted'\r\n                },\r\n                {\r\n                  user_id: '2',\r\n                  first_name: 'Jane',\r\n                  last_name: 'Smith',\r\n                  email: 'jane@example.com',\r\n                  status: 'tentative'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              id: '2',\r\n              title: 'Team Building Event',\r\n              description: 'Company-wide team building activities',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 22),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 23),\r\n              all_day: true,\r\n              location: 'City Park',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: null,\r\n              department_name: null,\r\n              is_company_wide: true,\r\n              attendees: []\r\n            }\r\n          ]);\r\n        }, 500);\r\n      });\r\n    };\r\n\r\n    // Mock data for departments\r\n    const fetchDepartments = () => {\r\n      departments.value = [\r\n        { id: '1', name: 'Finance' },\r\n        { id: '2', name: 'Human Resources' },\r\n        { id: '3', name: 'Marketing' },\r\n        { id: '4', name: 'Engineering' },\r\n        { id: '5', name: 'Operations' }\r\n      ];\r\n    };\r\n\r\n    // Mock data for users\r\n    const fetchUsers = () => {\r\n      users.value = [\r\n        { id: '1', fullName: 'John Doe', email: 'john@example.com' },\r\n        { id: '2', fullName: 'Jane Smith', email: 'jane@example.com' },\r\n        { id: '3', fullName: 'Bob Johnson', email: 'bob@example.com' },\r\n        { id: '4', fullName: 'Alice Williams', email: 'alice@example.com' }\r\n      ];\r\n    };\r\n\r\n    // Map events to FullCalendar format\r\n    const mapEventsToCalendar = (eventsData) => {\r\n      return eventsData.map(event => ({\r\n        id: event.id,\r\n        title: event.title,\r\n        start: event.start_time,\r\n        end: event.end_time,\r\n        allDay: event.all_day,\r\n        extendedProps: {\r\n          description: event.description,\r\n          location: event.location,\r\n          departmentId: event.department_id,\r\n          departmentName: event.department_name,\r\n          isCompanyWide: event.is_company_wide,\r\n          createdBy: event.created_by,\r\n          createdByName: event.created_by_name,\r\n          attendees: event.attendees\r\n        },\r\n        backgroundColor: getEventColor(event),\r\n        borderColor: getEventColor(event)\r\n      }));\r\n    };\r\n\r\n    // Determine event color based on department or other attributes\r\n    const getEventColor = (event) => {\r\n      // Company-wide events are blue\r\n      if (event.is_company_wide) return '#3B82F6';\r\n      \r\n      // Color based on department\r\n      switch (event.department_id) {\r\n        case '1': return '#22C55E'; // Finance - green\r\n        case '2': return '#F59E0B'; // HR - yellow\r\n        case '3': return '#8B5CF6'; // Marketing - purple\r\n        case '4': return '#EC4899'; // Engineering - pink\r\n        case '5': return '#14B8A6'; // Operations - teal\r\n        default: return '#64748B'; // Default - gray\r\n      }\r\n    };\r\n\r\n    // Handle clicking on an event\r\n    const handleEventClick = (info) => {\r\n      // Get the clicked event data\r\n      const eventId = info.event.id;\r\n      \r\n      // Find the full event details\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        selectedEvent.value = eventData;\r\n        eventDetailsVisible.value = true;\r\n      }\r\n    };\r\n\r\n    // Handle clicking on a date\r\n    const handleDateClick = (info) => {\r\n      // Set start date to clicked date\r\n      const clickedDate = new Date(info.date);\r\n      resetEventForm();\r\n      \r\n      event.startDate = clickedDate;\r\n      event.endDate = new Date(clickedDate.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle selecting a date range\r\n    const handleDateSelect = (info) => {\r\n      resetEventForm();\r\n      \r\n      event.startDate = new Date(info.start);\r\n      event.endDate = new Date(info.end);\r\n      event.allDay = info.allDay;\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle dragging an event\r\n    const handleEventDrop = (info) => {\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event dates\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          start_time: info.event.start,\r\n          end_time: info.event.end || info.event.start,\r\n          all_day: info.event.allDay\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server (would use real API in production)\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event dates updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Handle resizing an event\r\n    const handleEventResize = (info) => {\r\n      // Similar to handleEventDrop\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event end date\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          end_time: info.event.end\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event duration updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Change calendar view to previous month/week/day\r\n    const previousPeriod = () => {\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.prev();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Change calendar view to next month/week/day\r\n    const nextPeriod = () => {\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.next();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Open dialog to create a new event\r\n    const openNewEventDialog = () => {\r\n      resetEventForm();\r\n      \r\n      // Set default start/end times\r\n      const now = new Date();\r\n      now.setMinutes(0, 0, 0); // Round to nearest hour\r\n      now.setHours(now.getHours() + 1);\r\n      \r\n      event.startDate = now;\r\n      event.endDate = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Close event dialog\r\n    const closeEventDialog = () => {\r\n      eventDialogVisible.value = false;\r\n      submitted.value = false;\r\n      dateRangeError.value = false;\r\n    };\r\n\r\n    // Reset event form\r\n    const resetEventForm = () => {\r\n      event.id = null;\r\n      event.title = '';\r\n      event.description = '';\r\n      event.startDate = null;\r\n      event.endDate = null;\r\n      event.allDay = false;\r\n      event.location = '';\r\n      event.departmentId = null;\r\n      event.isCompanyWide = false;\r\n      event.attendees = [];\r\n    };\r\n\r\n    // Validate event form\r\n    const validateEventForm = () => {\r\n      dateRangeError.value = false;\r\n      \r\n      // Check required fields\r\n      if (!event.title || !event.startDate || !event.endDate) {\r\n        return false;\r\n      }\r\n      \r\n      // Check date range\r\n      if (event.startDate > event.endDate) {\r\n        dateRangeError.value = true;\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    };\r\n\r\n    // Save event (create or update)\r\n    const saveEvent = () => {\r\n      submitted.value = true;\r\n      \r\n      if (!validateEventForm()) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      // Prepare event data\r\n      const eventData = {\r\n        id: event.id,\r\n        title: event.title,\r\n        description: event.description,\r\n        startTime: event.startDate,\r\n        endTime: event.endDate,\r\n        allDay: event.allDay,\r\n        location: event.location,\r\n        departmentId: event.departmentId,\r\n        isCompanyWide: event.isCompanyWide,\r\n        attendees: event.attendees\r\n      };\r\n      \r\n      // Save to server (create or update)\r\n      const savePromise = event.id \r\n        ? saveEventToServer(eventData) // Update\r\n        : createEventOnServer(eventData); // Create\r\n      \r\n      savePromise\r\n        .then(savedEvent => {\r\n          // Update local data\r\n          if (event.id) {\r\n            // Update existing event in list\r\n            const index = events.value.findIndex(e => e.id === event.id);\r\n            if (index !== -1) {\r\n              events.value[index] = savedEvent;\r\n            }\r\n          } else {\r\n            // Add new event to list\r\n            events.value.push(savedEvent);\r\n          }\r\n          \r\n          // Close dialog and show success message\r\n          eventDialogVisible.value = false;\r\n          submitted.value = false;\r\n          \r\n          toast.add({\r\n            severity: 'success',\r\n            summary: dialogMode.value === 'create' ? 'Event Created' : 'Event Updated',\r\n            detail: dialogMode.value === 'create' \r\n              ? 'Event has been created successfully' \r\n              : 'Event has been updated successfully',\r\n            life: 3000\r\n          });\r\n          \r\n          // Refresh calendar\r\n          refreshCalendar();\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving event:', error);\r\n          toast.add({\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: `Failed to ${dialogMode.value === 'create' ? 'create' : 'update'} event`,\r\n            life: 3000\r\n          });\r\n        })\r\n        .finally(() => {\r\n          saving.value = false;\r\n        });\r\n    };\r\n    \r\n    // Mock function to simulate saving to server\r\n    const saveEventToServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a PUT/PATCH request to update the event\r\n          console.log('Updating event on server:', eventData);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: eventData.id,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Mock function to simulate creating event on server\r\n    const createEventOnServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a POST request to create the event\r\n          console.log('Creating event on server:', eventData);\r\n          \r\n          // Generate a fake ID for the new event\r\n          const newId = Math.random().toString(36).substring(2, 11);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: newId,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Edit selected event\r\n    const editSelectedEvent = () => {\r\n      if (!selectedEvent.value) return;\r\n      \r\n      // Close details dialog\r\n      eventDetailsVisible.value = false;\r\n      \r\n      // Populate form with event data\r\n      event.id = selectedEvent.value.id;\r\n      event.title = selectedEvent.value.title;\r\n      event.description = selectedEvent.value.description || '';\r\n      event.startDate = new Date(selectedEvent.value.start_time);\r\n      event.endDate = new Date(selectedEvent.value.end_time);\r\n      event.allDay = selectedEvent.value.all_day;\r\n      event.location = selectedEvent.value.location || '';\r\n      event.departmentId = selectedEvent.value.department_id;\r\n      event.isCompanyWide = selectedEvent.value.is_company_wide;\r\n      event.attendees = selectedEvent.value.attendees?.map(a => a.user_id) || [];\r\n      \r\n      // Show edit dialog\r\n      dialogMode.value = 'edit';\r\n      eventDialogVisible.value = true;\r\n    };\r\n    \r\n    // Delete event\r\n    const confirmDeleteEvent = () => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this event?',\r\n        header: 'Confirm Delete',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteEvent(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n    \r\n    // Delete event after confirmation\r\n    const deleteEvent = () => {\r\n      if (!event.id) return;\r\n      \r\n      saving.value = true;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Remove from local events array\r\n        const index = events.value.findIndex(e => e.id === event.id);\r\n        if (index !== -1) {\r\n          events.value.splice(index, 1);\r\n        }\r\n        \r\n        // Close dialog\r\n        eventDialogVisible.value = false;\r\n        submitted.value = false;\r\n        saving.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Event Deleted',\r\n          detail: 'Event has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh calendar\r\n        refreshCalendar();\r\n      }, 500);\r\n    };\r\n    \r\n    // Update attendance status\r\n    const updateAttendance = (status) => {\r\n      if (!selectedEvent.value || !isAttendee.value) return;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Update local event data\r\n        const attendee = selectedEvent.value.attendees.find(a => a.user_id === currentUserId);\r\n        if (attendee) {\r\n          attendee.status = status;\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Response Updated',\r\n          detail: `You have ${status} the event`,\r\n          life: 3000\r\n        });\r\n      }, 300);\r\n    };\r\n    \r\n    // Refresh calendar\r\n    const refreshCalendar = () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        calendarApi.refetchEvents();\r\n      }\r\n    };\r\n    \r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric' \r\n      }).format(date);\r\n    };\r\n    \r\n    // Format date and time\r\n    const formatDateTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric',\r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Format time only\r\n    const formatTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Check if two dates are the same day\r\n    const isSameDay = (date1, date2) => {\r\n      const d1 = new Date(date1);\r\n      const d2 = new Date(date2);\r\n      return d1.getFullYear() === d2.getFullYear() && \r\n             d1.getMonth() === d2.getMonth() && \r\n             d1.getDate() === d2.getDate();\r\n    };\r\n    \r\n    // Get tag severity for attendance status\r\n    const getAttendanceTagSeverity = (status) => {\r\n      switch (status) {\r\n        case 'accepted': return 'success';\r\n        case 'declined': return 'danger';\r\n        case 'tentative': return 'warning';\r\n        default: return 'info';\r\n      }\r\n    };\r\n    \r\n    // Capitalize first letter\r\n    const capitalizeFirst = (str) => {\r\n      if (!str) return '';\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n    };\r\n    \r\n    // Watch for changes to filters and refresh data\r\n    watch([selectedDepartments, showOnlyMyEvents], () => {\r\n      fetchEvents();\r\n    });\r\n    \r\n    // Watch for calendar view changes\r\n    watch(calendarView, () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        \r\n        switch (calendarView.value) {\r\n          case 'month':\r\n            calendarApi.changeView('dayGridMonth');\r\n            break;\r\n          case 'week':\r\n            calendarApi.changeView('timeGridWeek');\r\n            break;\r\n          case 'day':\r\n            calendarApi.changeView('timeGridDay');\r\n            break;\r\n          case 'list':\r\n            calendarApi.changeView('listWeek');\r\n            break;\r\n        }\r\n        \r\n        // Store current date when changing views\r\n        currentDate.value = calendarApi.getDate();\r\n      }\r\n    });\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      fetchDepartments();\r\n      fetchUsers();\r\n      fetchEvents();\r\n    });\r\n    \r\n    return {\r\n      loading,\r\n      events,\r\n      calendarView,\r\n      viewOptions,\r\n      currentViewTitle,\r\n      selectedDepartments,\r\n      showOnlyMyEvents,\r\n      departments,\r\n      users,\r\n      calendarOptions,\r\n      calendarWeekOptions,\r\n      calendarDayOptions,\r\n      calendarListOptions,\r\n      fullCalendar,\r\n      eventDialogVisible,\r\n      dialogMode,\r\n      event,\r\n      submitted,\r\n      dateRangeError,\r\n      saving,\r\n      eventDetailsVisible,\r\n      selectedEvent,\r\n      isAttendee,\r\n      currentAttendanceStatus,\r\n      canEditEvent,\r\n      canDeleteEvent,\r\n      \r\n      // Methods\r\n      previousPeriod,\r\n      nextPeriod,\r\n      openNewEventDialog,\r\n      closeEventDialog,\r\n      saveEvent,\r\n      editSelectedEvent,\r\n      confirmDeleteEvent,\r\n      updateAttendance,\r\n      formatDate,\r\n      formatDateTime,\r\n      formatTime,\r\n      isSameDay,\r\n      getAttendanceTagSeverity,\r\n      capitalizeFirst\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.calendar-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.calendar-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n}\r\n\r\n.calendar-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.month-navigation {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.calendar-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 400px;\r\n}\r\n\r\n.departments-filter {\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event dialog */\r\n.date-time-fields {\r\n  display: flex;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.start-datetime,\r\n.end-datetime {\r\n  flex: 1;\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event details */\r\n.event-details {\r\n  color: var(--text-color);\r\n}\r\n\r\n.event-detail-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.event-detail-item i {\r\n  margin-right: 0.5rem;\r\n  color: var(--primary-color);\r\n  width: 1.25rem;\r\n}\r\n\r\n.event-description {\r\n  margin: 1rem 0;\r\n  padding: 0.75rem;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.5rem;\r\n  white-space: pre-line;\r\n}\r\n\r\n/* Attendees */\r\n.attendees-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.attendee-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.attendee-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  border-radius: 0.375rem;\r\n  margin-bottom: 0.5rem;\r\n  background-color: var(--surface-ground);\r\n}\r\n\r\n.attendee-avatar {\r\n  margin-right: 0.75rem;\r\n}\r\n\r\n.attendee-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex: 1;\r\n}\r\n\r\n.attendee-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.attendee-status {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n/* Response section */\r\n.response-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.response-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n/* Full calendar overrides */\r\n:deep(.fc) {\r\n  --fc-border-color: var(--surface-border);\r\n  --fc-event-border-color: transparent;\r\n  --fc-today-bg-color: rgba(59, 130, 246, 0.1);\r\n  --fc-event-bg-color: var(--primary-color);\r\n  --fc-event-text-color: #fff;\r\n  --fc-page-bg-color: var(--surface-card);\r\n}\r\n\r\n:deep(.fc-event) {\r\n  cursor: pointer;\r\n  padding: 0.25rem;\r\n  border-radius: 0.25rem;\r\n}\r\n\r\n:deep(.fc-header-toolbar) {\r\n  margin-bottom: 1rem !important;\r\n}\r\n\r\n:deep(.fc-day-today) {\r\n  background-color: var(--surface-hover) !important;\r\n}\r\n\r\n:deep(.fc-timegrid-event-harness), \r\n:deep(.fc-daygrid-event-harness) {\r\n  margin-right: 0.25rem;\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .calendar-toolbar {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .month-navigation {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .view-buttons,\r\n  .filter-buttons {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .departments-filter {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}