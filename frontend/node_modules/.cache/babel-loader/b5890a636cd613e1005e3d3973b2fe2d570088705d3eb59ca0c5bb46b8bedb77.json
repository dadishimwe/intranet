{"ast":null,"code":"import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRoute } from 'vue-router';\nimport Toast from 'primevue/toast';\nimport ConfirmDialog from 'primevue/confirmdialog';\nimport ProgressSpinner from 'primevue/progressspinner';\n\n// Import layout components\nimport Header from './components/layout/Header.vue';\nimport Sidebar from './components/layout/Sidebar.vue';\nimport Footer from './components/layout/Footer.vue';\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    Sidebar,\n    Footer,\n    Toast,\n    ConfirmDialog,\n    ProgressSpinner\n  },\n  setup() {\n    const store = useStore();\n    const route = useRoute();\n    const sidebarVisible = ref(false);\n\n    // Computed properties\n    const isAuthenticated = computed(() => store.state.isAuthenticated);\n    const loading = computed(() => store.state.loading);\n    const isLoginPage = computed(() => route.name === 'Login');\n\n    // Token refresh interval\n    let refreshTokenInterval = null;\n\n    // Setup token refresh interval\n    const setupTokenRefresh = () => {\n      // Clear existing interval if any\n      if (refreshTokenInterval) {\n        clearInterval(refreshTokenInterval);\n      }\n\n      // Set up new interval (every 10 minutes)\n      refreshTokenInterval = setInterval(async () => {\n        if (isAuthenticated.value) {\n          await store.dispatch('refreshToken');\n        }\n      }, 10 * 60 * 1000); // 10 minutes\n    };\n\n    // Lifecycle hooks\n    onMounted(async () => {\n      // If authenticated, refresh user data\n      if (isAuthenticated.value) {\n        try {\n          await store.dispatch('getUserProfile');\n          setupTokenRefresh();\n        } catch (error) {\n          console.error('Failed to load user profile:', error);\n        }\n      }\n\n      // Add window resize handler\n      window.addEventListener('resize', onResize);\n    });\n    onBeforeUnmount(() => {\n      // Clear interval on component destroy\n      if (refreshTokenInterval) {\n        clearInterval(refreshTokenInterval);\n      }\n\n      // Remove resize handler\n      window.removeEventListener('resize', onResize);\n    });\n\n    // Window resize handler\n    const onResize = () => {\n      // Close sidebar on small screens when resizing\n      if (window.innerWidth < 768) {\n        sidebarVisible.value = false;\n      }\n    };\n    return {\n      sidebarVisible,\n      isAuthenticated,\n      loading,\n      isLoginPage\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","useStore","useRoute","Toast","ConfirmDialog","ProgressSpinner","Header","Sidebar","Footer","name","components","setup","store","route","sidebarVisible","isAuthenticated","state","loading","isLoginPage","refreshTokenInterval","setupTokenRefresh","clearInterval","setInterval","value","dispatch","error","console","window","addEventListener","onResize","removeEventListener","innerWidth"],"sources":["/home/pi/projects/intranet/frontend/src/App.vue"],"sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n      <!-- Loading overlay -->\r\n      <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <ProgressSpinner />\r\n      </div>\r\n      \r\n      <!-- Authenticated layout with sidebar and header -->\r\n      <template v-if=\"isAuthenticated && !isLoginPage\">\r\n        <div class=\"layout-wrapper\">\r\n          <!-- Sidebar -->\r\n          <Sidebar :visible=\"sidebarVisible\" @close=\"sidebarVisible = false\" />\r\n          \r\n          <!-- Main content -->\r\n          <div class=\"layout-main\">\r\n            <!-- Header -->\r\n            <Header @toggle-sidebar=\"sidebarVisible = !sidebarVisible\" />\r\n            \r\n            <!-- Page content -->\r\n            <div class=\"layout-content\">\r\n              <router-view />\r\n            </div>\r\n            \r\n            <!-- Footer -->\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </template>\r\n      \r\n      <!-- Unauthenticated layout (login page) -->\r\n      <template v-else>\r\n        <router-view />\r\n      </template>\r\n      \r\n      <!-- Toast notifications -->\r\n      <Toast position=\"top-right\" />\r\n      \r\n      <!-- Confirmation dialog -->\r\n      <ConfirmDialog />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRoute } from 'vue-router';\r\n  import Toast from 'primevue/toast';\r\n  import ConfirmDialog from 'primevue/confirmdialog';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  \r\n  // Import layout components\r\n  import Header from './components/layout/Header.vue';\r\n  import Sidebar from './components/layout/Sidebar.vue';\r\n  import Footer from './components/layout/Footer.vue';\r\n  \r\n  export default {\r\n    name: 'App',\r\n    components: {\r\n      Header,\r\n      Sidebar,\r\n      Footer,\r\n      Toast,\r\n      ConfirmDialog,\r\n      ProgressSpinner\r\n    },\r\n    setup() {\r\n      const store = useStore();\r\n      const route = useRoute();\r\n      const sidebarVisible = ref(false);\r\n      \r\n      // Computed properties\r\n      const isAuthenticated = computed(() => store.state.isAuthenticated);\r\n      const loading = computed(() => store.state.loading);\r\n      const isLoginPage = computed(() => route.name === 'Login');\r\n      \r\n      // Token refresh interval\r\n      let refreshTokenInterval = null;\r\n      \r\n      // Setup token refresh interval\r\n      const setupTokenRefresh = () => {\r\n        // Clear existing interval if any\r\n        if (refreshTokenInterval) {\r\n          clearInterval(refreshTokenInterval);\r\n        }\r\n        \r\n        // Set up new interval (every 10 minutes)\r\n        refreshTokenInterval = setInterval(async () => {\r\n          if (isAuthenticated.value) {\r\n            await store.dispatch('refreshToken');\r\n          }\r\n        }, 10 * 60 * 1000); // 10 minutes\r\n      };\r\n      \r\n      // Lifecycle hooks\r\n      onMounted(async () => {\r\n        // If authenticated, refresh user data\r\n        if (isAuthenticated.value) {\r\n          try {\r\n            await store.dispatch('getUserProfile');\r\n            setupTokenRefresh();\r\n          } catch (error) {\r\n            console.error('Failed to load user profile:', error);\r\n          }\r\n        }\r\n        \r\n        // Add window resize handler\r\n        window.addEventListener('resize', onResize);\r\n      });\r\n      \r\n      onBeforeUnmount(() => {\r\n        // Clear interval on component destroy\r\n        if (refreshTokenInterval) {\r\n          clearInterval(refreshTokenInterval);\r\n        }\r\n        \r\n        // Remove resize handler\r\n        window.removeEventListener('resize', onResize);\r\n      });\r\n      \r\n      // Window resize handler\r\n      const onResize = () => {\r\n        // Close sidebar on small screens when resizing\r\n        if (window.innerWidth < 768) {\r\n          sidebarVisible.value = false;\r\n        }\r\n      };\r\n      \r\n      return {\r\n        sidebarVisible,\r\n        isAuthenticated,\r\n        loading,\r\n        isLoginPage\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Global styles */\r\n  :root {\r\n    --primary-color: #3B82F6;\r\n    --secondary-color: #64748B;\r\n    --success-color: #22C55E;\r\n    --info-color: #3B82F6;\r\n    --warning-color: #F59E0B;\r\n    --danger-color: #EF4444;\r\n    --surface-ground: #F8FAFC;\r\n    --surface-section: #FFFFFF;\r\n    --surface-card: #FFFFFF;\r\n    --surface-overlay: #FFFFFF;\r\n    --surface-border: #E2E8F0;\r\n    --text-color: #334155;\r\n    --text-color-secondary: #64748B;\r\n    --sidebar-width: 240px;\r\n    --topbar-height: 60px;\r\n  }\r\n  \r\n  /* Reset and base styles */\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  \r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, \r\n                 Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\r\n    color: var(--text-color);\r\n    background-color: var(--surface-ground);\r\n    margin: 0;\r\n    padding: 0;\r\n    min-height: 100vh;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  /* Layout styles */\r\n  .layout-wrapper {\r\n    display: flex;\r\n    min-height: 100vh;\r\n  }\r\n  \r\n  .layout-main {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    transition: margin-left 0.3s;\r\n  }\r\n  \r\n  .layout-content {\r\n    flex: 1;\r\n    padding: 1.5rem;\r\n    background-color: var(--surface-ground);\r\n  }\r\n  \r\n  /* Responsive sidebar adjustments */\r\n  @media screen and (min-width: 768px) {\r\n    .layout-main {\r\n      margin-left: var(--sidebar-width);\r\n    }\r\n  }\r\n  \r\n  /* Loading overlay */\r\n  .loading-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 9999;\r\n  }\r\n  \r\n  /* Custom scrollbar */\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n  \r\n  ::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n  \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: var(--secondary-color);\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  /* Card styles */\r\n  .card {\r\n    background: var(--surface-card);\r\n    border-radius: 0.5rem;\r\n    padding: 1.5rem;\r\n    box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.1),\r\n                0 1px 1px 0 rgba(0, 0, 0, 0.07),\r\n                0 1px 3px 0 rgba(0, 0, 0, 0.06);\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  /* Page title styles */\r\n  .page-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 500;\r\n    color: var(--text-color);\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  /* Utility classes */\r\n  .text-center {\r\n    text-align: center;\r\n  }\r\n  \r\n  .mt-2 {\r\n    margin-top: 0.5rem;\r\n  }\r\n  \r\n  .mt-4 {\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .mb-2 {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .mb-4 {\r\n    margin-bottom: 1rem;\r\n  }\r\n  </style>"],"mappings":"AA2CE,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAc,QAAS,KAAK;AAC/D,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,QAAO,QAAS,YAAY;AACrC,OAAOC,KAAI,MAAO,gBAAgB;AAClC,OAAOC,aAAY,MAAO,wBAAwB;AAClD,OAAOC,eAAc,MAAO,0BAA0B;;AAEtD;AACA,OAAOC,MAAK,MAAO,gCAAgC;AACnD,OAAOC,OAAM,MAAO,iCAAiC;AACrD,OAAOC,MAAK,MAAO,gCAAgC;AAEnD,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVJ,MAAM;IACNC,OAAO;IACPC,MAAM;IACNL,KAAK;IACLC,aAAa;IACbC;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIX,QAAQ,CAAC,CAAC;IACxB,MAAMY,KAAI,GAAIX,QAAQ,CAAC,CAAC;IACxB,MAAMY,cAAa,GAAIjB,GAAG,CAAC,KAAK,CAAC;;IAEjC;IACA,MAAMkB,eAAc,GAAIjB,QAAQ,CAAC,MAAMc,KAAK,CAACI,KAAK,CAACD,eAAe,CAAC;IACnE,MAAME,OAAM,GAAInB,QAAQ,CAAC,MAAMc,KAAK,CAACI,KAAK,CAACC,OAAO,CAAC;IACnD,MAAMC,WAAU,GAAIpB,QAAQ,CAAC,MAAMe,KAAK,CAACJ,IAAG,KAAM,OAAO,CAAC;;IAE1D;IACA,IAAIU,oBAAmB,GAAI,IAAI;;IAE/B;IACA,MAAMC,iBAAgB,GAAIA,CAAA,KAAM;MAC9B;MACA,IAAID,oBAAoB,EAAE;QACxBE,aAAa,CAACF,oBAAoB,CAAC;MACrC;;MAEA;MACAA,oBAAmB,GAAIG,WAAW,CAAC,YAAY;QAC7C,IAAIP,eAAe,CAACQ,KAAK,EAAE;UACzB,MAAMX,KAAK,CAACY,QAAQ,CAAC,cAAc,CAAC;QACtC;MACF,CAAC,EAAE,EAAC,GAAI,EAAC,GAAI,IAAI,CAAC,EAAE;IACtB,CAAC;;IAED;IACAzB,SAAS,CAAC,YAAY;MACpB;MACA,IAAIgB,eAAe,CAACQ,KAAK,EAAE;QACzB,IAAI;UACF,MAAMX,KAAK,CAACY,QAAQ,CAAC,gBAAgB,CAAC;UACtCJ,iBAAiB,CAAC,CAAC;QACrB,EAAE,OAAOK,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF;;MAEA;MACAE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEC,QAAQ,CAAC;IAC7C,CAAC,CAAC;IAEF7B,eAAe,CAAC,MAAM;MACpB;MACA,IAAImB,oBAAoB,EAAE;QACxBE,aAAa,CAACF,oBAAoB,CAAC;MACrC;;MAEA;MACAQ,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAED,QAAQ,CAAC;IAChD,CAAC,CAAC;;IAEF;IACA,MAAMA,QAAO,GAAIA,CAAA,KAAM;MACrB;MACA,IAAIF,MAAM,CAACI,UAAS,GAAI,GAAG,EAAE;QAC3BjB,cAAc,CAACS,KAAI,GAAI,KAAK;MAC9B;IACF,CAAC;IAED,OAAO;MACLT,cAAc;MACdC,eAAe;MACfE,OAAO;MACPC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}