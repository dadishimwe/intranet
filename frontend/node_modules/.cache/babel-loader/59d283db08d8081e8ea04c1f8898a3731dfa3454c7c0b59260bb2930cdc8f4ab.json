{"ast":null,"code":"import { ref, reactive, computed, onMounted, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { useConfirm } from 'primevue/useconfirm';\nimport { useToast } from 'primevue/usetoast';\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\n\n// PrimeVue components\nimport Button from 'primevue/button';\nimport SelectButton from 'primevue/selectbutton';\nimport MultiSelect from 'primevue/multiselect';\nimport ToggleButton from 'primevue/togglebutton';\nimport ProgressSpinner from 'primevue/progressspinner';\nimport Dialog from 'primevue/dialog';\nimport InputText from 'primevue/inputtext';\nimport Textarea from 'primevue/textarea';\nimport Checkbox from 'primevue/checkbox';\nimport Calendar from 'primevue/calendar';\nimport Dropdown from 'primevue/dropdown';\nimport Avatar from 'primevue/avatar';\nimport Tag from 'primevue/tag';\nimport Divider from 'primevue/divider';\nimport ConfirmDialog from 'primevue/confirmdialog';\nexport default {\n  name: 'CalendarView',\n  components: {\n    FullCalendar,\n    Button,\n    SelectButton,\n    MultiSelect,\n    ToggleButton,\n    ProgressSpinner,\n    Dialog,\n    InputText,\n    Textarea,\n    Checkbox,\n    Calendar,\n    Dropdown,\n    Avatar,\n    Tag,\n    Divider,\n    ConfirmDialog\n  },\n  setup() {\n    const store = useStore();\n    const confirm = useConfirm();\n    const toast = useToast();\n    const fullCalendar = ref(null);\n\n    // State\n    const loading = ref(true);\n    const events = ref([]);\n    const calendarView = ref('month');\n    const currentDate = ref(new Date());\n    const selectedDepartments = ref([]);\n    const showOnlyMyEvents = ref(false);\n    const saving = ref(false);\n    const submitted = ref(false);\n    const dateRangeError = ref(false);\n\n    // Event dialog state\n    const eventDialogVisible = ref(false);\n    const dialogMode = ref('create'); // 'create' or 'edit'\n\n    // Event details dialog\n    const eventDetailsVisible = ref(false);\n    const selectedEvent = ref(null);\n\n    // Form state\n    const event = reactive({\n      id: null,\n      title: '',\n      description: '',\n      startDate: null,\n      endDate: null,\n      allDay: false,\n      location: '',\n      departmentId: null,\n      isCompanyWide: false,\n      attendees: []\n    });\n\n    // Options for calendar view selector\n    const viewOptions = [{\n      label: 'Month',\n      value: 'month'\n    }, {\n      label: 'Week',\n      value: 'week'\n    }, {\n      label: 'Day',\n      value: 'day'\n    }, {\n      label: 'List',\n      value: 'list'\n    }];\n\n    // Mock departments data (should be fetched from API)\n    const departments = ref([]);\n\n    // Mock users data (should be fetched from API)\n    const users = ref([]);\n\n    // Calendar options\n    const calendarOptions = computed(() => ({\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: 'dayGridMonth',\n      headerToolbar: false,\n      // We're using our own header\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: true,\n      initialDate: currentDate.value,\n      events: mapEventsToCalendar(events.value),\n      eventClick: handleEventClick,\n      dateClick: handleDateClick,\n      select: handleDateSelect,\n      eventDrop: handleEventDrop,\n      eventResize: handleEventResize,\n      height: 'auto'\n    }));\n\n    // Week view options\n    const calendarWeekOptions = computed(() => ({\n      ...calendarOptions.value,\n      initialView: 'timeGridWeek',\n      allDaySlot: true,\n      slotMinTime: '07:00:00',\n      slotMaxTime: '20:00:00'\n    }));\n\n    // Day view options\n    const calendarDayOptions = computed(() => ({\n      ...calendarOptions.value,\n      initialView: 'timeGridDay',\n      allDaySlot: true,\n      slotMinTime: '07:00:00',\n      slotMaxTime: '20:00:00'\n    }));\n\n    // List view options\n    const calendarListOptions = computed(() => ({\n      ...calendarOptions.value,\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],\n      initialView: 'listWeek'\n    }));\n\n    // Current view title (month/year)\n    const currentViewTitle = computed(() => {\n      const date = currentDate.value;\n      const formatter = new Intl.DateTimeFormat('en-US', {\n        month: 'long',\n        year: 'numeric'\n      });\n      return formatter.format(date);\n    });\n\n    // Check if current user is an attendee of the selected event\n    const isAttendee = computed(() => {\n      if (!selectedEvent.value || !selectedEvent.value.attendees) return false;\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      return selectedEvent.value.attendees.some(attendee => attendee.user_id === currentUserId);\n    });\n\n    // Get current user's attendance status\n    const currentAttendanceStatus = computed(() => {\n      if (!isAttendee.value) return null;\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      const attendee = selectedEvent.value.attendees.find(a => a.user_id === currentUserId);\n      return attendee ? attendee.status : null;\n    });\n\n    // Check if user can edit the selected event\n    const canEditEvent = computed(() => {\n      if (!selectedEvent.value) return false;\n      const currentUser = store.getters['auth/currentUser'];\n      if (!currentUser) return false;\n\n      // Admin can edit any event\n      if (store.getters['auth/isAdmin']) return true;\n\n      // Creator can edit their own event\n      return selectedEvent.value.created_by === currentUser.id;\n    });\n\n    // Check if user can delete the selected event\n    const canDeleteEvent = computed(() => {\n      return canEditEvent.value;\n    });\n\n    // Methods\n    const fetchEvents = async () => {\n      try {\n        loading.value = true;\n\n        // Build filter query\n        const filters = {};\n\n        // Date range for current view\n        const calendarApi = fullCalendar.value?.getApi();\n        if (calendarApi) {\n          const view = calendarApi.view;\n          filters.start = view.activeStart.toISOString();\n          filters.end = view.activeEnd.toISOString();\n        }\n\n        // Department filter\n        if (selectedDepartments.value.length > 0) {\n          filters.departmentId = selectedDepartments.value[0].id;\n        }\n\n        // Show only my events filter\n        if (showOnlyMyEvents.value) {\n          filters.userId = store.getters['auth/currentUser']?.id;\n        }\n\n        // Fetch events from API\n        const response = await fetch('/api/calendar', {\n          params: filters\n        });\n\n        // For now, using mock data since we don't have the actual API integrated\n        events.value = await mockFetchEvents();\n      } catch (error) {\n        console.error('Error fetching events:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to load events',\n          life: 3000\n        });\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Mock event data fetch function \n    const mockFetchEvents = () => {\n      // Return a promise to simulate API call\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve([{\n            id: '1',\n            title: 'Annual Budget Meeting',\n            description: 'Review annual budget and forecast for next fiscal year',\n            start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 10, 0),\n            end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 12, 0),\n            all_day: false,\n            location: 'Conference Room A',\n            created_by: 'admin',\n            created_by_name: 'Admin User',\n            department_id: '1',\n            department_name: 'Finance',\n            is_company_wide: true,\n            attendees: [{\n              user_id: '1',\n              first_name: 'John',\n              last_name: 'Doe',\n              email: 'john@example.com',\n              status: 'accepted'\n            }, {\n              user_id: '2',\n              first_name: 'Jane',\n              last_name: 'Smith',\n              email: 'jane@example.com',\n              status: 'tentative'\n            }]\n          }, {\n            id: '2',\n            title: 'Team Building Event',\n            description: 'Company-wide team building activities',\n            start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 22),\n            end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 23),\n            all_day: true,\n            location: 'City Park',\n            created_by: 'admin',\n            created_by_name: 'Admin User',\n            department_id: null,\n            department_name: null,\n            is_company_wide: true,\n            attendees: []\n          }]);\n        }, 500);\n      });\n    };\n\n    // Mock data for departments\n    const fetchDepartments = () => {\n      departments.value = [{\n        id: '1',\n        name: 'Finance'\n      }, {\n        id: '2',\n        name: 'Human Resources'\n      }, {\n        id: '3',\n        name: 'Marketing'\n      }, {\n        id: '4',\n        name: 'Engineering'\n      }, {\n        id: '5',\n        name: 'Operations'\n      }];\n    };\n\n    // Mock data for users\n    const fetchUsers = () => {\n      users.value = [{\n        id: '1',\n        fullName: 'John Doe',\n        email: 'john@example.com'\n      }, {\n        id: '2',\n        fullName: 'Jane Smith',\n        email: 'jane@example.com'\n      }, {\n        id: '3',\n        fullName: 'Bob Johnson',\n        email: 'bob@example.com'\n      }, {\n        id: '4',\n        fullName: 'Alice Williams',\n        email: 'alice@example.com'\n      }];\n    };\n\n    // Map events to FullCalendar format\n    const mapEventsToCalendar = eventsData => {\n      return eventsData.map(event => ({\n        id: event.id,\n        title: event.title,\n        start: event.start_time,\n        end: event.end_time,\n        allDay: event.all_day,\n        extendedProps: {\n          description: event.description,\n          location: event.location,\n          departmentId: event.department_id,\n          departmentName: event.department_name,\n          isCompanyWide: event.is_company_wide,\n          createdBy: event.created_by,\n          createdByName: event.created_by_name,\n          attendees: event.attendees\n        },\n        backgroundColor: getEventColor(event),\n        borderColor: getEventColor(event)\n      }));\n    };\n\n    // Determine event color based on department or other attributes\n    const getEventColor = event => {\n      // Company-wide events are blue\n      if (event.is_company_wide) return '#3B82F6';\n\n      // Color based on department\n      switch (event.department_id) {\n        case '1':\n          return '#22C55E';\n        // Finance - green\n        case '2':\n          return '#F59E0B';\n        // HR - yellow\n        case '3':\n          return '#8B5CF6';\n        // Marketing - purple\n        case '4':\n          return '#EC4899';\n        // Engineering - pink\n        case '5':\n          return '#14B8A6';\n        // Operations - teal\n        default:\n          return '#64748B';\n        // Default - gray\n      }\n    };\n\n    // Handle clicking on an event\n    const handleEventClick = info => {\n      // Get the clicked event data\n      const eventId = info.event.id;\n\n      // Find the full event details\n      const eventData = events.value.find(e => e.id === eventId);\n      if (eventData) {\n        selectedEvent.value = eventData;\n        eventDetailsVisible.value = true;\n      }\n    };\n\n    // Handle clicking on a date\n    const handleDateClick = info => {\n      // Set start date to clicked date\n      const clickedDate = new Date(info.date);\n      resetEventForm();\n      event.startDate = clickedDate;\n      event.endDate = new Date(clickedDate.getTime() + 60 * 60 * 1000); // +1 hour\n\n      dialogMode.value = 'create';\n      eventDialogVisible.value = true;\n    };\n\n    // Handle selecting a date range\n    const handleDateSelect = info => {\n      resetEventForm();\n      event.startDate = new Date(info.start);\n      event.endDate = new Date(info.end);\n      event.allDay = info.allDay;\n      dialogMode.value = 'create';\n      eventDialogVisible.value = true;\n    };\n\n    // Handle dragging an event\n    const handleEventDrop = info => {\n      const eventId = info.event.id;\n      const eventData = events.value.find(e => e.id === eventId);\n      if (eventData) {\n        // Update event dates\n        const updatedEvent = {\n          ...eventData,\n          start_time: info.event.start,\n          end_time: info.event.end || info.event.start,\n          all_day: info.event.allDay\n        };\n\n        // Optimistically update the UI\n        const index = events.value.findIndex(e => e.id === eventId);\n        if (index !== -1) {\n          events.value[index] = updatedEvent;\n        }\n\n        // Save to server (would use real API in production)\n        saveEventToServer(updatedEvent).then(() => {\n          toast.add({\n            severity: 'success',\n            summary: 'Event Updated',\n            detail: 'Event dates updated successfully',\n            life: 3000\n          });\n        }).catch(() => {\n          // Revert the change in UI if save fails\n          info.revert();\n          toast.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Failed to update event',\n            life: 3000\n          });\n        });\n      }\n    };\n\n    // Handle resizing an event\n    const handleEventResize = info => {\n      // Similar to handleEventDrop\n      const eventId = info.event.id;\n      const eventData = events.value.find(e => e.id === eventId);\n      if (eventData) {\n        // Update event end date\n        const updatedEvent = {\n          ...eventData,\n          end_time: info.event.end\n        };\n\n        // Optimistically update the UI\n        const index = events.value.findIndex(e => e.id === eventId);\n        if (index !== -1) {\n          events.value[index] = updatedEvent;\n        }\n\n        // Save to server\n        saveEventToServer(updatedEvent).then(() => {\n          toast.add({\n            severity: 'success',\n            summary: 'Event Updated',\n            detail: 'Event duration updated successfully',\n            life: 3000\n          });\n        }).catch(() => {\n          // Revert the change in UI if save fails\n          info.revert();\n          toast.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Failed to update event',\n            life: 3000\n          });\n        });\n      }\n    };\n\n    // Change calendar view to previous month/week/day\n    const previousPeriod = () => {\n      const calendarApi = fullCalendar.value.getApi();\n      calendarApi.prev();\n      currentDate.value = calendarApi.getDate();\n    };\n\n    // Change calendar view to next month/week/day\n    const nextPeriod = () => {\n      const calendarApi = fullCalendar.value.getApi();\n      calendarApi.next();\n      currentDate.value = calendarApi.getDate();\n    };\n\n    // Open dialog to create a new event\n    const openNewEventDialog = () => {\n      resetEventForm();\n\n      // Set default start/end times\n      const now = new Date();\n      now.setMinutes(0, 0, 0); // Round to nearest hour\n      now.setHours(now.getHours() + 1);\n      event.startDate = now;\n      event.endDate = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\n\n      dialogMode.value = 'create';\n      eventDialogVisible.value = true;\n    };\n\n    // Close event dialog\n    const closeEventDialog = () => {\n      eventDialogVisible.value = false;\n      submitted.value = false;\n      dateRangeError.value = false;\n    };\n\n    // Reset event form\n    const resetEventForm = () => {\n      event.id = null;\n      event.title = '';\n      event.description = '';\n      event.startDate = null;\n      event.endDate = null;\n      event.allDay = false;\n      event.location = '';\n      event.departmentId = null;\n      event.isCompanyWide = false;\n      event.attendees = [];\n    };\n\n    // Validate event form\n    const validateEventForm = () => {\n      dateRangeError.value = false;\n\n      // Check required fields\n      if (!event.title || !event.startDate || !event.endDate) {\n        return false;\n      }\n\n      // Check date range\n      if (event.startDate > event.endDate) {\n        dateRangeError.value = true;\n        return false;\n      }\n      return true;\n    };\n\n    // Save event (create or update)\n    const saveEvent = () => {\n      submitted.value = true;\n      if (!validateEventForm()) {\n        return;\n      }\n      saving.value = true;\n\n      // Prepare event data\n      const eventData = {\n        id: event.id,\n        title: event.title,\n        description: event.description,\n        startTime: event.startDate,\n        endTime: event.endDate,\n        allDay: event.allDay,\n        location: event.location,\n        departmentId: event.departmentId,\n        isCompanyWide: event.isCompanyWide,\n        attendees: event.attendees\n      };\n\n      // Save to server (create or update)\n      const savePromise = event.id ? saveEventToServer(eventData) // Update\n      : createEventOnServer(eventData); // Create\n\n      savePromise.then(savedEvent => {\n        // Update local data\n        if (event.id) {\n          // Update existing event in list\n          const index = events.value.findIndex(e => e.id === event.id);\n          if (index !== -1) {\n            events.value[index] = savedEvent;\n          }\n        } else {\n          // Add new event to list\n          events.value.push(savedEvent);\n        }\n\n        // Close dialog and show success message\n        eventDialogVisible.value = false;\n        submitted.value = false;\n        toast.add({\n          severity: 'success',\n          summary: dialogMode.value === 'create' ? 'Event Created' : 'Event Updated',\n          detail: dialogMode.value === 'create' ? 'Event has been created successfully' : 'Event has been updated successfully',\n          life: 3000\n        });\n\n        // Refresh calendar\n        refreshCalendar();\n      }).catch(error => {\n        console.error('Error saving event:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: `Failed to ${dialogMode.value === 'create' ? 'create' : 'update'} event`,\n          life: 3000\n        });\n      }).finally(() => {\n        saving.value = false;\n      });\n    };\n\n    // Mock function to simulate saving to server\n    const saveEventToServer = eventData => {\n      // Simulate API call with a promise\n      return new Promise(resolve => {\n        setTimeout(() => {\n          // In a real app, this would be a PUT/PATCH request to update the event\n          console.log('Updating event on server:', eventData);\n\n          // Convert to the format that matches our API response\n          const savedEvent = {\n            id: eventData.id,\n            title: eventData.title,\n            description: eventData.description,\n            start_time: eventData.startTime,\n            end_time: eventData.endTime,\n            all_day: eventData.allDay,\n            location: eventData.location,\n            department_id: eventData.departmentId,\n            is_company_wide: eventData.isCompanyWide,\n            created_by: store.getters['auth/currentUser']?.id,\n            created_by_name: store.getters['auth/userFullName'],\n            attendees: eventData.attendees.map(id => {\n              const user = users.value.find(u => u.id === id);\n              return {\n                user_id: id,\n                first_name: user?.fullName.split(' ')[0] || '',\n                last_name: user?.fullName.split(' ')[1] || '',\n                email: user?.email || '',\n                status: 'pending'\n              };\n            })\n          };\n\n          // Find department name if departmentId is provided\n          if (eventData.departmentId) {\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\n            savedEvent.department_name = dept ? dept.name : null;\n          }\n          resolve(savedEvent);\n        }, 500);\n      });\n    };\n\n    // Mock function to simulate creating event on server\n    const createEventOnServer = eventData => {\n      // Simulate API call with a promise\n      return new Promise(resolve => {\n        setTimeout(() => {\n          // In a real app, this would be a POST request to create the event\n          console.log('Creating event on server:', eventData);\n\n          // Generate a fake ID for the new event\n          const newId = Math.random().toString(36).substring(2, 11);\n\n          // Convert to the format that matches our API response\n          const savedEvent = {\n            id: newId,\n            title: eventData.title,\n            description: eventData.description,\n            start_time: eventData.startTime,\n            end_time: eventData.endTime,\n            all_day: eventData.allDay,\n            location: eventData.location,\n            department_id: eventData.departmentId,\n            is_company_wide: eventData.isCompanyWide,\n            created_by: store.getters['auth/currentUser']?.id,\n            created_by_name: store.getters['auth/userFullName'],\n            attendees: eventData.attendees.map(id => {\n              const user = users.value.find(u => u.id === id);\n              return {\n                user_id: id,\n                first_name: user?.fullName.split(' ')[0] || '',\n                last_name: user?.fullName.split(' ')[1] || '',\n                email: user?.email || '',\n                status: 'pending'\n              };\n            })\n          };\n\n          // Find department name if departmentId is provided\n          if (eventData.departmentId) {\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\n            savedEvent.department_name = dept ? dept.name : null;\n          }\n          resolve(savedEvent);\n        }, 500);\n      });\n    };\n\n    // Edit selected event\n    const editSelectedEvent = () => {\n      if (!selectedEvent.value) return;\n\n      // Close details dialog\n      eventDetailsVisible.value = false;\n\n      // Populate form with event data\n      event.id = selectedEvent.value.id;\n      event.title = selectedEvent.value.title;\n      event.description = selectedEvent.value.description || '';\n      event.startDate = new Date(selectedEvent.value.start_time);\n      event.endDate = new Date(selectedEvent.value.end_time);\n      event.allDay = selectedEvent.value.all_day;\n      event.location = selectedEvent.value.location || '';\n      event.departmentId = selectedEvent.value.department_id;\n      event.isCompanyWide = selectedEvent.value.is_company_wide;\n      event.attendees = selectedEvent.value.attendees?.map(a => a.user_id) || [];\n\n      // Show edit dialog\n      dialogMode.value = 'edit';\n      eventDialogVisible.value = true;\n    };\n\n    // Delete event\n    const confirmDeleteEvent = () => {\n      confirm.require({\n        message: 'Are you sure you want to delete this event?',\n        header: 'Confirm Delete',\n        icon: 'pi pi-exclamation-triangle',\n        acceptClass: 'p-button-danger',\n        accept: () => deleteEvent(),\n        reject: () => {}\n      });\n    };\n\n    // Delete event after confirmation\n    const deleteEvent = () => {\n      if (!event.id) return;\n      saving.value = true;\n\n      // Simulate API call\n      setTimeout(() => {\n        // Remove from local events array\n        const index = events.value.findIndex(e => e.id === event.id);\n        if (index !== -1) {\n          events.value.splice(index, 1);\n        }\n\n        // Close dialog\n        eventDialogVisible.value = false;\n        submitted.value = false;\n        saving.value = false;\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Event Deleted',\n          detail: 'Event has been deleted successfully',\n          life: 3000\n        });\n\n        // Refresh calendar\n        refreshCalendar();\n      }, 500);\n    };\n\n    // Update attendance status\n    const updateAttendance = status => {\n      if (!selectedEvent.value || !isAttendee.value) return;\n      const currentUserId = store.getters['auth/currentUser']?.id;\n\n      // Simulate API call\n      setTimeout(() => {\n        // Update local event data\n        const attendee = selectedEvent.value.attendees.find(a => a.user_id === currentUserId);\n        if (attendee) {\n          attendee.status = status;\n        }\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Response Updated',\n          detail: `You have ${status} the event`,\n          life: 3000\n        });\n      }, 300);\n    };\n\n    // Refresh calendar\n    const refreshCalendar = () => {\n      if (fullCalendar.value) {\n        const calendarApi = fullCalendar.value.getApi();\n        calendarApi.refetchEvents();\n      }\n    };\n\n    // Format date\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      }).format(date);\n    };\n\n    // Format date and time\n    const formatDateTime = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      }).format(date);\n    };\n\n    // Format time only\n    const formatTime = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      }).format(date);\n    };\n\n    // Check if two dates are the same day\n    const isSameDay = (date1, date2) => {\n      const d1 = new Date(date1);\n      const d2 = new Date(date2);\n      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n    };\n\n    // Get tag severity for attendance status\n    const getAttendanceTagSeverity = status => {\n      switch (status) {\n        case 'accepted':\n          return 'success';\n        case 'declined':\n          return 'danger';\n        case 'tentative':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    };\n\n    // Capitalize first letter\n    const capitalizeFirst = str => {\n      if (!str) return '';\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n\n    // Watch for changes to filters and refresh data\n    watch([selectedDepartments, showOnlyMyEvents], () => {\n      fetchEvents();\n    });\n\n    // Watch for calendar view changes\n    watch(calendarView, () => {\n      if (fullCalendar.value) {\n        const calendarApi = fullCalendar.value.getApi();\n        switch (calendarView.value) {\n          case 'month':\n            calendarApi.changeView('dayGridMonth');\n            break;\n          case 'week':\n            calendarApi.changeView('timeGridWeek');\n            break;\n          case 'day':\n            calendarApi.changeView('timeGridDay');\n            break;\n          case 'list':\n            calendarApi.changeView('listWeek');\n            break;\n        }\n\n        // Store current date when changing views\n        currentDate.value = calendarApi.getDate();\n      }\n    });\n\n    // Fetch data on component mount\n    onMounted(() => {\n      fetchDepartments();\n      fetchUsers();\n      fetchEvents();\n    });\n    return {\n      loading,\n      events,\n      calendarView,\n      viewOptions,\n      currentViewTitle,\n      selectedDepartments,\n      showOnlyMyEvents,\n      departments,\n      users,\n      calendarOptions,\n      calendarWeekOptions,\n      calendarDayOptions,\n      calendarListOptions,\n      fullCalendar,\n      eventDialogVisible,\n      dialogMode,\n      event,\n      submitted,\n      dateRangeError,\n      saving,\n      eventDetailsVisible,\n      selectedEvent,\n      isAttendee,\n      currentAttendanceStatus,\n      canEditEvent,\n      canDeleteEvent,\n      // Methods\n      previousPeriod,\n      nextPeriod,\n      openNewEventDialog,\n      closeEventDialog,\n      saveEvent,\n      editSelectedEvent,\n      confirmDeleteEvent,\n      updateAttendance,\n      formatDate,\n      formatDateTime,\n      formatTime,\n      isSameDay,\n      getAttendanceTagSeverity,\n      capitalizeFirst\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","watch","useStore","useConfirm","useToast","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","Button","SelectButton","MultiSelect","ToggleButton","ProgressSpinner","Dialog","InputText","Textarea","Checkbox","Calendar","Dropdown","Avatar","Tag","Divider","ConfirmDialog","name","components","setup","store","confirm","toast","fullCalendar","loading","events","calendarView","currentDate","Date","selectedDepartments","showOnlyMyEvents","saving","submitted","dateRangeError","eventDialogVisible","dialogMode","eventDetailsVisible","selectedEvent","event","id","title","description","startDate","endDate","allDay","location","departmentId","isCompanyWide","attendees","viewOptions","label","value","departments","users","calendarOptions","plugins","initialView","headerToolbar","editable","selectable","selectMirror","dayMaxEvents","weekends","initialDate","mapEventsToCalendar","eventClick","handleEventClick","dateClick","handleDateClick","select","handleDateSelect","eventDrop","handleEventDrop","eventResize","handleEventResize","height","calendarWeekOptions","allDaySlot","slotMinTime","slotMaxTime","calendarDayOptions","calendarListOptions","currentViewTitle","date","formatter","Intl","DateTimeFormat","month","year","format","isAttendee","currentUserId","getters","some","attendee","user_id","currentAttendanceStatus","find","a","status","canEditEvent","currentUser","created_by","canDeleteEvent","fetchEvents","filters","calendarApi","getApi","view","start","activeStart","toISOString","end","activeEnd","length","userId","response","fetch","params","mockFetchEvents","error","console","add","severity","summary","detail","life","Promise","resolve","setTimeout","start_time","getFullYear","getMonth","end_time","all_day","created_by_name","department_id","department_name","is_company_wide","first_name","last_name","email","fetchDepartments","fetchUsers","fullName","eventsData","map","extendedProps","departmentName","createdBy","createdByName","backgroundColor","getEventColor","borderColor","info","eventId","eventData","e","clickedDate","resetEventForm","getTime","updatedEvent","index","findIndex","saveEventToServer","then","catch","revert","previousPeriod","prev","getDate","nextPeriod","next","openNewEventDialog","now","setMinutes","setHours","getHours","closeEventDialog","validateEventForm","saveEvent","startTime","endTime","savePromise","createEventOnServer","savedEvent","push","refreshCalendar","finally","log","user","u","split","dept","d","newId","Math","random","toString","substring","editSelectedEvent","confirmDeleteEvent","require","message","header","icon","acceptClass","accept","deleteEvent","reject","splice","updateAttendance","refetchEvents","formatDate","dateString","day","formatDateTime","hour","minute","hour12","formatTime","isSameDay","date1","date2","d1","d2","getAttendanceTagSeverity","capitalizeFirst","str","charAt","toUpperCase","slice","changeView"],"sources":["/home/pi/projects/intranet/frontend/src/views/Calendar.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Calendar</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Event\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewEventDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <div class=\"calendar-toolbar\">\r\n        <div class=\"view-buttons\">\r\n          <SelectButton v-model=\"calendarView\" :options=\"viewOptions\" />\r\n        </div>\r\n        <div class=\"month-navigation\">\r\n          <Button \r\n            icon=\"pi pi-chevron-left\" \r\n            class=\"p-button-text\" \r\n            @click=\"previousPeriod\" \r\n          />\r\n          <h2 class=\"calendar-title\">{{ currentViewTitle }}</h2>\r\n          <Button \r\n            icon=\"pi pi-chevron-right\" \r\n            class=\"p-button-text\" \r\n            @click=\"nextPeriod\" \r\n          />\r\n        </div>\r\n        <div class=\"filter-buttons\">\r\n          <MultiSelect \r\n            v-model=\"selectedDepartments\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            placeholder=\"All Departments\" \r\n            class=\"departments-filter\" \r\n            :maxSelectedLabels=\"1\"\r\n          />\r\n          <ToggleButton \r\n            v-model=\"showOnlyMyEvents\" \r\n            onLabel=\"My Events\" \r\n            offLabel=\"All Events\" \r\n            onIcon=\"pi pi-user\" \r\n            offIcon=\"pi pi-users\" \r\n            class=\"ml-2\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"calendar-loading\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- Calendar view -->\r\n      <div v-else class=\"calendar-view\">\r\n        <!-- Month view -->\r\n        <FullCalendar \r\n          v-if=\"calendarView === 'month'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarOptions\"\r\n        />\r\n\r\n        <!-- Week view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'week'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarWeekOptions\"\r\n        />\r\n\r\n        <!-- Day view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'day'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarDayOptions\"\r\n        />\r\n\r\n        <!-- List view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'list'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarListOptions\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Event Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDialogVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New Event' : 'Edit Event'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid\"\r\n    >\r\n      <div class=\"event-form\">\r\n        <div class=\"field\">\r\n          <label for=\"title\">Title *</label>\r\n          <InputText \r\n            id=\"title\" \r\n            v-model=\"event.title\" \r\n            required \r\n            autofocus \r\n            :class=\"{ 'p-invalid': submitted && !event.title }\"\r\n          />\r\n          <small v-if=\"submitted && !event.title\" class=\"p-error\">Title is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"description\">Description</label>\r\n          <Textarea \r\n            id=\"description\" \r\n            v-model=\"event.description\" \r\n            rows=\"3\" \r\n            autoResize \r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>All Day</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.allDay\" binary id=\"allDay\" />\r\n            <label for=\"allDay\">Event runs all day</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Date/Time *</label>\r\n          <div class=\"date-time-fields\">\r\n            <div class=\"start-datetime\">\r\n              <Calendar \r\n                v-model=\"event.startDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"Start Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.startDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.startDate\" class=\"p-error\">Start date is required.</small>\r\n            </div>\r\n\r\n            <div class=\"end-datetime\">\r\n              <Calendar \r\n                v-model=\"event.endDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"End Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.endDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.endDate\" class=\"p-error\">End date is required.</small>\r\n              <small v-if=\"dateRangeError\" class=\"p-error\">End date must be after start date.</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"location\">Location</label>\r\n          <InputText id=\"location\" v-model=\"event.location\" />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"departmentId\">Department</label>\r\n          <Dropdown \r\n            id=\"departmentId\" \r\n            v-model=\"event.departmentId\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Department\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Visibility</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.isCompanyWide\" binary id=\"isCompanyWide\" />\r\n            <label for=\"isCompanyWide\">Company-wide event</label>\r\n          </div>\r\n          <small>If checked, all employees will see this event</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"attendees\">Attendees</label>\r\n          <MultiSelect \r\n            id=\"attendees\" \r\n            v-model=\"event.attendees\" \r\n            :options=\"users\" \r\n            optionLabel=\"fullName\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Attendees\"\r\n            display=\"chip\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeEventDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && canDeleteEvent\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteEvent\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveEvent\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Event Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDetailsVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"selectedEvent.title\" \r\n      :modal=\"true\"\r\n    >\r\n      <div v-if=\"selectedEvent\" class=\"event-details\">\r\n        <div class=\"event-detail-item\">\r\n          <i class=\"pi pi-calendar\"></i>\r\n          <span v-if=\"selectedEvent.allDay\">\r\n            {{ formatDate(selectedEvent.startTime) }}\r\n            <span v-if=\"!isSameDay(selectedEvent.startTime, selectedEvent.endTime)\">\r\n              - {{ formatDate(selectedEvent.endTime) }}\r\n            </span>\r\n            <Tag value=\"All Day\" class=\"ml-2\" />\r\n          </span>\r\n          <span v-else>\r\n            {{ formatDateTime(selectedEvent.startTime) }} - {{ formatTime(selectedEvent.endTime) }}\r\n          </span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.location\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-map-marker\"></i>\r\n          <span>{{ selectedEvent.location }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.description\" class=\"event-description\">\r\n          {{ selectedEvent.description }}\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.department_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-sitemap\"></i>\r\n          <span>Department: {{ selectedEvent.department_name }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.created_by_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-user\"></i>\r\n          <span>Created by: {{ selectedEvent.created_by_name }}</span>\r\n        </div>\r\n\r\n        <Divider v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" />\r\n\r\n        <div v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" class=\"attendees-section\">\r\n          <h3>Attendees</h3>\r\n          <ul class=\"attendee-list\">\r\n            <li v-for=\"attendee in selectedEvent.attendees\" :key=\"attendee.user_id\" class=\"attendee-item\">\r\n              <div class=\"attendee-avatar\">\r\n                <Avatar \r\n                  :image=\"attendee.profile_image\" \r\n                  size=\"small\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '32px',\r\n                        height: '32px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n              </div>\r\n              <div class=\"attendee-info\">\r\n                <span class=\"attendee-name\">{{ attendee.first_name }} {{ attendee.last_name }}</span>\r\n                <Tag \r\n                  :value=\"capitalizeFirst(attendee.status)\" \r\n                  :severity=\"getAttendanceTagSeverity(attendee.status)\" \r\n                  class=\"attendee-status\"\r\n                />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div v-if=\"isAttendee\" class=\"response-section\">\r\n          <Divider />\r\n          <h3>Your Response</h3>\r\n          <div class=\"response-buttons\">\r\n            <Button \r\n              label=\"Accept\" \r\n              class=\"p-button-success mr-2\" \r\n              @click=\"updateAttendance('accepted')\" \r\n              :disabled=\"currentAttendanceStatus === 'accepted'\" \r\n            />\r\n            <Button \r\n              label=\"Maybe\" \r\n              class=\"p-button-warning mr-2\" \r\n              @click=\"updateAttendance('tentative')\" \r\n              :disabled=\"currentAttendanceStatus === 'tentative'\" \r\n            />\r\n            <Button \r\n              label=\"Decline\" \r\n              class=\"p-button-danger\" \r\n              @click=\"updateAttendance('declined')\" \r\n              :disabled=\"currentAttendanceStatus === 'declined'\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"eventDetailsVisible = false\" \r\n        />\r\n        <Button \r\n          v-if=\"canEditEvent\" \r\n          label=\"Edit\" \r\n          icon=\"pi pi-pencil\" \r\n          @click=\"editSelectedEvent\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Delete Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\nimport FullCalendar from '@fullcalendar/vue3';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport SelectButton from 'primevue/selectbutton';\r\nimport MultiSelect from 'primevue/multiselect';\r\nimport ToggleButton from 'primevue/togglebutton';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport InputText from 'primevue/inputtext';\r\nimport Textarea from 'primevue/textarea';\r\nimport Checkbox from 'primevue/checkbox';\r\nimport Calendar from 'primevue/calendar';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Avatar from 'primevue/avatar';\r\nimport Tag from 'primevue/tag';\r\nimport Divider from 'primevue/divider';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\n\r\nexport default {\r\n  name: 'CalendarView',\r\n  components: {\r\n    FullCalendar,\r\n    Button,\r\n    SelectButton,\r\n    MultiSelect,\r\n    ToggleButton,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    InputText,\r\n    Textarea,\r\n    Checkbox,\r\n    Calendar,\r\n    Dropdown,\r\n    Avatar,\r\n    Tag,\r\n    Divider,\r\n    ConfirmDialog\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n    const fullCalendar = ref(null);\r\n\r\n    // State\r\n    const loading = ref(true);\r\n    const events = ref([]);\r\n    const calendarView = ref('month');\r\n    const currentDate = ref(new Date());\r\n    const selectedDepartments = ref([]);\r\n    const showOnlyMyEvents = ref(false);\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const dateRangeError = ref(false);\r\n\r\n    // Event dialog state\r\n    const eventDialogVisible = ref(false);\r\n    const dialogMode = ref('create'); // 'create' or 'edit'\r\n    \r\n    // Event details dialog\r\n    const eventDetailsVisible = ref(false);\r\n    const selectedEvent = ref(null);\r\n    \r\n    // Form state\r\n    const event = reactive({\r\n      id: null,\r\n      title: '',\r\n      description: '',\r\n      startDate: null,\r\n      endDate: null,\r\n      allDay: false,\r\n      location: '',\r\n      departmentId: null,\r\n      isCompanyWide: false,\r\n      attendees: []\r\n    });\r\n\r\n    // Options for calendar view selector\r\n    const viewOptions = [\r\n      { label: 'Month', value: 'month' },\r\n      { label: 'Week', value: 'week' },\r\n      { label: 'Day', value: 'day' },\r\n      { label: 'List', value: 'list' }\r\n    ];\r\n\r\n    // Mock departments data (should be fetched from API)\r\n    const departments = ref([]);\r\n    \r\n    // Mock users data (should be fetched from API)\r\n    const users = ref([]);\r\n\r\n    // Calendar options\r\n    const calendarOptions = computed(() => ({\r\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n      initialView: 'dayGridMonth',\r\n      headerToolbar: false, // We're using our own header\r\n      editable: true,\r\n      selectable: true,\r\n      selectMirror: true,\r\n      dayMaxEvents: true,\r\n      weekends: true,\r\n      initialDate: currentDate.value,\r\n      events: mapEventsToCalendar(events.value),\r\n      eventClick: handleEventClick,\r\n      dateClick: handleDateClick,\r\n      select: handleDateSelect,\r\n      eventDrop: handleEventDrop,\r\n      eventResize: handleEventResize,\r\n      height: 'auto'\r\n    }));\r\n\r\n    // Week view options\r\n    const calendarWeekOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridWeek',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // Day view options\r\n    const calendarDayOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridDay',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // List view options\r\n    const calendarListOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],\r\n      initialView: 'listWeek'\r\n    }));\r\n\r\n    // Current view title (month/year)\r\n    const currentViewTitle = computed(() => {\r\n      const date = currentDate.value;\r\n      const formatter = new Intl.DateTimeFormat('en-US', { \r\n        month: 'long', \r\n        year: 'numeric' \r\n      });\r\n      \r\n      return formatter.format(date);\r\n    });\r\n\r\n    // Check if current user is an attendee of the selected event\r\n    const isAttendee = computed(() => {\r\n      if (!selectedEvent.value || !selectedEvent.value.attendees) return false;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedEvent.value.attendees.some(attendee => \r\n        attendee.user_id === currentUserId\r\n      );\r\n    });\r\n\r\n    // Get current user's attendance status\r\n    const currentAttendanceStatus = computed(() => {\r\n      if (!isAttendee.value) return null;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      const attendee = selectedEvent.value.attendees.find(a => \r\n        a.user_id === currentUserId\r\n      );\r\n      \r\n      return attendee ? attendee.status : null;\r\n    });\r\n\r\n    // Check if user can edit the selected event\r\n    const canEditEvent = computed(() => {\r\n      if (!selectedEvent.value) return false;\r\n      \r\n      const currentUser = store.getters['auth/currentUser'];\r\n      if (!currentUser) return false;\r\n      \r\n      // Admin can edit any event\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // Creator can edit their own event\r\n      return selectedEvent.value.created_by === currentUser.id;\r\n    });\r\n\r\n    // Check if user can delete the selected event\r\n    const canDeleteEvent = computed(() => {\r\n      return canEditEvent.value;\r\n    });\r\n\r\n    // Methods\r\n    const fetchEvents = async () => {\r\n      try {\r\n        loading.value = true;\r\n        \r\n        // Build filter query\r\n        const filters = {};\r\n        \r\n        // Date range for current view\r\n        const calendarApi = fullCalendar.value?.getApi();\r\n        if (calendarApi) {\r\n          const view = calendarApi.view;\r\n          filters.start = view.activeStart.toISOString();\r\n          filters.end = view.activeEnd.toISOString();\r\n        }\r\n        \r\n        // Department filter\r\n        if (selectedDepartments.value.length > 0) {\r\n          filters.departmentId = selectedDepartments.value[0].id;\r\n        }\r\n        \r\n        // Show only my events filter\r\n        if (showOnlyMyEvents.value) {\r\n          filters.userId = store.getters['auth/currentUser']?.id;\r\n        }\r\n        \r\n        // Fetch events from API\r\n        const response = await fetch('/api/calendar', { \r\n          params: filters \r\n        });\r\n        \r\n        // For now, using mock data since we don't have the actual API integrated\r\n        events.value = await mockFetchEvents();\r\n      } catch (error) {\r\n        console.error('Error fetching events:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load events',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Mock event data fetch function \r\n    const mockFetchEvents = () => {\r\n      // Return a promise to simulate API call\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve([\r\n            {\r\n              id: '1',\r\n              title: 'Annual Budget Meeting',\r\n              description: 'Review annual budget and forecast for next fiscal year',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 10, 0),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 12, 0),\r\n              all_day: false,\r\n              location: 'Conference Room A',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: '1',\r\n              department_name: 'Finance',\r\n              is_company_wide: true,\r\n              attendees: [\r\n                {\r\n                  user_id: '1',\r\n                  first_name: 'John',\r\n                  last_name: 'Doe',\r\n                  email: 'john@example.com',\r\n                  status: 'accepted'\r\n                },\r\n                {\r\n                  user_id: '2',\r\n                  first_name: 'Jane',\r\n                  last_name: 'Smith',\r\n                  email: 'jane@example.com',\r\n                  status: 'tentative'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              id: '2',\r\n              title: 'Team Building Event',\r\n              description: 'Company-wide team building activities',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 22),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 23),\r\n              all_day: true,\r\n              location: 'City Park',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: null,\r\n              department_name: null,\r\n              is_company_wide: true,\r\n              attendees: []\r\n            }\r\n          ]);\r\n        }, 500);\r\n      });\r\n    };\r\n\r\n    // Mock data for departments\r\n    const fetchDepartments = () => {\r\n      departments.value = [\r\n        { id: '1', name: 'Finance' },\r\n        { id: '2', name: 'Human Resources' },\r\n        { id: '3', name: 'Marketing' },\r\n        { id: '4', name: 'Engineering' },\r\n        { id: '5', name: 'Operations' }\r\n      ];\r\n    };\r\n\r\n    // Mock data for users\r\n    const fetchUsers = () => {\r\n      users.value = [\r\n        { id: '1', fullName: 'John Doe', email: 'john@example.com' },\r\n        { id: '2', fullName: 'Jane Smith', email: 'jane@example.com' },\r\n        { id: '3', fullName: 'Bob Johnson', email: 'bob@example.com' },\r\n        { id: '4', fullName: 'Alice Williams', email: 'alice@example.com' }\r\n      ];\r\n    };\r\n\r\n    // Map events to FullCalendar format\r\n    const mapEventsToCalendar = (eventsData) => {\r\n      return eventsData.map(event => ({\r\n        id: event.id,\r\n        title: event.title,\r\n        start: event.start_time,\r\n        end: event.end_time,\r\n        allDay: event.all_day,\r\n        extendedProps: {\r\n          description: event.description,\r\n          location: event.location,\r\n          departmentId: event.department_id,\r\n          departmentName: event.department_name,\r\n          isCompanyWide: event.is_company_wide,\r\n          createdBy: event.created_by,\r\n          createdByName: event.created_by_name,\r\n          attendees: event.attendees\r\n        },\r\n        backgroundColor: getEventColor(event),\r\n        borderColor: getEventColor(event)\r\n      }));\r\n    };\r\n\r\n    // Determine event color based on department or other attributes\r\n    const getEventColor = (event) => {\r\n      // Company-wide events are blue\r\n      if (event.is_company_wide) return '#3B82F6';\r\n      \r\n      // Color based on department\r\n      switch (event.department_id) {\r\n        case '1': return '#22C55E'; // Finance - green\r\n        case '2': return '#F59E0B'; // HR - yellow\r\n        case '3': return '#8B5CF6'; // Marketing - purple\r\n        case '4': return '#EC4899'; // Engineering - pink\r\n        case '5': return '#14B8A6'; // Operations - teal\r\n        default: return '#64748B'; // Default - gray\r\n      }\r\n    };\r\n\r\n    // Handle clicking on an event\r\n    const handleEventClick = (info) => {\r\n      // Get the clicked event data\r\n      const eventId = info.event.id;\r\n      \r\n      // Find the full event details\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        selectedEvent.value = eventData;\r\n        eventDetailsVisible.value = true;\r\n      }\r\n    };\r\n\r\n    // Handle clicking on a date\r\n    const handleDateClick = (info) => {\r\n      // Set start date to clicked date\r\n      const clickedDate = new Date(info.date);\r\n      resetEventForm();\r\n      \r\n      event.startDate = clickedDate;\r\n      event.endDate = new Date(clickedDate.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle selecting a date range\r\n    const handleDateSelect = (info) => {\r\n      resetEventForm();\r\n      \r\n      event.startDate = new Date(info.start);\r\n      event.endDate = new Date(info.end);\r\n      event.allDay = info.allDay;\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle dragging an event\r\n    const handleEventDrop = (info) => {\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event dates\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          start_time: info.event.start,\r\n          end_time: info.event.end || info.event.start,\r\n          all_day: info.event.allDay\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server (would use real API in production)\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event dates updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Handle resizing an event\r\n    const handleEventResize = (info) => {\r\n      // Similar to handleEventDrop\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event end date\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          end_time: info.event.end\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event duration updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Change calendar view to previous month/week/day\r\n    const previousPeriod = () => {\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.prev();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Change calendar view to next month/week/day\r\n    const nextPeriod = () => {\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.next();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Open dialog to create a new event\r\n    const openNewEventDialog = () => {\r\n      resetEventForm();\r\n      \r\n      // Set default start/end times\r\n      const now = new Date();\r\n      now.setMinutes(0, 0, 0); // Round to nearest hour\r\n      now.setHours(now.getHours() + 1);\r\n      \r\n      event.startDate = now;\r\n      event.endDate = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Close event dialog\r\n    const closeEventDialog = () => {\r\n      eventDialogVisible.value = false;\r\n      submitted.value = false;\r\n      dateRangeError.value = false;\r\n    };\r\n\r\n    // Reset event form\r\n    const resetEventForm = () => {\r\n      event.id = null;\r\n      event.title = '';\r\n      event.description = '';\r\n      event.startDate = null;\r\n      event.endDate = null;\r\n      event.allDay = false;\r\n      event.location = '';\r\n      event.departmentId = null;\r\n      event.isCompanyWide = false;\r\n      event.attendees = [];\r\n    };\r\n\r\n    // Validate event form\r\n    const validateEventForm = () => {\r\n      dateRangeError.value = false;\r\n      \r\n      // Check required fields\r\n      if (!event.title || !event.startDate || !event.endDate) {\r\n        return false;\r\n      }\r\n      \r\n      // Check date range\r\n      if (event.startDate > event.endDate) {\r\n        dateRangeError.value = true;\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    };\r\n\r\n    // Save event (create or update)\r\n    const saveEvent = () => {\r\n      submitted.value = true;\r\n      \r\n      if (!validateEventForm()) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      // Prepare event data\r\n      const eventData = {\r\n        id: event.id,\r\n        title: event.title,\r\n        description: event.description,\r\n        startTime: event.startDate,\r\n        endTime: event.endDate,\r\n        allDay: event.allDay,\r\n        location: event.location,\r\n        departmentId: event.departmentId,\r\n        isCompanyWide: event.isCompanyWide,\r\n        attendees: event.attendees\r\n      };\r\n      \r\n      // Save to server (create or update)\r\n      const savePromise = event.id \r\n        ? saveEventToServer(eventData) // Update\r\n        : createEventOnServer(eventData); // Create\r\n      \r\n      savePromise\r\n        .then(savedEvent => {\r\n          // Update local data\r\n          if (event.id) {\r\n            // Update existing event in list\r\n            const index = events.value.findIndex(e => e.id === event.id);\r\n            if (index !== -1) {\r\n              events.value[index] = savedEvent;\r\n            }\r\n          } else {\r\n            // Add new event to list\r\n            events.value.push(savedEvent);\r\n          }\r\n          \r\n          // Close dialog and show success message\r\n          eventDialogVisible.value = false;\r\n          submitted.value = false;\r\n          \r\n          toast.add({\r\n            severity: 'success',\r\n            summary: dialogMode.value === 'create' ? 'Event Created' : 'Event Updated',\r\n            detail: dialogMode.value === 'create' \r\n              ? 'Event has been created successfully' \r\n              : 'Event has been updated successfully',\r\n            life: 3000\r\n          });\r\n          \r\n          // Refresh calendar\r\n          refreshCalendar();\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving event:', error);\r\n          toast.add({\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: `Failed to ${dialogMode.value === 'create' ? 'create' : 'update'} event`,\r\n            life: 3000\r\n          });\r\n        })\r\n        .finally(() => {\r\n          saving.value = false;\r\n        });\r\n    };\r\n    \r\n    // Mock function to simulate saving to server\r\n    const saveEventToServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a PUT/PATCH request to update the event\r\n          console.log('Updating event on server:', eventData);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: eventData.id,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Mock function to simulate creating event on server\r\n    const createEventOnServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a POST request to create the event\r\n          console.log('Creating event on server:', eventData);\r\n          \r\n          // Generate a fake ID for the new event\r\n          const newId = Math.random().toString(36).substring(2, 11);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: newId,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Edit selected event\r\n    const editSelectedEvent = () => {\r\n      if (!selectedEvent.value) return;\r\n      \r\n      // Close details dialog\r\n      eventDetailsVisible.value = false;\r\n      \r\n      // Populate form with event data\r\n      event.id = selectedEvent.value.id;\r\n      event.title = selectedEvent.value.title;\r\n      event.description = selectedEvent.value.description || '';\r\n      event.startDate = new Date(selectedEvent.value.start_time);\r\n      event.endDate = new Date(selectedEvent.value.end_time);\r\n      event.allDay = selectedEvent.value.all_day;\r\n      event.location = selectedEvent.value.location || '';\r\n      event.departmentId = selectedEvent.value.department_id;\r\n      event.isCompanyWide = selectedEvent.value.is_company_wide;\r\n      event.attendees = selectedEvent.value.attendees?.map(a => a.user_id) || [];\r\n      \r\n      // Show edit dialog\r\n      dialogMode.value = 'edit';\r\n      eventDialogVisible.value = true;\r\n    };\r\n    \r\n    // Delete event\r\n    const confirmDeleteEvent = () => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this event?',\r\n        header: 'Confirm Delete',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteEvent(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n    \r\n    // Delete event after confirmation\r\n    const deleteEvent = () => {\r\n      if (!event.id) return;\r\n      \r\n      saving.value = true;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Remove from local events array\r\n        const index = events.value.findIndex(e => e.id === event.id);\r\n        if (index !== -1) {\r\n          events.value.splice(index, 1);\r\n        }\r\n        \r\n        // Close dialog\r\n        eventDialogVisible.value = false;\r\n        submitted.value = false;\r\n        saving.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Event Deleted',\r\n          detail: 'Event has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh calendar\r\n        refreshCalendar();\r\n      }, 500);\r\n    };\r\n    \r\n    // Update attendance status\r\n    const updateAttendance = (status) => {\r\n      if (!selectedEvent.value || !isAttendee.value) return;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Update local event data\r\n        const attendee = selectedEvent.value.attendees.find(a => a.user_id === currentUserId);\r\n        if (attendee) {\r\n          attendee.status = status;\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Response Updated',\r\n          detail: `You have ${status} the event`,\r\n          life: 3000\r\n        });\r\n      }, 300);\r\n    };\r\n    \r\n    // Refresh calendar\r\n    const refreshCalendar = () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        calendarApi.refetchEvents();\r\n      }\r\n    };\r\n    \r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric' \r\n      }).format(date);\r\n    };\r\n    \r\n    // Format date and time\r\n    const formatDateTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric',\r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Format time only\r\n    const formatTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Check if two dates are the same day\r\n    const isSameDay = (date1, date2) => {\r\n      const d1 = new Date(date1);\r\n      const d2 = new Date(date2);\r\n      return d1.getFullYear() === d2.getFullYear() && \r\n             d1.getMonth() === d2.getMonth() && \r\n             d1.getDate() === d2.getDate();\r\n    };\r\n    \r\n    // Get tag severity for attendance status\r\n    const getAttendanceTagSeverity = (status) => {\r\n      switch (status) {\r\n        case 'accepted': return 'success';\r\n        case 'declined': return 'danger';\r\n        case 'tentative': return 'warning';\r\n        default: return 'info';\r\n      }\r\n    };\r\n    \r\n    // Capitalize first letter\r\n    const capitalizeFirst = (str) => {\r\n      if (!str) return '';\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n    };\r\n    \r\n    // Watch for changes to filters and refresh data\r\n    watch([selectedDepartments, showOnlyMyEvents], () => {\r\n      fetchEvents();\r\n    });\r\n    \r\n    // Watch for calendar view changes\r\n    watch(calendarView, () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        \r\n        switch (calendarView.value) {\r\n          case 'month':\r\n            calendarApi.changeView('dayGridMonth');\r\n            break;\r\n          case 'week':\r\n            calendarApi.changeView('timeGridWeek');\r\n            break;\r\n          case 'day':\r\n            calendarApi.changeView('timeGridDay');\r\n            break;\r\n          case 'list':\r\n            calendarApi.changeView('listWeek');\r\n            break;\r\n        }\r\n        \r\n        // Store current date when changing views\r\n        currentDate.value = calendarApi.getDate();\r\n      }\r\n    });\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      fetchDepartments();\r\n      fetchUsers();\r\n      fetchEvents();\r\n    });\r\n    \r\n    return {\r\n      loading,\r\n      events,\r\n      calendarView,\r\n      viewOptions,\r\n      currentViewTitle,\r\n      selectedDepartments,\r\n      showOnlyMyEvents,\r\n      departments,\r\n      users,\r\n      calendarOptions,\r\n      calendarWeekOptions,\r\n      calendarDayOptions,\r\n      calendarListOptions,\r\n      fullCalendar,\r\n      eventDialogVisible,\r\n      dialogMode,\r\n      event,\r\n      submitted,\r\n      dateRangeError,\r\n      saving,\r\n      eventDetailsVisible,\r\n      selectedEvent,\r\n      isAttendee,\r\n      currentAttendanceStatus,\r\n      canEditEvent,\r\n      canDeleteEvent,\r\n      \r\n      // Methods\r\n      previousPeriod,\r\n      nextPeriod,\r\n      openNewEventDialog,\r\n      closeEventDialog,\r\n      saveEvent,\r\n      editSelectedEvent,\r\n      confirmDeleteEvent,\r\n      updateAttendance,\r\n      formatDate,\r\n      formatDateTime,\r\n      formatTime,\r\n      isSameDay,\r\n      getAttendanceTagSeverity,\r\n      capitalizeFirst\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.calendar-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.calendar-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n}\r\n\r\n.calendar-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.month-navigation {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.calendar-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 400px;\r\n}\r\n\r\n.departments-filter {\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event dialog */\r\n.date-time-fields {\r\n  display: flex;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.start-datetime,\r\n.end-datetime {\r\n  flex: 1;\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event details */\r\n.event-details {\r\n  color: var(--text-color);\r\n}\r\n\r\n.event-detail-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.event-detail-item i {\r\n  margin-right: 0.5rem;\r\n  color: var(--primary-color);\r\n  width: 1.25rem;\r\n}\r\n\r\n.event-description {\r\n  margin: 1rem 0;\r\n  padding: 0.75rem;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.5rem;\r\n  white-space: pre-line;\r\n}\r\n\r\n/* Attendees */\r\n.attendees-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.attendee-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.attendee-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  border-radius: 0.375rem;\r\n  margin-bottom: 0.5rem;\r\n  background-color: var(--surface-ground);\r\n}\r\n\r\n.attendee-avatar {\r\n  margin-right: 0.75rem;\r\n}\r\n\r\n.attendee-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex: 1;\r\n}\r\n\r\n.attendee-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.attendee-status {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n/* Response section */\r\n.response-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.response-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n/* Full calendar overrides */\r\n:deep(.fc) {\r\n  --fc-border-color: var(--surface-border);\r\n  --fc-event-border-color: transparent;\r\n  --fc-today-bg-color: rgba(59, 130, 246, 0.1);\r\n  --fc-event-bg-color: var(--primary-color);\r\n  --fc-event-text-color: #fff;\r\n  --fc-page-bg-color: var(--surface-card);\r\n}\r\n\r\n:deep(.fc-event) {\r\n  cursor: pointer;\r\n  padding: 0.25rem;\r\n  border-radius: 0.25rem;\r\n}\r\n\r\n:deep(.fc-header-toolbar) {\r\n  margin-bottom: 1rem !important;\r\n}\r\n\r\n:deep(.fc-day-today) {\r\n  background-color: var(--surface-hover) !important;\r\n}\r\n\r\n:deep(.fc-timegrid-event-harness), \r\n:deep(.fc-daygrid-event-harness) {\r\n  margin-right: 0.25rem;\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .calendar-toolbar {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .month-navigation {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .view-buttons,\r\n  .filter-buttons {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .departments-filter {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"AA0VA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAC/D,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,UAAS,QAAS,qBAAqB;AAChD,SAASC,QAAO,QAAS,mBAAmB;AAC5C,OAAOC,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,aAAY,MAAO,uBAAuB;AACjD,OAAOC,cAAa,MAAO,wBAAwB;AACnD,OAAOC,iBAAgB,MAAO,2BAA2B;AACzD,OAAOC,UAAS,MAAO,oBAAoB;;AAE3C;AACA,OAAOC,MAAK,MAAO,iBAAiB;AACpC,OAAOC,YAAW,MAAO,uBAAuB;AAChD,OAAOC,WAAU,MAAO,sBAAsB;AAC9C,OAAOC,YAAW,MAAO,uBAAuB;AAChD,OAAOC,eAAc,MAAO,0BAA0B;AACtD,OAAOC,MAAK,MAAO,iBAAiB;AACpC,OAAOC,SAAQ,MAAO,oBAAoB;AAC1C,OAAOC,QAAO,MAAO,mBAAmB;AACxC,OAAOC,QAAO,MAAO,mBAAmB;AACxC,OAAOC,QAAO,MAAO,mBAAmB;AACxC,OAAOC,QAAO,MAAO,mBAAmB;AACxC,OAAOC,MAAK,MAAO,iBAAiB;AACpC,OAAOC,GAAE,MAAO,cAAc;AAC9B,OAAOC,OAAM,MAAO,kBAAkB;AACtC,OAAOC,aAAY,MAAO,wBAAwB;AAElD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAE;IACVrB,YAAY;IACZK,MAAM;IACNC,YAAY;IACZC,WAAW;IACXC,YAAY;IACZC,eAAe;IACfC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,GAAG;IACHC,OAAO;IACPC;EACF,CAAC;EACDG,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAI1B,QAAQ,CAAC,CAAC;IACxB,MAAM2B,OAAM,GAAI1B,UAAU,CAAC,CAAC;IAC5B,MAAM2B,KAAI,GAAI1B,QAAQ,CAAC,CAAC;IACxB,MAAM2B,YAAW,GAAIlC,GAAG,CAAC,IAAI,CAAC;;IAE9B;IACA,MAAMmC,OAAM,GAAInC,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMoC,MAAK,GAAIpC,GAAG,CAAC,EAAE,CAAC;IACtB,MAAMqC,YAAW,GAAIrC,GAAG,CAAC,OAAO,CAAC;IACjC,MAAMsC,WAAU,GAAItC,GAAG,CAAC,IAAIuC,IAAI,CAAC,CAAC,CAAC;IACnC,MAAMC,mBAAkB,GAAIxC,GAAG,CAAC,EAAE,CAAC;IACnC,MAAMyC,gBAAe,GAAIzC,GAAG,CAAC,KAAK,CAAC;IACnC,MAAM0C,MAAK,GAAI1C,GAAG,CAAC,KAAK,CAAC;IACzB,MAAM2C,SAAQ,GAAI3C,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAM4C,cAAa,GAAI5C,GAAG,CAAC,KAAK,CAAC;;IAEjC;IACA,MAAM6C,kBAAiB,GAAI7C,GAAG,CAAC,KAAK,CAAC;IACrC,MAAM8C,UAAS,GAAI9C,GAAG,CAAC,QAAQ,CAAC,EAAE;;IAElC;IACA,MAAM+C,mBAAkB,GAAI/C,GAAG,CAAC,KAAK,CAAC;IACtC,MAAMgD,aAAY,GAAIhD,GAAG,CAAC,IAAI,CAAC;;IAE/B;IACA,MAAMiD,KAAI,GAAIhD,QAAQ,CAAC;MACrBiD,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,KAAK;MACbC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,KAAK;MACpBC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAU,GAAI,CAClB;MAAEC,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAC,EAClC;MAAED,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAC,EAChC;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAM,CAAC,EAC9B;MAAED,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,EAChC;;IAED;IACA,MAAMC,WAAU,GAAI/D,GAAG,CAAC,EAAE,CAAC;;IAE3B;IACA,MAAMgE,KAAI,GAAIhE,GAAG,CAAC,EAAE,CAAC;;IAErB;IACA,MAAMiE,eAAc,GAAI/D,QAAQ,CAAC,OAAO;MACtCgE,OAAO,EAAE,CAACzD,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAC;MAC3DwD,WAAW,EAAE,cAAc;MAC3BC,aAAa,EAAE,KAAK;MAAE;MACtBC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,WAAW,EAAEpC,WAAW,CAACwB,KAAK;MAC9B1B,MAAM,EAAEuC,mBAAmB,CAACvC,MAAM,CAAC0B,KAAK,CAAC;MACzCc,UAAU,EAAEC,gBAAgB;MAC5BC,SAAS,EAAEC,eAAe;MAC1BC,MAAM,EAAEC,gBAAgB;MACxBC,SAAS,EAAEC,eAAe;MAC1BC,WAAW,EAAEC,iBAAiB;MAC9BC,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,mBAAkB,GAAIrF,QAAQ,CAAC,OAAO;MAC1C,GAAG+D,eAAe,CAACH,KAAK;MACxBK,WAAW,EAAE,cAAc;MAC3BqB,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,UAAU;MACvBC,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,kBAAiB,GAAIzF,QAAQ,CAAC,OAAO;MACzC,GAAG+D,eAAe,CAACH,KAAK;MACxBK,WAAW,EAAE,aAAa;MAC1BqB,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,UAAU;MACvBC,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;;IAEH;IACA,MAAME,mBAAkB,GAAI1F,QAAQ,CAAC,OAAO;MAC1C,GAAG+D,eAAe,CAACH,KAAK;MACxBI,OAAO,EAAE,CAACzD,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,UAAU,CAAC;MACvEuD,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;;IAEH;IACA,MAAM0B,gBAAe,GAAI3F,QAAQ,CAAC,MAAM;MACtC,MAAM4F,IAAG,GAAIxD,WAAW,CAACwB,KAAK;MAC9B,MAAMiC,SAAQ,GAAI,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QACjDC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,OAAOJ,SAAS,CAACK,MAAM,CAACN,IAAI,CAAC;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMO,UAAS,GAAInG,QAAQ,CAAC,MAAM;MAChC,IAAI,CAAC8C,aAAa,CAACc,KAAI,IAAK,CAACd,aAAa,CAACc,KAAK,CAACH,SAAS,EAAE,OAAO,KAAK;MAExE,MAAM2C,aAAY,GAAIvE,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;MAC3D,OAAOF,aAAa,CAACc,KAAK,CAACH,SAAS,CAAC6C,IAAI,CAACC,QAAO,IAC/CA,QAAQ,CAACC,OAAM,KAAMJ,aACvB,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMK,uBAAsB,GAAIzG,QAAQ,CAAC,MAAM;MAC7C,IAAI,CAACmG,UAAU,CAACvC,KAAK,EAAE,OAAO,IAAI;MAElC,MAAMwC,aAAY,GAAIvE,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;MAC3D,MAAMuD,QAAO,GAAIzD,aAAa,CAACc,KAAK,CAACH,SAAS,CAACiD,IAAI,CAACC,CAAA,IAClDA,CAAC,CAACH,OAAM,KAAMJ,aAChB,CAAC;MAED,OAAOG,QAAO,GAAIA,QAAQ,CAACK,MAAK,GAAI,IAAI;IAC1C,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAW,GAAI7G,QAAQ,CAAC,MAAM;MAClC,IAAI,CAAC8C,aAAa,CAACc,KAAK,EAAE,OAAO,KAAK;MAEtC,MAAMkD,WAAU,GAAIjF,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC;MACrD,IAAI,CAACS,WAAW,EAAE,OAAO,KAAK;;MAE9B;MACA,IAAIjF,KAAK,CAACwE,OAAO,CAAC,cAAc,CAAC,EAAE,OAAO,IAAI;;MAE9C;MACA,OAAOvD,aAAa,CAACc,KAAK,CAACmD,UAAS,KAAMD,WAAW,CAAC9D,EAAE;IAC1D,CAAC,CAAC;;IAEF;IACA,MAAMgE,cAAa,GAAIhH,QAAQ,CAAC,MAAM;MACpC,OAAO6G,YAAY,CAACjD,KAAK;IAC3B,CAAC,CAAC;;IAEF;IACA,MAAMqD,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFhF,OAAO,CAAC2B,KAAI,GAAI,IAAI;;QAEpB;QACA,MAAMsD,OAAM,GAAI,CAAC,CAAC;;QAElB;QACA,MAAMC,WAAU,GAAInF,YAAY,CAAC4B,KAAK,EAAEwD,MAAM,CAAC,CAAC;QAChD,IAAID,WAAW,EAAE;UACf,MAAME,IAAG,GAAIF,WAAW,CAACE,IAAI;UAC7BH,OAAO,CAACI,KAAI,GAAID,IAAI,CAACE,WAAW,CAACC,WAAW,CAAC,CAAC;UAC9CN,OAAO,CAACO,GAAE,GAAIJ,IAAI,CAACK,SAAS,CAACF,WAAW,CAAC,CAAC;QAC5C;;QAEA;QACA,IAAIlF,mBAAmB,CAACsB,KAAK,CAAC+D,MAAK,GAAI,CAAC,EAAE;UACxCT,OAAO,CAAC3D,YAAW,GAAIjB,mBAAmB,CAACsB,KAAK,CAAC,CAAC,CAAC,CAACZ,EAAE;QACxD;;QAEA;QACA,IAAIT,gBAAgB,CAACqB,KAAK,EAAE;UAC1BsD,OAAO,CAACU,MAAK,GAAI/F,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;QACxD;;QAEA;QACA,MAAM6E,QAAO,GAAI,MAAMC,KAAK,CAAC,eAAe,EAAE;UAC5CC,MAAM,EAAEb;QACV,CAAC,CAAC;;QAEF;QACAhF,MAAM,CAAC0B,KAAI,GAAI,MAAMoE,eAAe,CAAC,CAAC;MACxC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9ClG,KAAK,CAACoG,GAAG,CAAC;UACRC,QAAQ,EAAE,OAAO;UACjBC,OAAO,EAAE,OAAO;UAChBC,MAAM,EAAE,uBAAuB;UAC/BC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,UAAU;QACRtG,OAAO,CAAC2B,KAAI,GAAI,KAAK;MACvB;IACF,CAAC;;IAED;IACA,MAAMoE,eAAc,GAAIA,CAAA,KAAM;MAC5B;MACA,OAAO,IAAIQ,OAAO,CAACC,OAAM,IAAK;QAC5BC,UAAU,CAAC,MAAM;UACfD,OAAO,CAAC,CACN;YACEzF,EAAE,EAAE,GAAG;YACPC,KAAK,EAAE,uBAAuB;YAC9BC,WAAW,EAAE,wDAAwD;YACrEyF,UAAU,EAAE,IAAItG,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACuG,WAAW,CAAC,CAAC,EAAE,IAAIvG,IAAI,CAAC,CAAC,CAACwG,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAChFC,QAAQ,EAAE,IAAIzG,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACuG,WAAW,CAAC,CAAC,EAAE,IAAIvG,IAAI,CAAC,CAAC,CAACwG,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9EE,OAAO,EAAE,KAAK;YACdzF,QAAQ,EAAE,mBAAmB;YAC7ByD,UAAU,EAAE,OAAO;YACnBiC,eAAe,EAAE,YAAY;YAC7BC,aAAa,EAAE,GAAG;YAClBC,eAAe,EAAE,SAAS;YAC1BC,eAAe,EAAE,IAAI;YACrB1F,SAAS,EAAE,CACT;cACE+C,OAAO,EAAE,GAAG;cACZ4C,UAAU,EAAE,MAAM;cAClBC,SAAS,EAAE,KAAK;cAChBC,KAAK,EAAE,kBAAkB;cACzB1C,MAAM,EAAE;YACV,CAAC,EACD;cACEJ,OAAO,EAAE,GAAG;cACZ4C,UAAU,EAAE,MAAM;cAClBC,SAAS,EAAE,OAAO;cAClBC,KAAK,EAAE,kBAAkB;cACzB1C,MAAM,EAAE;YACV;UAEJ,CAAC,EACD;YACE5D,EAAE,EAAE,GAAG;YACPC,KAAK,EAAE,qBAAqB;YAC5BC,WAAW,EAAE,uCAAuC;YACpDyF,UAAU,EAAE,IAAItG,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACuG,WAAW,CAAC,CAAC,EAAE,IAAIvG,IAAI,CAAC,CAAC,CAACwG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;YACzEC,QAAQ,EAAE,IAAIzG,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACuG,WAAW,CAAC,CAAC,EAAE,IAAIvG,IAAI,CAAC,CAAC,CAACwG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;YACvEE,OAAO,EAAE,IAAI;YACbzF,QAAQ,EAAE,WAAW;YACrByD,UAAU,EAAE,OAAO;YACnBiC,eAAe,EAAE,YAAY;YAC7BC,aAAa,EAAE,IAAI;YACnBC,eAAe,EAAE,IAAI;YACrBC,eAAe,EAAE,IAAI;YACrB1F,SAAS,EAAE;UACb,EACD,CAAC;QACJ,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAM8F,gBAAe,GAAIA,CAAA,KAAM;MAC7B1F,WAAW,CAACD,KAAI,GAAI,CAClB;QAAEZ,EAAE,EAAE,GAAG;QAAEtB,IAAI,EAAE;MAAU,CAAC,EAC5B;QAAEsB,EAAE,EAAE,GAAG;QAAEtB,IAAI,EAAE;MAAkB,CAAC,EACpC;QAAEsB,EAAE,EAAE,GAAG;QAAEtB,IAAI,EAAE;MAAY,CAAC,EAC9B;QAAEsB,EAAE,EAAE,GAAG;QAAEtB,IAAI,EAAE;MAAc,CAAC,EAChC;QAAEsB,EAAE,EAAE,GAAG;QAAEtB,IAAI,EAAE;MAAa,EAC/B;IACH,CAAC;;IAED;IACA,MAAM8H,UAAS,GAAIA,CAAA,KAAM;MACvB1F,KAAK,CAACF,KAAI,GAAI,CACZ;QAAEZ,EAAE,EAAE,GAAG;QAAEyG,QAAQ,EAAE,UAAU;QAAEH,KAAK,EAAE;MAAmB,CAAC,EAC5D;QAAEtG,EAAE,EAAE,GAAG;QAAEyG,QAAQ,EAAE,YAAY;QAAEH,KAAK,EAAE;MAAmB,CAAC,EAC9D;QAAEtG,EAAE,EAAE,GAAG;QAAEyG,QAAQ,EAAE,aAAa;QAAEH,KAAK,EAAE;MAAkB,CAAC,EAC9D;QAAEtG,EAAE,EAAE,GAAG;QAAEyG,QAAQ,EAAE,gBAAgB;QAAEH,KAAK,EAAE;MAAoB,EACnE;IACH,CAAC;;IAED;IACA,MAAM7E,mBAAkB,GAAKiF,UAAU,IAAK;MAC1C,OAAOA,UAAU,CAACC,GAAG,CAAC5G,KAAI,KAAM;QAC9BC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;QAClBqE,KAAK,EAAEvE,KAAK,CAAC4F,UAAU;QACvBlB,GAAG,EAAE1E,KAAK,CAAC+F,QAAQ;QACnBzF,MAAM,EAAEN,KAAK,CAACgG,OAAO;QACrBa,aAAa,EAAE;UACb1G,WAAW,EAAEH,KAAK,CAACG,WAAW;UAC9BI,QAAQ,EAAEP,KAAK,CAACO,QAAQ;UACxBC,YAAY,EAAER,KAAK,CAACkG,aAAa;UACjCY,cAAc,EAAE9G,KAAK,CAACmG,eAAe;UACrC1F,aAAa,EAAET,KAAK,CAACoG,eAAe;UACpCW,SAAS,EAAE/G,KAAK,CAACgE,UAAU;UAC3BgD,aAAa,EAAEhH,KAAK,CAACiG,eAAe;UACpCvF,SAAS,EAAEV,KAAK,CAACU;QACnB,CAAC;QACDuG,eAAe,EAAEC,aAAa,CAAClH,KAAK,CAAC;QACrCmH,WAAW,EAAED,aAAa,CAAClH,KAAK;MAClC,CAAC,CAAC,CAAC;IACL,CAAC;;IAED;IACA,MAAMkH,aAAY,GAAKlH,KAAK,IAAK;MAC/B;MACA,IAAIA,KAAK,CAACoG,eAAe,EAAE,OAAO,SAAS;;MAE3C;MACA,QAAQpG,KAAK,CAACkG,aAAa;QACzB,KAAK,GAAG;UAAE,OAAO,SAAS;QAAE;QAC5B,KAAK,GAAG;UAAE,OAAO,SAAS;QAAE;QAC5B,KAAK,GAAG;UAAE,OAAO,SAAS;QAAE;QAC5B,KAAK,GAAG;UAAE,OAAO,SAAS;QAAE;QAC5B,KAAK,GAAG;UAAE,OAAO,SAAS;QAAE;QAC5B;UAAS,OAAO,SAAS;QAAE;MAC7B;IACF,CAAC;;IAED;IACA,MAAMtE,gBAAe,GAAKwF,IAAI,IAAK;MACjC;MACA,MAAMC,OAAM,GAAID,IAAI,CAACpH,KAAK,CAACC,EAAE;;MAE7B;MACA,MAAMqH,SAAQ,GAAInI,MAAM,CAAC0B,KAAK,CAAC8C,IAAI,CAAC4D,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMoH,OAAO,CAAC;MAE1D,IAAIC,SAAS,EAAE;QACbvH,aAAa,CAACc,KAAI,GAAIyG,SAAS;QAC/BxH,mBAAmB,CAACe,KAAI,GAAI,IAAI;MAClC;IACF,CAAC;;IAED;IACA,MAAMiB,eAAc,GAAKsF,IAAI,IAAK;MAChC;MACA,MAAMI,WAAU,GAAI,IAAIlI,IAAI,CAAC8H,IAAI,CAACvE,IAAI,CAAC;MACvC4E,cAAc,CAAC,CAAC;MAEhBzH,KAAK,CAACI,SAAQ,GAAIoH,WAAW;MAC7BxH,KAAK,CAACK,OAAM,GAAI,IAAIf,IAAI,CAACkI,WAAW,CAACE,OAAO,CAAC,IAAI,EAAC,GAAI,EAAC,GAAI,IAAI,CAAC,EAAE;;MAElE7H,UAAU,CAACgB,KAAI,GAAI,QAAQ;MAC3BjB,kBAAkB,CAACiB,KAAI,GAAI,IAAI;IACjC,CAAC;;IAED;IACA,MAAMmB,gBAAe,GAAKoF,IAAI,IAAK;MACjCK,cAAc,CAAC,CAAC;MAEhBzH,KAAK,CAACI,SAAQ,GAAI,IAAId,IAAI,CAAC8H,IAAI,CAAC7C,KAAK,CAAC;MACtCvE,KAAK,CAACK,OAAM,GAAI,IAAIf,IAAI,CAAC8H,IAAI,CAAC1C,GAAG,CAAC;MAClC1E,KAAK,CAACM,MAAK,GAAI8G,IAAI,CAAC9G,MAAM;MAE1BT,UAAU,CAACgB,KAAI,GAAI,QAAQ;MAC3BjB,kBAAkB,CAACiB,KAAI,GAAI,IAAI;IACjC,CAAC;;IAED;IACA,MAAMqB,eAAc,GAAKkF,IAAI,IAAK;MAChC,MAAMC,OAAM,GAAID,IAAI,CAACpH,KAAK,CAACC,EAAE;MAC7B,MAAMqH,SAAQ,GAAInI,MAAM,CAAC0B,KAAK,CAAC8C,IAAI,CAAC4D,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMoH,OAAO,CAAC;MAE1D,IAAIC,SAAS,EAAE;QACb;QACA,MAAMK,YAAW,GAAI;UACnB,GAAGL,SAAS;UACZ1B,UAAU,EAAEwB,IAAI,CAACpH,KAAK,CAACuE,KAAK;UAC5BwB,QAAQ,EAAEqB,IAAI,CAACpH,KAAK,CAAC0E,GAAE,IAAK0C,IAAI,CAACpH,KAAK,CAACuE,KAAK;UAC5CyB,OAAO,EAAEoB,IAAI,CAACpH,KAAK,CAACM;QACtB,CAAC;;QAED;QACA,MAAMsH,KAAI,GAAIzI,MAAM,CAAC0B,KAAK,CAACgH,SAAS,CAACN,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMoH,OAAO,CAAC;QAC3D,IAAIO,KAAI,KAAM,CAAC,CAAC,EAAE;UAChBzI,MAAM,CAAC0B,KAAK,CAAC+G,KAAK,IAAID,YAAY;QACpC;;QAEA;QACAG,iBAAiB,CAACH,YAAY,EAC3BI,IAAI,CAAC,MAAM;UACV/I,KAAK,CAACoG,GAAG,CAAC;YACRC,QAAQ,EAAE,SAAS;YACnBC,OAAO,EAAE,eAAe;YACxBC,MAAM,EAAE,kCAAkC;YAC1CC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,EACAwC,KAAK,CAAC,MAAM;UACX;UACAZ,IAAI,CAACa,MAAM,CAAC,CAAC;UACbjJ,KAAK,CAACoG,GAAG,CAAC;YACRC,QAAQ,EAAE,OAAO;YACjBC,OAAO,EAAE,OAAO;YAChBC,MAAM,EAAE,wBAAwB;YAChCC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,CAAC;MACN;IACF,CAAC;;IAED;IACA,MAAMpD,iBAAgB,GAAKgF,IAAI,IAAK;MAClC;MACA,MAAMC,OAAM,GAAID,IAAI,CAACpH,KAAK,CAACC,EAAE;MAC7B,MAAMqH,SAAQ,GAAInI,MAAM,CAAC0B,KAAK,CAAC8C,IAAI,CAAC4D,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMoH,OAAO,CAAC;MAE1D,IAAIC,SAAS,EAAE;QACb;QACA,MAAMK,YAAW,GAAI;UACnB,GAAGL,SAAS;UACZvB,QAAQ,EAAEqB,IAAI,CAACpH,KAAK,CAAC0E;QACvB,CAAC;;QAED;QACA,MAAMkD,KAAI,GAAIzI,MAAM,CAAC0B,KAAK,CAACgH,SAAS,CAACN,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMoH,OAAO,CAAC;QAC3D,IAAIO,KAAI,KAAM,CAAC,CAAC,EAAE;UAChBzI,MAAM,CAAC0B,KAAK,CAAC+G,KAAK,IAAID,YAAY;QACpC;;QAEA;QACAG,iBAAiB,CAACH,YAAY,EAC3BI,IAAI,CAAC,MAAM;UACV/I,KAAK,CAACoG,GAAG,CAAC;YACRC,QAAQ,EAAE,SAAS;YACnBC,OAAO,EAAE,eAAe;YACxBC,MAAM,EAAE,qCAAqC;YAC7CC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,EACAwC,KAAK,CAAC,MAAM;UACX;UACAZ,IAAI,CAACa,MAAM,CAAC,CAAC;UACbjJ,KAAK,CAACoG,GAAG,CAAC;YACRC,QAAQ,EAAE,OAAO;YACjBC,OAAO,EAAE,OAAO;YAChBC,MAAM,EAAE,wBAAwB;YAChCC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,CAAC;MACN;IACF,CAAC;;IAED;IACA,MAAM0C,cAAa,GAAIA,CAAA,KAAM;MAC3B,MAAM9D,WAAU,GAAInF,YAAY,CAAC4B,KAAK,CAACwD,MAAM,CAAC,CAAC;MAC/CD,WAAW,CAAC+D,IAAI,CAAC,CAAC;MAClB9I,WAAW,CAACwB,KAAI,GAAIuD,WAAW,CAACgE,OAAO,CAAC,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMC,UAAS,GAAIA,CAAA,KAAM;MACvB,MAAMjE,WAAU,GAAInF,YAAY,CAAC4B,KAAK,CAACwD,MAAM,CAAC,CAAC;MAC/CD,WAAW,CAACkE,IAAI,CAAC,CAAC;MAClBjJ,WAAW,CAACwB,KAAI,GAAIuD,WAAW,CAACgE,OAAO,CAAC,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMG,kBAAiB,GAAIA,CAAA,KAAM;MAC/Bd,cAAc,CAAC,CAAC;;MAEhB;MACA,MAAMe,GAAE,GAAI,IAAIlJ,IAAI,CAAC,CAAC;MACtBkJ,GAAG,CAACC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MACzBD,GAAG,CAACE,QAAQ,CAACF,GAAG,CAACG,QAAQ,CAAC,IAAI,CAAC,CAAC;MAEhC3I,KAAK,CAACI,SAAQ,GAAIoI,GAAG;MACrBxI,KAAK,CAACK,OAAM,GAAI,IAAIf,IAAI,CAACkJ,GAAG,CAACd,OAAO,CAAC,IAAI,EAAC,GAAI,EAAC,GAAI,IAAI,CAAC,EAAE;;MAE1D7H,UAAU,CAACgB,KAAI,GAAI,QAAQ;MAC3BjB,kBAAkB,CAACiB,KAAI,GAAI,IAAI;IACjC,CAAC;;IAED;IACA,MAAM+H,gBAAe,GAAIA,CAAA,KAAM;MAC7BhJ,kBAAkB,CAACiB,KAAI,GAAI,KAAK;MAChCnB,SAAS,CAACmB,KAAI,GAAI,KAAK;MACvBlB,cAAc,CAACkB,KAAI,GAAI,KAAK;IAC9B,CAAC;;IAED;IACA,MAAM4G,cAAa,GAAIA,CAAA,KAAM;MAC3BzH,KAAK,CAACC,EAAC,GAAI,IAAI;MACfD,KAAK,CAACE,KAAI,GAAI,EAAE;MAChBF,KAAK,CAACG,WAAU,GAAI,EAAE;MACtBH,KAAK,CAACI,SAAQ,GAAI,IAAI;MACtBJ,KAAK,CAACK,OAAM,GAAI,IAAI;MACpBL,KAAK,CAACM,MAAK,GAAI,KAAK;MACpBN,KAAK,CAACO,QAAO,GAAI,EAAE;MACnBP,KAAK,CAACQ,YAAW,GAAI,IAAI;MACzBR,KAAK,CAACS,aAAY,GAAI,KAAK;MAC3BT,KAAK,CAACU,SAAQ,GAAI,EAAE;IACtB,CAAC;;IAED;IACA,MAAMmI,iBAAgB,GAAIA,CAAA,KAAM;MAC9BlJ,cAAc,CAACkB,KAAI,GAAI,KAAK;;MAE5B;MACA,IAAI,CAACb,KAAK,CAACE,KAAI,IAAK,CAACF,KAAK,CAACI,SAAQ,IAAK,CAACJ,KAAK,CAACK,OAAO,EAAE;QACtD,OAAO,KAAK;MACd;;MAEA;MACA,IAAIL,KAAK,CAACI,SAAQ,GAAIJ,KAAK,CAACK,OAAO,EAAE;QACnCV,cAAc,CAACkB,KAAI,GAAI,IAAI;QAC3B,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb,CAAC;;IAED;IACA,MAAMiI,SAAQ,GAAIA,CAAA,KAAM;MACtBpJ,SAAS,CAACmB,KAAI,GAAI,IAAI;MAEtB,IAAI,CAACgI,iBAAiB,CAAC,CAAC,EAAE;QACxB;MACF;MAEApJ,MAAM,CAACoB,KAAI,GAAI,IAAI;;MAEnB;MACA,MAAMyG,SAAQ,GAAI;QAChBrH,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;QAClBC,WAAW,EAAEH,KAAK,CAACG,WAAW;QAC9B4I,SAAS,EAAE/I,KAAK,CAACI,SAAS;QAC1B4I,OAAO,EAAEhJ,KAAK,CAACK,OAAO;QACtBC,MAAM,EAAEN,KAAK,CAACM,MAAM;QACpBC,QAAQ,EAAEP,KAAK,CAACO,QAAQ;QACxBC,YAAY,EAAER,KAAK,CAACQ,YAAY;QAChCC,aAAa,EAAET,KAAK,CAACS,aAAa;QAClCC,SAAS,EAAEV,KAAK,CAACU;MACnB,CAAC;;MAED;MACA,MAAMuI,WAAU,GAAIjJ,KAAK,CAACC,EAAC,GACvB6H,iBAAiB,CAACR,SAAS,EAAE;MAAA,EAC7B4B,mBAAmB,CAAC5B,SAAS,CAAC,EAAE;;MAEpC2B,WAAU,CACPlB,IAAI,CAACoB,UAAS,IAAK;QAClB;QACA,IAAInJ,KAAK,CAACC,EAAE,EAAE;UACZ;UACA,MAAM2H,KAAI,GAAIzI,MAAM,CAAC0B,KAAK,CAACgH,SAAS,CAACN,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMD,KAAK,CAACC,EAAE,CAAC;UAC5D,IAAI2H,KAAI,KAAM,CAAC,CAAC,EAAE;YAChBzI,MAAM,CAAC0B,KAAK,CAAC+G,KAAK,IAAIuB,UAAU;UAClC;QACF,OAAO;UACL;UACAhK,MAAM,CAAC0B,KAAK,CAACuI,IAAI,CAACD,UAAU,CAAC;QAC/B;;QAEA;QACAvJ,kBAAkB,CAACiB,KAAI,GAAI,KAAK;QAChCnB,SAAS,CAACmB,KAAI,GAAI,KAAK;QAEvB7B,KAAK,CAACoG,GAAG,CAAC;UACRC,QAAQ,EAAE,SAAS;UACnBC,OAAO,EAAEzF,UAAU,CAACgB,KAAI,KAAM,QAAO,GAAI,eAAc,GAAI,eAAe;UAC1E0E,MAAM,EAAE1F,UAAU,CAACgB,KAAI,KAAM,QAAO,GAChC,qCAAoC,GACpC,qCAAqC;UACzC2E,IAAI,EAAE;QACR,CAAC,CAAC;;QAEF;QACA6D,eAAe,CAAC,CAAC;MACnB,CAAC,EACArB,KAAK,CAAC9C,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3ClG,KAAK,CAACoG,GAAG,CAAC;UACRC,QAAQ,EAAE,OAAO;UACjBC,OAAO,EAAE,OAAO;UAChBC,MAAM,EAAE,aAAa1F,UAAU,CAACgB,KAAI,KAAM,QAAO,GAAI,QAAO,GAAI,QAAQ,QAAQ;UAChF2E,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,EACA8D,OAAO,CAAC,MAAM;QACb7J,MAAM,CAACoB,KAAI,GAAI,KAAK;MACtB,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAMiH,iBAAgB,GAAKR,SAAS,IAAK;MACvC;MACA,OAAO,IAAI7B,OAAO,CAAEC,OAAO,IAAK;QAC9BC,UAAU,CAAC,MAAM;UACf;UACAR,OAAO,CAACoE,GAAG,CAAC,2BAA2B,EAAEjC,SAAS,CAAC;;UAEnD;UACA,MAAM6B,UAAS,GAAI;YACjBlJ,EAAE,EAAEqH,SAAS,CAACrH,EAAE;YAChBC,KAAK,EAAEoH,SAAS,CAACpH,KAAK;YACtBC,WAAW,EAAEmH,SAAS,CAACnH,WAAW;YAClCyF,UAAU,EAAE0B,SAAS,CAACyB,SAAS;YAC/BhD,QAAQ,EAAEuB,SAAS,CAAC0B,OAAO;YAC3BhD,OAAO,EAAEsB,SAAS,CAAChH,MAAM;YACzBC,QAAQ,EAAE+G,SAAS,CAAC/G,QAAQ;YAC5B2F,aAAa,EAAEoB,SAAS,CAAC9G,YAAY;YACrC4F,eAAe,EAAEkB,SAAS,CAAC7G,aAAa;YACxCuD,UAAU,EAAElF,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;YACjDgG,eAAe,EAAEnH,KAAK,CAACwE,OAAO,CAAC,mBAAmB,CAAC;YACnD5C,SAAS,EAAE4G,SAAS,CAAC5G,SAAS,CAACkG,GAAG,CAAC3G,EAAC,IAAK;cACvC,MAAMuJ,IAAG,GAAIzI,KAAK,CAACF,KAAK,CAAC8C,IAAI,CAAC8F,CAAA,IAAKA,CAAC,CAACxJ,EAAC,KAAMA,EAAE,CAAC;cAC/C,OAAO;gBACLwD,OAAO,EAAExD,EAAE;gBACXoG,UAAU,EAAEmD,IAAI,EAAE9C,QAAQ,CAACgD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC9CpD,SAAS,EAAEkD,IAAI,EAAE9C,QAAQ,CAACgD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC7CnD,KAAK,EAAEiD,IAAI,EAAEjD,KAAI,IAAK,EAAE;gBACxB1C,MAAM,EAAE;cACV,CAAC;YACH,CAAC;UACH,CAAC;;UAED;UACA,IAAIyD,SAAS,CAAC9G,YAAY,EAAE;YAC1B,MAAMmJ,IAAG,GAAI7I,WAAW,CAACD,KAAK,CAAC8C,IAAI,CAACiG,CAAA,IAAKA,CAAC,CAAC3J,EAAC,KAAMqH,SAAS,CAAC9G,YAAY,CAAC;YACzE2I,UAAU,CAAChD,eAAc,GAAIwD,IAAG,GAAIA,IAAI,CAAChL,IAAG,GAAI,IAAI;UACtD;UAEA+G,OAAO,CAACyD,UAAU,CAAC;QACrB,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMD,mBAAkB,GAAK5B,SAAS,IAAK;MACzC;MACA,OAAO,IAAI7B,OAAO,CAAEC,OAAO,IAAK;QAC9BC,UAAU,CAAC,MAAM;UACf;UACAR,OAAO,CAACoE,GAAG,CAAC,2BAA2B,EAAEjC,SAAS,CAAC;;UAEnD;UACA,MAAMuC,KAAI,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;;UAEzD;UACA,MAAMd,UAAS,GAAI;YACjBlJ,EAAE,EAAE4J,KAAK;YACT3J,KAAK,EAAEoH,SAAS,CAACpH,KAAK;YACtBC,WAAW,EAAEmH,SAAS,CAACnH,WAAW;YAClCyF,UAAU,EAAE0B,SAAS,CAACyB,SAAS;YAC/BhD,QAAQ,EAAEuB,SAAS,CAAC0B,OAAO;YAC3BhD,OAAO,EAAEsB,SAAS,CAAChH,MAAM;YACzBC,QAAQ,EAAE+G,SAAS,CAAC/G,QAAQ;YAC5B2F,aAAa,EAAEoB,SAAS,CAAC9G,YAAY;YACrC4F,eAAe,EAAEkB,SAAS,CAAC7G,aAAa;YACxCuD,UAAU,EAAElF,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;YACjDgG,eAAe,EAAEnH,KAAK,CAACwE,OAAO,CAAC,mBAAmB,CAAC;YACnD5C,SAAS,EAAE4G,SAAS,CAAC5G,SAAS,CAACkG,GAAG,CAAC3G,EAAC,IAAK;cACvC,MAAMuJ,IAAG,GAAIzI,KAAK,CAACF,KAAK,CAAC8C,IAAI,CAAC8F,CAAA,IAAKA,CAAC,CAACxJ,EAAC,KAAMA,EAAE,CAAC;cAC/C,OAAO;gBACLwD,OAAO,EAAExD,EAAE;gBACXoG,UAAU,EAAEmD,IAAI,EAAE9C,QAAQ,CAACgD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC9CpD,SAAS,EAAEkD,IAAI,EAAE9C,QAAQ,CAACgD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE;gBAC7CnD,KAAK,EAAEiD,IAAI,EAAEjD,KAAI,IAAK,EAAE;gBACxB1C,MAAM,EAAE;cACV,CAAC;YACH,CAAC;UACH,CAAC;;UAED;UACA,IAAIyD,SAAS,CAAC9G,YAAY,EAAE;YAC1B,MAAMmJ,IAAG,GAAI7I,WAAW,CAACD,KAAK,CAAC8C,IAAI,CAACiG,CAAA,IAAKA,CAAC,CAAC3J,EAAC,KAAMqH,SAAS,CAAC9G,YAAY,CAAC;YACzE2I,UAAU,CAAChD,eAAc,GAAIwD,IAAG,GAAIA,IAAI,CAAChL,IAAG,GAAI,IAAI;UACtD;UAEA+G,OAAO,CAACyD,UAAU,CAAC;QACrB,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMe,iBAAgB,GAAIA,CAAA,KAAM;MAC9B,IAAI,CAACnK,aAAa,CAACc,KAAK,EAAE;;MAE1B;MACAf,mBAAmB,CAACe,KAAI,GAAI,KAAK;;MAEjC;MACAb,KAAK,CAACC,EAAC,GAAIF,aAAa,CAACc,KAAK,CAACZ,EAAE;MACjCD,KAAK,CAACE,KAAI,GAAIH,aAAa,CAACc,KAAK,CAACX,KAAK;MACvCF,KAAK,CAACG,WAAU,GAAIJ,aAAa,CAACc,KAAK,CAACV,WAAU,IAAK,EAAE;MACzDH,KAAK,CAACI,SAAQ,GAAI,IAAId,IAAI,CAACS,aAAa,CAACc,KAAK,CAAC+E,UAAU,CAAC;MAC1D5F,KAAK,CAACK,OAAM,GAAI,IAAIf,IAAI,CAACS,aAAa,CAACc,KAAK,CAACkF,QAAQ,CAAC;MACtD/F,KAAK,CAACM,MAAK,GAAIP,aAAa,CAACc,KAAK,CAACmF,OAAO;MAC1ChG,KAAK,CAACO,QAAO,GAAIR,aAAa,CAACc,KAAK,CAACN,QAAO,IAAK,EAAE;MACnDP,KAAK,CAACQ,YAAW,GAAIT,aAAa,CAACc,KAAK,CAACqF,aAAa;MACtDlG,KAAK,CAACS,aAAY,GAAIV,aAAa,CAACc,KAAK,CAACuF,eAAe;MACzDpG,KAAK,CAACU,SAAQ,GAAIX,aAAa,CAACc,KAAK,CAACH,SAAS,EAAEkG,GAAG,CAAChD,CAAA,IAAKA,CAAC,CAACH,OAAO,KAAK,EAAE;;MAE1E;MACA5D,UAAU,CAACgB,KAAI,GAAI,MAAM;MACzBjB,kBAAkB,CAACiB,KAAI,GAAI,IAAI;IACjC,CAAC;;IAED;IACA,MAAMsJ,kBAAiB,GAAIA,CAAA,KAAM;MAC/BpL,OAAO,CAACqL,OAAO,CAAC;QACdC,OAAO,EAAE,6CAA6C;QACtDC,MAAM,EAAE,gBAAgB;QACxBC,IAAI,EAAE,4BAA4B;QAClCC,WAAW,EAAE,iBAAiB;QAC9BC,MAAM,EAAEA,CAAA,KAAMC,WAAW,CAAC,CAAC;QAC3BC,MAAM,EAAEA,CAAA,KAAM,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMD,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAI,CAAC1K,KAAK,CAACC,EAAE,EAAE;MAEfR,MAAM,CAACoB,KAAI,GAAI,IAAI;;MAEnB;MACA8E,UAAU,CAAC,MAAM;QACf;QACA,MAAMiC,KAAI,GAAIzI,MAAM,CAAC0B,KAAK,CAACgH,SAAS,CAACN,CAAA,IAAKA,CAAC,CAACtH,EAAC,KAAMD,KAAK,CAACC,EAAE,CAAC;QAC5D,IAAI2H,KAAI,KAAM,CAAC,CAAC,EAAE;UAChBzI,MAAM,CAAC0B,KAAK,CAAC+J,MAAM,CAAChD,KAAK,EAAE,CAAC,CAAC;QAC/B;;QAEA;QACAhI,kBAAkB,CAACiB,KAAI,GAAI,KAAK;QAChCnB,SAAS,CAACmB,KAAI,GAAI,KAAK;QACvBpB,MAAM,CAACoB,KAAI,GAAI,KAAK;;QAEpB;QACA7B,KAAK,CAACoG,GAAG,CAAC;UACRC,QAAQ,EAAE,SAAS;UACnBC,OAAO,EAAE,eAAe;UACxBC,MAAM,EAAE,qCAAqC;UAC7CC,IAAI,EAAE;QACR,CAAC,CAAC;;QAEF;QACA6D,eAAe,CAAC,CAAC;MACnB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;;IAED;IACA,MAAMwB,gBAAe,GAAKhH,MAAM,IAAK;MACnC,IAAI,CAAC9D,aAAa,CAACc,KAAI,IAAK,CAACuC,UAAU,CAACvC,KAAK,EAAE;MAE/C,MAAMwC,aAAY,GAAIvE,KAAK,CAACwE,OAAO,CAAC,kBAAkB,CAAC,EAAErD,EAAE;;MAE3D;MACA0F,UAAU,CAAC,MAAM;QACf;QACA,MAAMnC,QAAO,GAAIzD,aAAa,CAACc,KAAK,CAACH,SAAS,CAACiD,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACH,OAAM,KAAMJ,aAAa,CAAC;QACrF,IAAIG,QAAQ,EAAE;UACZA,QAAQ,CAACK,MAAK,GAAIA,MAAM;QAC1B;;QAEA;QACA7E,KAAK,CAACoG,GAAG,CAAC;UACRC,QAAQ,EAAE,SAAS;UACnBC,OAAO,EAAE,kBAAkB;UAC3BC,MAAM,EAAE,YAAY1B,MAAM,YAAY;UACtC2B,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;;IAED;IACA,MAAM6D,eAAc,GAAIA,CAAA,KAAM;MAC5B,IAAIpK,YAAY,CAAC4B,KAAK,EAAE;QACtB,MAAMuD,WAAU,GAAInF,YAAY,CAAC4B,KAAK,CAACwD,MAAM,CAAC,CAAC;QAC/CD,WAAW,CAAC0G,aAAa,CAAC,CAAC;MAC7B;IACF,CAAC;;IAED;IACA,MAAMC,UAAS,GAAKC,UAAU,IAAK;MACjC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;MAC1B,MAAMnI,IAAG,GAAI,IAAIvD,IAAI,CAAC0L,UAAU,CAAC;MACjC,OAAO,IAAIjI,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QACtCC,KAAK,EAAE,OAAO;QACdgI,GAAG,EAAE,SAAS;QACd/H,IAAI,EAAE;MACR,CAAC,CAAC,CAACC,MAAM,CAACN,IAAI,CAAC;IACjB,CAAC;;IAED;IACA,MAAMqI,cAAa,GAAKF,UAAU,IAAK;MACrC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;MAC1B,MAAMnI,IAAG,GAAI,IAAIvD,IAAI,CAAC0L,UAAU,CAAC;MACjC,OAAO,IAAIjI,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QACtCC,KAAK,EAAE,OAAO;QACdgI,GAAG,EAAE,SAAS;QACd/H,IAAI,EAAE,SAAS;QACfiI,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC,CAAClI,MAAM,CAACN,IAAI,CAAC;IACjB,CAAC;;IAED;IACA,MAAMyI,UAAS,GAAKN,UAAU,IAAK;MACjC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;MAC1B,MAAMnI,IAAG,GAAI,IAAIvD,IAAI,CAAC0L,UAAU,CAAC;MACjC,OAAO,IAAIjI,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QACtCmI,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC,CAAClI,MAAM,CAACN,IAAI,CAAC;IACjB,CAAC;;IAED;IACA,MAAM0I,SAAQ,GAAIA,CAACC,KAAK,EAAEC,KAAK,KAAK;MAClC,MAAMC,EAAC,GAAI,IAAIpM,IAAI,CAACkM,KAAK,CAAC;MAC1B,MAAMG,EAAC,GAAI,IAAIrM,IAAI,CAACmM,KAAK,CAAC;MAC1B,OAAOC,EAAE,CAAC7F,WAAW,CAAC,MAAM8F,EAAE,CAAC9F,WAAW,CAAC,KACpC6F,EAAE,CAAC5F,QAAQ,CAAC,MAAM6F,EAAE,CAAC7F,QAAQ,CAAC,KAC9B4F,EAAE,CAACtD,OAAO,CAAC,MAAMuD,EAAE,CAACvD,OAAO,CAAC,CAAC;IACtC,CAAC;;IAED;IACA,MAAMwD,wBAAuB,GAAK/H,MAAM,IAAK;MAC3C,QAAQA,MAAM;QACZ,KAAK,UAAU;UAAE,OAAO,SAAS;QACjC,KAAK,UAAU;UAAE,OAAO,QAAQ;QAChC,KAAK,WAAW;UAAE,OAAO,SAAS;QAClC;UAAS,OAAO,MAAM;MACxB;IACF,CAAC;;IAED;IACA,MAAMgI,eAAc,GAAKC,GAAG,IAAK;MAC/B,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;MACnB,OAAOA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;;IAED;IACA9O,KAAK,CAAC,CAACoC,mBAAmB,EAAEC,gBAAgB,CAAC,EAAE,MAAM;MACnD0E,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;;IAEF;IACA/G,KAAK,CAACiC,YAAY,EAAE,MAAM;MACxB,IAAIH,YAAY,CAAC4B,KAAK,EAAE;QACtB,MAAMuD,WAAU,GAAInF,YAAY,CAAC4B,KAAK,CAACwD,MAAM,CAAC,CAAC;QAE/C,QAAQjF,YAAY,CAACyB,KAAK;UACxB,KAAK,OAAO;YACVuD,WAAW,CAAC8H,UAAU,CAAC,cAAc,CAAC;YACtC;UACF,KAAK,MAAM;YACT9H,WAAW,CAAC8H,UAAU,CAAC,cAAc,CAAC;YACtC;UACF,KAAK,KAAK;YACR9H,WAAW,CAAC8H,UAAU,CAAC,aAAa,CAAC;YACrC;UACF,KAAK,MAAM;YACT9H,WAAW,CAAC8H,UAAU,CAAC,UAAU,CAAC;YAClC;QACJ;;QAEA;QACA7M,WAAW,CAACwB,KAAI,GAAIuD,WAAW,CAACgE,OAAO,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC;;IAEF;IACAlL,SAAS,CAAC,MAAM;MACdsJ,gBAAgB,CAAC,CAAC;MAClBC,UAAU,CAAC,CAAC;MACZvC,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IAEF,OAAO;MACLhF,OAAO;MACPC,MAAM;MACNC,YAAY;MACZuB,WAAW;MACXiC,gBAAgB;MAChBrD,mBAAmB;MACnBC,gBAAgB;MAChBsB,WAAW;MACXC,KAAK;MACLC,eAAe;MACfsB,mBAAmB;MACnBI,kBAAkB;MAClBC,mBAAmB;MACnB1D,YAAY;MACZW,kBAAkB;MAClBC,UAAU;MACVG,KAAK;MACLN,SAAS;MACTC,cAAc;MACdF,MAAM;MACNK,mBAAmB;MACnBC,aAAa;MACbqD,UAAU;MACVM,uBAAuB;MACvBI,YAAY;MACZG,cAAc;MAEd;MACAiE,cAAc;MACdG,UAAU;MACVE,kBAAkB;MAClBK,gBAAgB;MAChBE,SAAS;MACToB,iBAAiB;MACjBC,kBAAkB;MAClBU,gBAAgB;MAChBE,UAAU;MACVG,cAAc;MACdI,UAAU;MACVC,SAAS;MACTK,wBAAwB;MACxBC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}