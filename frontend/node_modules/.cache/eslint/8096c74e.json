[{"/home/pi/projects/intranet/frontend/src/main.js":"1","/home/pi/projects/intranet/frontend/src/App.vue":"2","/home/pi/projects/intranet/frontend/src/views/Home.vue":"3","/home/pi/projects/intranet/frontend/src/views/NotFound.vue":"4","/home/pi/projects/intranet/frontend/src/views/Users.vue":"5","/home/pi/projects/intranet/frontend/src/views/UserDetails.vue":"6","/home/pi/projects/intranet/frontend/src/views/OrgChart.vue":"7","/home/pi/projects/intranet/frontend/src/views/Departments.vue":"8","/home/pi/projects/intranet/frontend/src/views/Documents.vue":"9","/home/pi/projects/intranet/frontend/src/views/Calendar.vue":"10","/home/pi/projects/intranet/frontend/src/views/Wiki.vue":"11","/home/pi/projects/intranet/frontend/src/views/Unauthorized.vue":"12","/home/pi/projects/intranet/frontend/src/views/Expenses.vue":"13"},{"size":7716,"mtime":1744317584518,"results":"14","hashOfConfig":"15"},{"size":6808,"mtime":1744317584522,"results":"16","hashOfConfig":"15"},{"size":26519,"mtime":1744317584502,"results":"17","hashOfConfig":"15"},{"size":0,"mtime":1744317584490,"results":"18","hashOfConfig":"15"},{"size":39426,"mtime":1744317624698,"results":"19","hashOfConfig":"15"},{"size":0,"mtime":1744317584478,"results":"20","hashOfConfig":"15"},{"size":18133,"mtime":1744317584498,"results":"21","hashOfConfig":"15"},{"size":0,"mtime":1744317584490,"results":"22","hashOfConfig":"15"},{"size":33610,"mtime":1744317584498,"results":"23","hashOfConfig":"15"},{"size":44854,"mtime":1744318694292,"results":"24","hashOfConfig":"15"},{"size":42589,"mtime":1744317631250,"results":"25","hashOfConfig":"15"},{"size":0,"mtime":1744317584490,"results":"26","hashOfConfig":"15"},{"size":55007,"mtime":1744317617390,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fdgy3h",{"filePath":"30","messages":"31","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"60","messages":"61","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"/home/pi/projects/intranet/frontend/src/main.js",[],"/home/pi/projects/intranet/frontend/src/App.vue",["63","64"],"<template>\r\n    <div class=\"app-container\">\r\n      <!-- Loading overlay -->\r\n      <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <ProgressSpinner />\r\n      </div>\r\n      \r\n      <!-- Authenticated layout with sidebar and header -->\r\n      <template v-if=\"isAuthenticated && !isLoginPage\">\r\n        <div class=\"layout-wrapper\">\r\n          <!-- Sidebar -->\r\n          <Sidebar :visible=\"sidebarVisible\" @close=\"sidebarVisible = false\" />\r\n          \r\n          <!-- Main content -->\r\n          <div class=\"layout-main\">\r\n            <!-- Header -->\r\n            <Header @toggle-sidebar=\"sidebarVisible = !sidebarVisible\" />\r\n            \r\n            <!-- Page content -->\r\n            <div class=\"layout-content\">\r\n              <router-view />\r\n            </div>\r\n            \r\n            <!-- Footer -->\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </template>\r\n      \r\n      <!-- Unauthenticated layout (login page) -->\r\n      <template v-else>\r\n        <router-view />\r\n      </template>\r\n      \r\n      <!-- Toast notifications -->\r\n      <Toast position=\"top-right\" />\r\n      \r\n      <!-- Confirmation dialog -->\r\n      <ConfirmDialog />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRoute } from 'vue-router';\r\n  import Toast from 'primevue/toast';\r\n  import ConfirmDialog from 'primevue/confirmdialog';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  \r\n  // Import layout components\r\n  import Header from './components/layout/Header.vue';\r\n  import Sidebar from './components/layout/Sidebar.vue';\r\n  import Footer from './components/layout/Footer.vue';\r\n  \r\n  export default {\r\n    name: 'App',\r\n    components: {\r\n      Header,\r\n      Sidebar,\r\n      Footer,\r\n      Toast,\r\n      ConfirmDialog,\r\n      ProgressSpinner\r\n    },\r\n    setup() {\r\n      const store = useStore();\r\n      const route = useRoute();\r\n      const sidebarVisible = ref(false);\r\n      \r\n      // Computed properties\r\n      const isAuthenticated = computed(() => store.state.isAuthenticated);\r\n      const loading = computed(() => store.state.loading);\r\n      const isLoginPage = computed(() => route.name === 'Login');\r\n      \r\n      // Token refresh interval\r\n      let refreshTokenInterval = null;\r\n      \r\n      // Setup token refresh interval\r\n      const setupTokenRefresh = () => {\r\n        // Clear existing interval if any\r\n        if (refreshTokenInterval) {\r\n          clearInterval(refreshTokenInterval);\r\n        }\r\n        \r\n        // Set up new interval (every 10 minutes)\r\n        refreshTokenInterval = setInterval(async () => {\r\n          if (isAuthenticated.value) {\r\n            await store.dispatch('refreshToken');\r\n          }\r\n        }, 10 * 60 * 1000); // 10 minutes\r\n      };\r\n      \r\n      // Lifecycle hooks\r\n      onMounted(async () => {\r\n        // If authenticated, refresh user data\r\n        if (isAuthenticated.value) {\r\n          try {\r\n            await store.dispatch('getUserProfile');\r\n            setupTokenRefresh();\r\n          } catch (error) {\r\n            console.error('Failed to load user profile:', error);\r\n          }\r\n        }\r\n        \r\n        // Add window resize handler\r\n        window.addEventListener('resize', onResize);\r\n      });\r\n      \r\n      onBeforeUnmount(() => {\r\n        // Clear interval on component destroy\r\n        if (refreshTokenInterval) {\r\n          clearInterval(refreshTokenInterval);\r\n        }\r\n        \r\n        // Remove resize handler\r\n        window.removeEventListener('resize', onResize);\r\n      });\r\n      \r\n      // Window resize handler\r\n      const onResize = () => {\r\n        // Close sidebar on small screens when resizing\r\n        if (window.innerWidth < 768) {\r\n          sidebarVisible.value = false;\r\n        }\r\n      };\r\n      \r\n      return {\r\n        sidebarVisible,\r\n        isAuthenticated,\r\n        loading,\r\n        isLoginPage\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Global styles */\r\n  :root {\r\n    --primary-color: #3B82F6;\r\n    --secondary-color: #64748B;\r\n    --success-color: #22C55E;\r\n    --info-color: #3B82F6;\r\n    --warning-color: #F59E0B;\r\n    --danger-color: #EF4444;\r\n    --surface-ground: #F8FAFC;\r\n    --surface-section: #FFFFFF;\r\n    --surface-card: #FFFFFF;\r\n    --surface-overlay: #FFFFFF;\r\n    --surface-border: #E2E8F0;\r\n    --text-color: #334155;\r\n    --text-color-secondary: #64748B;\r\n    --sidebar-width: 240px;\r\n    --topbar-height: 60px;\r\n  }\r\n  \r\n  /* Reset and base styles */\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  \r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, \r\n                 Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\r\n    color: var(--text-color);\r\n    background-color: var(--surface-ground);\r\n    margin: 0;\r\n    padding: 0;\r\n    min-height: 100vh;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  /* Layout styles */\r\n  .layout-wrapper {\r\n    display: flex;\r\n    min-height: 100vh;\r\n  }\r\n  \r\n  .layout-main {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    transition: margin-left 0.3s;\r\n  }\r\n  \r\n  .layout-content {\r\n    flex: 1;\r\n    padding: 1.5rem;\r\n    background-color: var(--surface-ground);\r\n  }\r\n  \r\n  /* Responsive sidebar adjustments */\r\n  @media screen and (min-width: 768px) {\r\n    .layout-main {\r\n      margin-left: var(--sidebar-width);\r\n    }\r\n  }\r\n  \r\n  /* Loading overlay */\r\n  .loading-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 9999;\r\n  }\r\n  \r\n  /* Custom scrollbar */\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n  \r\n  ::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n  \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: var(--secondary-color);\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  /* Card styles */\r\n  .card {\r\n    background: var(--surface-card);\r\n    border-radius: 0.5rem;\r\n    padding: 1.5rem;\r\n    box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.1),\r\n                0 1px 1px 0 rgba(0, 0, 0, 0.07),\r\n                0 1px 3px 0 rgba(0, 0, 0, 0.06);\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  /* Page title styles */\r\n  .page-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 500;\r\n    color: var(--text-color);\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  /* Utility classes */\r\n  .text-center {\r\n    text-align: center;\r\n  }\r\n  \r\n  .mt-2 {\r\n    margin-top: 0.5rem;\r\n  }\r\n  \r\n  .mt-4 {\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .mb-2 {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .mb-4 {\r\n    margin-bottom: 1rem;\r\n  }\r\n  </style>","/home/pi/projects/intranet/frontend/src/views/Home.vue",["65"],"<template>\r\n    <div class=\"dashboard-container\">\r\n      <h1 class=\"dashboard-title\">Dashboard</h1>\r\n      \r\n      <!-- Welcome card -->\r\n      <div class=\"card welcome-card\">\r\n        <div class=\"welcome-header\">\r\n          <div class=\"welcome-text\">\r\n            <h2>Welcome, {{ userFirstName }}!</h2>\r\n            <p>{{ welcomeMessage }}</p>\r\n          </div>\r\n          <div class=\"welcome-actions\">\r\n            <Button \r\n              label=\"My Profile\" \r\n              icon=\"pi pi-user\" \r\n              class=\"p-button-outlined mr-2\" \r\n              @click=\"goToProfile\" \r\n            />\r\n            <Button \r\n              v-if=\"hasDirectReports\"\r\n              label=\"My Team\" \r\n              icon=\"pi pi-users\" \r\n              class=\"p-button-outlined\" \r\n              @click=\"goToMyTeam\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Quick stats -->\r\n      <div class=\"grid\">\r\n        <div class=\"col-12 md:col-6 lg:col-3\">\r\n          <div class=\"card stat-card\">\r\n            <div class=\"stat-icon\">\r\n              <i class=\"pi pi-calendar\"></i>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Upcoming Events</div>\r\n              <div class=\"stat-value\">{{ upcomingEventsCount }}</div>\r\n              <div class=\"stat-link\">\r\n                <router-link to=\"/calendar\">View Calendar</router-link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-12 md:col-6 lg:col-3\">\r\n          <div class=\"card stat-card\">\r\n            <div class=\"stat-icon\">\r\n              <i class=\"pi pi-money-bill\"></i>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">My Expenses</div>\r\n              <div class=\"stat-value\" v-if=\"expenseStats\">\r\n                {{ expenseStats.pendingCount }}\r\n                <span class=\"stat-subtitle\">pending</span>\r\n              </div>\r\n              <div class=\"stat-value\" v-else>--</div>\r\n              <div class=\"stat-link\">\r\n                <router-link to=\"/expenses\">View Expenses</router-link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-12 md:col-6 lg:col-3\">\r\n          <div class=\"card stat-card\">\r\n            <div class=\"stat-icon\">\r\n              <i class=\"pi pi-book\"></i>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Knowledge Base</div>\r\n              <div class=\"stat-value\">{{ recentDocsCount }}</div>\r\n              <div class=\"stat-link\">\r\n                <router-link to=\"/wiki\">Browse Wiki</router-link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-12 md:col-6 lg:col-3\">\r\n          <div class=\"card stat-card\">\r\n            <div class=\"stat-icon\">\r\n              <i class=\"pi pi-sitemap\"></i>\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-title\">Organization</div>\r\n              <div class=\"stat-value\">{{ departmentName || 'Unassigned' }}</div>\r\n              <div class=\"stat-link\">\r\n                <router-link to=\"/organization\">View Org Chart</router-link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Calendar and recent documents -->\r\n      <div class=\"grid\">\r\n        <!-- Upcoming events -->\r\n        <div class=\"col-12 lg:col-6\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h3>Upcoming Events</h3>\r\n              <Button \r\n                icon=\"pi pi-plus\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"goToCalendar\" \r\n              />\r\n            </div>\r\n            \r\n            <div v-if=\"isLoadingEvents\" class=\"empty-state\">\r\n              <ProgressSpinner style=\"width: 50px; height: 50px\" />\r\n            </div>\r\n            \r\n            <div v-else-if=\"upcomingEvents.length === 0\" class=\"empty-state\">\r\n              <i class=\"pi pi-calendar-times empty-icon\"></i>\r\n              <p>No upcoming events</p>\r\n            </div>\r\n            \r\n            <div v-else class=\"event-list\">\r\n              <div \r\n                v-for=\"event in upcomingEvents\" \r\n                :key=\"event.id\" \r\n                class=\"event-item\"\r\n              >\r\n                <div class=\"event-date\">\r\n                  <span class=\"event-day\">{{ formatDay(event.start_time) }}</span>\r\n                  <span class=\"event-month\">{{ formatMonth(event.start_time) }}</span>\r\n                </div>\r\n                \r\n                <div class=\"event-details\">\r\n                  <div class=\"event-title\">{{ event.title }}</div>\r\n                  <div class=\"event-time\">\r\n                    {{ formatTime(event.start_time) }} - {{ formatTime(event.end_time) }}\r\n                  </div>\r\n                  <div class=\"event-location\" v-if=\"event.location\">\r\n                    <i class=\"pi pi-map-marker\"></i> {{ event.location }}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"event-status\" v-if=\"event.attendance_status\">\r\n                  <Tag \r\n                    :severity=\"getAttendanceTagType(event.attendance_status)\" \r\n                    :value=\"capitalize(event.attendance_status)\" \r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Recent documents -->\r\n        <div class=\"col-12 lg:col-6\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h3>Recent Documents</h3>\r\n              <Button \r\n                icon=\"pi pi-plus\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"goToDocuments\" \r\n              />\r\n            </div>\r\n            \r\n            <div v-if=\"isLoadingDocs\" class=\"empty-state\">\r\n              <ProgressSpinner style=\"width: 50px; height: 50px\" />\r\n            </div>\r\n            \r\n            <div v-else-if=\"recentDocuments.length === 0\" class=\"empty-state\">\r\n              <i class=\"pi pi-file-o empty-icon\"></i>\r\n              <p>No recent documents</p>\r\n            </div>\r\n            \r\n            <div v-else class=\"document-list\">\r\n              <div \r\n                v-for=\"doc in recentDocuments\" \r\n                :key=\"doc.id\" \r\n                class=\"document-item\"\r\n                @click=\"viewDocument(doc.id)\"\r\n              >\r\n                <div class=\"document-icon\">\r\n                  <i class=\"pi\" :class=\"getDocumentIcon(doc.file_type)\"></i>\r\n                </div>\r\n                \r\n                <div class=\"document-details\">\r\n                  <div class=\"document-title\">{{ doc.title }}</div>\r\n                  <div class=\"document-meta\">\r\n                    <span class=\"document-department\" v-if=\"doc.department_name\">\r\n                      {{ doc.department_name }}\r\n                    </span>\r\n                    <span class=\"document-date\">\r\n                      {{ formatDate(doc.created_at) }}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <Button \r\n                  icon=\"pi pi-download\" \r\n                  class=\"p-button-rounded p-button-text\" \r\n                  @click.stop=\"downloadDocument(doc)\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- For managers: approval requests -->\r\n      <div v-if=\"isManager || isAdmin\" class=\"grid\">\r\n        <div class=\"col-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h3>Pending Approvals</h3>\r\n            </div>\r\n            \r\n            <div v-if=\"isLoadingApprovals\" class=\"empty-state\">\r\n              <ProgressSpinner style=\"width: 50px; height: 50px\" />\r\n            </div>\r\n            \r\n            <div v-else-if=\"pendingApprovals.length === 0\" class=\"empty-state\">\r\n              <i class=\"pi pi-check-circle empty-icon\"></i>\r\n              <p>No pending approvals</p>\r\n            </div>\r\n            \r\n            <div v-else class=\"approval-list\">\r\n              <DataTable :value=\"pendingApprovals\" responsive-layout=\"scroll\">\r\n                <Column field=\"type\" header=\"Type\">\r\n                  <template #body=\"slotProps\">\r\n                    <span class=\"approval-type\">\r\n                      <i class=\"pi\" :class=\"getApprovalIcon(slotProps.data.type)\"></i>\r\n                      {{ capitalize(slotProps.data.type) }}\r\n                    </span>\r\n                  </template>\r\n                </Column>\r\n                \r\n                <Column field=\"title\" header=\"Title\" />\r\n                \r\n                <Column field=\"submittedBy\" header=\"Submitted By\" />\r\n                \r\n                <Column field=\"date\" header=\"Date\">\r\n                  <template #body=\"slotProps\">\r\n                    {{ formatDate(slotProps.data.date) }}\r\n                  </template>\r\n                </Column>\r\n                \r\n                <Column header=\"Actions\">\r\n                  <template #body=\"slotProps\">\r\n                    <Button \r\n                      icon=\"pi pi-eye\" \r\n                      class=\"p-button-text p-button-rounded mr-2\" \r\n                      @click=\"viewApproval(slotProps.data)\" \r\n                    />\r\n                    <Button \r\n                      icon=\"pi pi-check\" \r\n                      class=\"p-button-success p-button-rounded mr-2\" \r\n                      @click=\"approveItem(slotProps.data)\" \r\n                    />\r\n                    <Button \r\n                      icon=\"pi pi-times\" \r\n                      class=\"p-button-danger p-button-rounded\" \r\n                      @click=\"rejectItem(slotProps.data)\" \r\n                    />\r\n                  </template>\r\n                </Column>\r\n              </DataTable>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { computed, onMounted, ref } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import Button from 'primevue/button';\r\n  import Tag from 'primevue/tag';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  import DataTable from 'primevue/datatable';\r\n  import Column from 'primevue/column';\r\n  \r\n  export default {\r\n    name: 'HomePage',\r\n    components: {\r\n      Button,\r\n      Tag,\r\n      ProgressSpinner,\r\n      DataTable,\r\n      Column\r\n    },\r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n      \r\n      // Loading states\r\n      const isLoadingEvents = ref(false);\r\n      const isLoadingDocs = ref(false);\r\n      const isLoadingApprovals = ref(false);\r\n      \r\n      // Data\r\n      const upcomingEvents = ref([]);\r\n      const recentDocuments = ref([]);\r\n      const pendingApprovals = ref([]);\r\n      const expenseStats = ref(null);\r\n      \r\n      // Computed values\r\n      const user = computed(() => store.getters['auth/currentUser']);\r\n      const userFirstName = computed(() => user.value?.firstName || 'User');\r\n      const isAdmin = computed(() => store.getters['auth/isAdmin']);\r\n      const isManager = computed(() => store.getters['auth/isManager']);\r\n      const hasDirectReports = computed(() => isManager.value || isAdmin.value);\r\n      const departmentName = computed(() => user.value?.departmentName);\r\n      \r\n      const upcomingEventsCount = computed(() => upcomingEvents.value.length);\r\n      const recentDocsCount = computed(() => recentDocuments.value.length);\r\n      \r\n      const welcomeMessage = computed(() => {\r\n        const now = new Date();\r\n        const hour = now.getHours();\r\n        \r\n        if (hour < 12) {\r\n          return 'Good morning! Here\\'s your daily overview.';\r\n        } else if (hour < 18) {\r\n          return 'Good afternoon! Here\\'s your daily overview.';\r\n        } else {\r\n          return 'Good evening! Here\\'s your daily overview.';\r\n        }\r\n      });\r\n      \r\n      // Methods - Navigation\r\n      const goToProfile = () => {\r\n        router.push(`/users/${user.value.id}`);\r\n      };\r\n      \r\n      const goToMyTeam = () => {\r\n        router.push('/users?filter=myteam');\r\n      };\r\n      \r\n      const goToCalendar = () => {\r\n        router.push('/calendar');\r\n      };\r\n      \r\n      const goToDocuments = () => {\r\n        router.push('/documents');\r\n      };\r\n      \r\n      const viewDocument = (id) => {\r\n        router.push(`/documents/${id}`);\r\n      };\r\n      \r\n      const viewApproval = (approval) => {\r\n        if (approval.type === 'expense') {\r\n          router.push(`/expenses/${approval.id}`);\r\n        } else if (approval.type === 'leave') {\r\n          router.push(`/leaves/${approval.id}`);\r\n        }\r\n      };\r\n      \r\n      // Methods - Formatting\r\n      const formatDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat('en-US', { \r\n          year: 'numeric', \r\n          month: 'short', \r\n          day: 'numeric' \r\n        }).format(date);\r\n      };\r\n      \r\n      const formatDay = (dateString) => {\r\n        if (!dateString) return '';\r\n        const date = new Date(dateString);\r\n        return date.getDate();\r\n      };\r\n      \r\n      const formatMonth = (dateString) => {\r\n        if (!dateString) return '';\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat('en-US', { month: 'short' }).format(date);\r\n      };\r\n      \r\n      const formatTime = (dateString) => {\r\n        if (!dateString) return '';\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat('en-US', { \r\n          hour: 'numeric', \r\n          minute: '2-digit',\r\n          hour12: true\r\n        }).format(date);\r\n      };\r\n      \r\n      const capitalize = (str) => {\r\n        if (!str) return '';\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n      };\r\n      \r\n      // Methods - Icon helpers\r\n      const getDocumentIcon = (fileType) => {\r\n        if (!fileType) return 'pi-file-o';\r\n        \r\n        const type = fileType.toLowerCase();\r\n        \r\n        if (type.includes('pdf')) return 'pi-file-pdf';\r\n        if (type.includes('doc') || type.includes('word')) return 'pi-file-word';\r\n        if (type.includes('xls') || type.includes('spreadsheet')) return 'pi-file-excel';\r\n        if (type.includes('ppt') || type.includes('presentation')) return 'pi-file-powerpoint';\r\n        if (type.includes('zip') || type.includes('rar')) return 'pi-file-archive';\r\n        if (type.includes('jpg') || type.includes('jpeg') || \r\n            type.includes('png') || type.includes('gif')) return 'pi-file-image';\r\n        \r\n        return 'pi-file-o';\r\n      };\r\n      \r\n      const getApprovalIcon = (type) => {\r\n        if (type === 'expense') return 'pi-money-bill';\r\n        if (type === 'leave') return 'pi-calendar';\r\n        return 'pi-file-o';\r\n      };\r\n      \r\n      const getAttendanceTagType = (status) => {\r\n        switch (status) {\r\n          case 'accepted': return 'success';\r\n          case 'declined': return 'danger';\r\n          case 'tentative': return 'warning';\r\n          default: return 'info';\r\n        }\r\n      };\r\n      \r\n      // Methods - Actions\r\n      const downloadDocument = (doc) => {\r\n        // In a real app, this would trigger a download\r\n        // For this implementation, we just redirect to the document\r\n        window.open(doc.file_path, '_blank');\r\n      };\r\n      \r\n      const approveItem = async (item) => {\r\n        try {\r\n          if (item.type === 'expense') {\r\n            await store.dispatch('expenses/reviewExpense', { \r\n              id: item.id, \r\n              action: 'approve'\r\n            });\r\n            \r\n            // Remove from pending list\r\n            pendingApprovals.value = pendingApprovals.value.filter(\r\n              approval => !(approval.id === item.id && approval.type === 'expense')\r\n            );\r\n            \r\n            // Show success message\r\n            store.dispatch('showToast', { \r\n              message: 'Expense approved successfully', \r\n              type: 'success' \r\n            }, { root: true });\r\n          }\r\n          // Handle other approval types as needed\r\n        } catch (error) {\r\n          console.error('Error approving item:', error);\r\n          store.dispatch('showToast', { \r\n            message: 'Failed to approve item', \r\n            type: 'error' \r\n          }, { root: true });\r\n        }\r\n      };\r\n      \r\n      const rejectItem = async (item) => {\r\n        try {\r\n          if (item.type === 'expense') {\r\n            await store.dispatch('expenses/reviewExpense', { \r\n              id: item.id, \r\n              action: 'reject'\r\n            });\r\n            \r\n            // Remove from pending list\r\n            pendingApprovals.value = pendingApprovals.value.filter(\r\n              approval => !(approval.id === item.id && approval.type === 'expense')\r\n            );\r\n            \r\n            // Show success message\r\n            store.dispatch('showToast', { \r\n              message: 'Expense rejected', \r\n              type: 'info' \r\n            }, { root: true });\r\n          }\r\n          // Handle other approval types as needed\r\n        } catch (error) {\r\n          console.error('Error rejecting item:', error);\r\n          store.dispatch('showToast', { \r\n            message: 'Failed to reject item', \r\n            type: 'error' \r\n          }, { root: true });\r\n        }\r\n      };\r\n      \r\n      // Fetch data on component mount\r\n      onMounted(async () => {\r\n        // Fetch upcoming events\r\n        isLoadingEvents.value = true;\r\n        try {\r\n          const events = await store.dispatch('calendar/fetchUpcomingEvents');\r\n          upcomingEvents.value = events;\r\n        } catch (error) {\r\n          console.error('Error fetching events:', error);\r\n        } finally {\r\n          isLoadingEvents.value = false;\r\n        }\r\n        \r\n        // Fetch recent documents\r\n        isLoadingDocs.value = true;\r\n        try {\r\n          // This would be a real API call in a complete implementation\r\n          // For now, we'll simulate some documents\r\n          recentDocuments.value = [\r\n            {\r\n              id: '1',\r\n              title: 'Company Handbook',\r\n              file_type: 'pdf',\r\n              department_name: 'Human Resources',\r\n              created_at: new Date().toISOString(),\r\n              file_path: '#'\r\n            },\r\n            {\r\n              id: '2',\r\n              title: 'Q2 Financial Report',\r\n              file_type: 'xlsx',\r\n              department_name: 'Finance',\r\n              created_at: new Date().toISOString(),\r\n              file_path: '#'\r\n            }\r\n          ];\r\n        } catch (error) {\r\n          console.error('Error fetching documents:', error);\r\n        } finally {\r\n          isLoadingDocs.value = false;\r\n        }\r\n        \r\n        // Fetch expense stats\r\n        try {\r\n          // This would be a real API call in a complete implementation\r\n          expenseStats.value = {\r\n            pendingCount: 2,\r\n            totalAmount: 1250.75\r\n          };\r\n        } catch (error) {\r\n          console.error('Error fetching expense stats:', error);\r\n        }\r\n        \r\n        // Fetch pending approvals for managers\r\n        if (isManager.value || isAdmin.value) {\r\n          isLoadingApprovals.value = true;\r\n          try {\r\n            // This would be a real API call in a complete implementation\r\n            pendingApprovals.value = [\r\n              {\r\n                id: '1',\r\n                type: 'expense',\r\n                title: 'Travel Expenses',\r\n                submittedBy: 'John Doe',\r\n                date: new Date().toISOString(),\r\n                amount: 350.50\r\n              },\r\n              {\r\n                id: '2',\r\n                type: 'expense',\r\n                title: 'Office Supplies',\r\n                submittedBy: 'Jane Smith',\r\n                date: new Date().toISOString(),\r\n                amount: 75.25\r\n              }\r\n            ];\r\n          } catch (error) {\r\n            console.error('Error fetching pending approvals:', error);\r\n          } finally {\r\n            isLoadingApprovals.value = false;\r\n          }\r\n        }\r\n      });\r\n      \r\n      return {\r\n        // Loading states\r\n        isLoadingEvents,\r\n        isLoadingDocs,\r\n        isLoadingApprovals,\r\n        \r\n        // Data\r\n        upcomingEvents,\r\n        recentDocuments,\r\n        pendingApprovals,\r\n        expenseStats,\r\n        \r\n        // Computed values\r\n        userFirstName,\r\n        welcomeMessage,\r\n        isAdmin,\r\n        isManager,\r\n        hasDirectReports,\r\n        departmentName,\r\n        upcomingEventsCount,\r\n        recentDocsCount,\r\n        \r\n        // Methods - Navigation\r\n        goToProfile,\r\n        goToMyTeam,\r\n        goToCalendar,\r\n        goToDocuments,\r\n        viewDocument,\r\n        viewApproval,\r\n        \r\n        // Methods - Formatting\r\n        formatDate,\r\n        formatDay,\r\n        formatMonth,\r\n        formatTime,\r\n        capitalize,\r\n        \r\n        // Methods - Icon helpers\r\n        getDocumentIcon,\r\n        getApprovalIcon,\r\n        getAttendanceTagType,\r\n        \r\n        // Methods - Actions\r\n        downloadDocument,\r\n        approveItem,\r\n        rejectItem\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .dashboard-container {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .dashboard-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  /* Welcome card */\r\n  .welcome-card {\r\n    margin-bottom: 1.5rem;\r\n    padding: 1.5rem;\r\n  }\r\n  \r\n  .welcome-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .welcome-text h2 {\r\n    font-size: 1.25rem;\r\n    font-weight: 600;\r\n    margin: 0 0 0.5rem 0;\r\n  }\r\n  \r\n  .welcome-text p {\r\n    margin: 0;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  /* Stat cards */\r\n  .stat-card {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 1.25rem;\r\n    height: 100%;\r\n  }\r\n  \r\n  .stat-icon {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border-radius: 50%;\r\n    background-color: rgba(59, 130, 246, 0.1);\r\n    color: var(--primary-color);\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .stat-icon i {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .stat-content {\r\n    flex: 1;\r\n  }\r\n  \r\n  .stat-title {\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 0.25rem;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    color: var(--text-color);\r\n    margin-bottom: 0.25rem;\r\n  }\r\n  \r\n  .stat-subtitle {\r\n    font-size: 0.75rem;\r\n    font-weight: 400;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .stat-link a {\r\n    font-size: 0.875rem;\r\n    color: var(--primary-color);\r\n    text-decoration: none;\r\n  }\r\n  \r\n  .stat-link a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  \r\n  /* Card headers */\r\n  .card-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .card-header h3 {\r\n    font-size: 1.125rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n  }\r\n  \r\n  /* Empty states */\r\n  .empty-state {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 2rem;\r\n    text-align: center;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .empty-icon {\r\n    font-size: 2rem;\r\n    margin-bottom: 1rem;\r\n    opacity: 0.5;\r\n  }\r\n  \r\n  /* Event list */\r\n  .event-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.75rem;\r\n  }\r\n  \r\n  .event-item {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0.75rem;\r\n    border-radius: 0.375rem;\r\n    background-color: var(--surface-ground);\r\n    transition: background-color 0.2s;\r\n  }\r\n  \r\n  .event-item:hover {\r\n    background-color: var(--surface-hover);\r\n  }\r\n  \r\n  .event-date {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border-radius: 0.375rem;\r\n    background-color: var(--primary-color);\r\n    color: white;\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .event-day {\r\n    font-size: 1.25rem;\r\n    font-weight: 600;\r\n    line-height: 1;\r\n  }\r\n  \r\n  .event-month {\r\n    font-size: 0.75rem;\r\n    text-transform: uppercase;\r\n  }\r\n  \r\n  .event-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .event-title {\r\n    font-weight: 500;\r\n    margin-bottom: 0.25rem;\r\n  }\r\n  \r\n  .event-time, .event-location {\r\n    font-size: 0.875rem;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .event-location {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.25rem;\r\n  }\r\n  \r\n  /* Document list */\r\n  .document-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.75rem;\r\n  }\r\n  \r\n  .document-item {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0.75rem;\r\n    border-radius: 0.375rem;\r\n    background-color: var(--surface-ground);\r\n    transition: background-color 0.2s;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .document-item:hover {\r\n    background-color: var(--surface-hover);\r\n  }\r\n  \r\n  .document-icon {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 2.5rem;\r\n    height: 2.5rem;\r\n    border-radius: 0.375rem;\r\n    background-color: rgba(59, 130, 246, 0.1);\r\n    color: var(--primary-color);\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .document-icon i {\r\n    font-size: 1.25rem;\r\n  }\r\n  \r\n  .document-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .document-title {\r\n    font-weight: 500;\r\n    margin-bottom: 0.25rem;\r\n  }\r\n  \r\n  .document-meta {\r\n    display: flex;\r\n    font-size: 0.875rem;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .document-department {\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  /* Approval list */\r\n  .approval-type {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  /* Responsive adjustments */\r\n  @media screen and (max-width: 576px) {\r\n    .welcome-header {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .event-date {\r\n      width: 2.5rem;\r\n      height: 2.5rem;\r\n    }\r\n    \r\n    .document-icon {\r\n      width: 2rem;\r\n      height: 2rem;\r\n    }\r\n  }\r\n  </style>","/home/pi/projects/intranet/frontend/src/views/NotFound.vue",[],"/home/pi/projects/intranet/frontend/src/views/Users.vue",["66","67","68"],"<template>\r\n  <div class=\"users-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Company Directory</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          v-if=\"isAdmin\"\r\n          label=\"Add User\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewUserAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User filters -->\r\n    <div class=\"card\">\r\n      <div class=\"user-filters\">\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-4\">\r\n            <span class=\"p-input-icon-left w-full\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText \r\n                v-model=\"filters.searchTerm\" \r\n                placeholder=\"Search users\" \r\n                class=\"w-full\"\r\n                @input=\"onFilterChange\"\r\n              />\r\n            </span>\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.departmentId\"\r\n              :options=\"departments\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"id\"\r\n              placeholder=\"All AppDepartments\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.role\"\r\n              :options=\"roleOptions\"\r\n              optionLabel=\"label\"\r\n              optionValue=\"value\"\r\n              placeholder=\"All Roles\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-2\">\r\n            <div class=\"p-inputgroup w-full\">\r\n              <span class=\"p-inputgroup-addon\">\r\n                <i class=\"pi pi-user\"></i>\r\n              </span>\r\n              <Button \r\n                :label=\"filters.isActive !== false ? 'Active Only' : 'All Users'\" \r\n                :class=\"{ 'p-button-success': filters.isActive !== false }\"\r\n                class=\"w-full\"\r\n                @click=\"toggleActiveFilter\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading spinner -->\r\n      <div v-if=\"isLoading\" class=\"loading-container\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- User list - Card view -->\r\n      <div v-else class=\"user-list\">\r\n        <div v-if=\"users.length === 0\" class=\"empty-message\">\r\n          <i class=\"pi pi-users\"></i>\r\n          <p>No users found</p>\r\n        </div>\r\n        <div v-else class=\"grid\">\r\n          <div v-for=\"user in users\" :key=\"user.id\" class=\"col-12 md:col-6 lg:col-4 xl:col-3\">\r\n            <div \r\n              class=\"user-card p-ripple\" \r\n              :class=\"{ 'inactive-user': !user.is_active }\"\r\n              @click=\"viewUser(user)\"\r\n            >\r\n              <div class=\"user-card-header\">\r\n                <Avatar \r\n                  :image=\"user.profile_image\" \r\n                  size=\"large\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '64px',\r\n                        height: '64px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n                <div class=\"user-info\">\r\n                  <h3 class=\"user-name\">{{ user.first_name }} {{ user.last_name }}</h3>\r\n                  <div class=\"user-title\">{{ user.job_title || 'No title' }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"user-card-content\">\r\n                <div class=\"user-detail\">\r\n                  <i class=\"pi pi-envelope\"></i>\r\n                  <span>{{ user.email }}</span>\r\n                </div>\r\n                <div v-if=\"user.department_name\" class=\"user-detail\">\r\n                  <i class=\"pi pi-sitemap\"></i>\r\n                  <span>{{ user.department_name }}</span>\r\n                </div>\r\n                <div v-if=\"user.phone\" class=\"user-detail\">\r\n                  <i class=\"pi pi-phone\"></i>\r\n                  <span>{{ user.phone }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"user-card-footer\">\r\n                <Tag \r\n                  :value=\"user.role\" \r\n                  :severity=\"getRoleSeverity(user.role)\" \r\n                />\r\n                <Tag \r\n                  v-if=\"!user.is_active\" \r\n                  value=\"Inactive\" \r\n                  severity=\"danger\" \r\n                />\r\n              </div>\r\n              <Ripple />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Pagination controls -->\r\n        <Paginator \r\n          v-if=\"users.length > 0\" \r\n          :rows=\"pagination.per_page\" \r\n          :totalRecords=\"pagination.total\" \r\n          :rowsPerPageOptions=\"[12, 24, 48]\" \r\n          @page=\"onPageChange($event)\"\r\n          template=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n          class=\"user-paginator\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"userDialogVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New User' : 'Edit User'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid user-dialog\"\r\n    >\r\n      <div class=\"user-form\">\r\n        <div class=\"profile-image-upload\">\r\n          <div class=\"profile-image-container\">\r\n            <Avatar \r\n              :image=\"userForm.profileImageUrl || null\" \r\n              size=\"xlarge\" \r\n              shape=\"circle\" \r\n              :pt=\"{\r\n                image: {\r\n                  style: { \r\n                    objectFit: 'cover',\r\n                    width: '100px',\r\n                    height: '100px'\r\n                  }\r\n                }\r\n              }\"\r\n            >\r\n              <template #icon>\r\n                <i class=\"pi pi-user\" style=\"font-size: 2rem\"></i>\r\n              </template>\r\n            </Avatar>\r\n            <div class=\"profile-upload-overlay\">\r\n              <FileUpload \r\n                mode=\"basic\" \r\n                name=\"profile\" \r\n                accept=\"image/*\" \r\n                :maxFileSize=\"1000000\" \r\n                chooseLabel=\"\"\r\n                class=\"p-button-rounded p-button-outlined p-button-sm profile-upload-button\"\r\n                @select=\"onProfileImageSelect\"\r\n                @error=\"onProfileImageError\"\r\n              >\r\n                <template #chooseicon>\r\n                  <i class=\"pi pi-camera\"></i>\r\n                </template>\r\n              </FileUpload>\r\n            </div>\r\n          </div>\r\n          <small v-if=\"profileImageError\" class=\"p-error\">{{ profileImageError }}</small>\r\n        </div>\r\n\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"firstName\">First Name*</label>\r\n              <InputText \r\n                id=\"firstName\" \r\n                v-model=\"userForm.firstName\" \r\n                required \r\n                :class=\"{ 'p-invalid': submitted && !userForm.firstName }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.firstName\" class=\"p-error\">First name is required.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"lastName\">Last Name*</label>\r\n              <InputText \r\n                id=\"lastName\" \r\n                v-model=\"userForm.lastName\" \r\n                required \r\n                :class=\"{ 'p-invalid': submitted && !userForm.lastName }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.lastName\" class=\"p-error\">Last name is required.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n            <div class=\"field\">\r\n              <label for=\"email\">Email*</label>\r\n              <InputText \r\n                id=\"email\" \r\n                v-model=\"userForm.email\" \r\n                type=\"email\" \r\n                required \r\n                :disabled=\"dialogMode === 'edit'\"\r\n                :class=\"{ 'p-invalid': submitted && !userForm.email }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.email\" class=\"p-error\">Email is required.</small>\r\n              <small v-else-if=\"emailError\" class=\"p-error\">{{ emailError }}</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"jobTitle\">Job Title</label>\r\n              <InputText id=\"jobTitle\" v-model=\"userForm.jobTitle\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"phone\">Phone</label>\r\n              <InputText id=\"phone\" v-model=\"userForm.phone\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"department\">Department</label>\r\n              <Dropdown \r\n                id=\"department\" \r\n                v-model=\"userForm.departmentId\" \r\n                :options=\"departments\" \r\n                optionLabel=\"name\" \r\n                optionValue=\"id\" \r\n                placeholder=\"Select Department\" \r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"manager\">Manager</label>\r\n              <Dropdown \r\n                id=\"manager\" \r\n                v-model=\"userForm.managerId\" \r\n                :options=\"managers\" \r\n                optionLabel=\"name\" \r\n                optionValue=\"id\" \r\n                placeholder=\"Select Manager\" \r\n              />\r\n            </div>\r\n          </div>\r\n          <div v-if=\"isAdmin\" class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"role\">Role*</label>\r\n              <Dropdown \r\n                id=\"role\" \r\n                v-model=\"userForm.role\" \r\n                :options=\"roleOptions\" \r\n                optionLabel=\"label\" \r\n                optionValue=\"value\" \r\n                placeholder=\"Select Role\" \r\n                required\r\n                :class=\"{ 'p-invalid': submitted && !userForm.role }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.role\" class=\"p-error\">Role is required.</small>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"isAdmin && dialogMode === 'edit'\" class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"isActive\">Status</label>\r\n              <div class=\"field-checkbox\">\r\n                <Checkbox id=\"isActive\" v-model=\"userForm.isActive\" :binary=\"true\" />\r\n                <label for=\"isActive\">Active user</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Password fields (only show for new users or if changing password) -->\r\n          <template v-if=\"dialogMode === 'create' || showPasswordFields\">\r\n            <div class=\"col-12\">\r\n              <Divider align=\"left\">\r\n                <div class=\"inline-flex align-items-center\">\r\n                  <i class=\"pi pi-lock mr-2\"></i>\r\n                  <b>{{ dialogMode === 'create' ? 'Set Password' : 'Change Password' }}</b>\r\n                </div>\r\n              </Divider>\r\n            </div>\r\n            <div class=\"col-12 md:col-6\">\r\n              <div class=\"field\">\r\n                <label for=\"password\">Password{{ dialogMode === 'create' ? '*' : '' }}</label>\r\n                <Password \r\n                  id=\"password\" \r\n                  v-model=\"userForm.password\" \r\n                  toggleMask \r\n                  :feedback=\"true\"\r\n                  :required=\"dialogMode === 'create'\"\r\n                  :class=\"{ 'p-invalid': submitted && dialogMode === 'create' && !userForm.password }\"\r\n                />\r\n                <small v-if=\"submitted && dialogMode === 'create' && !userForm.password\" class=\"p-error\">Password is required for new users.</small>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 md:col-6\">\r\n              <div class=\"field\">\r\n                <label for=\"confirmPassword\">Confirm Password{{ dialogMode === 'create' ? '*' : '' }}</label>\r\n                <Password \r\n                  id=\"confirmPassword\" \r\n                  v-model=\"userForm.confirmPassword\" \r\n                  toggleMask \r\n                  :feedback=\"false\"\r\n                  :required=\"dialogMode === 'create'\"\r\n                  :class=\"{ 'p-invalid': submitted && ((dialogMode === 'create' && !userForm.confirmPassword) || passwordMismatch) }\"\r\n                />\r\n                <small v-if=\"submitted && dialogMode === 'create' && !userForm.confirmPassword\" class=\"p-error\">Please confirm the password.</small>\r\n                <small v-else-if=\"passwordMismatch\" class=\"p-error\">Passwords do not match.</small>\r\n              </div>\r\n            </div>\r\n          </template>\r\n\r\n          <!-- Button to show/hide password fields when editing -->\r\n          <div v-if=\"dialogMode === 'edit' && !showPasswordFields\" class=\"col-12\">\r\n            <Button \r\n              label=\"Change Password\" \r\n              icon=\"pi pi-lock\" \r\n              class=\"p-button-outlined p-button-secondary mt-2\" \r\n              type=\"button\"\r\n              @click=\"showPasswordFields = true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeUserAppDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && isAdmin\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteUser\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveUser\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- User Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"userDetailsVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"selectedUser ? `${selectedUser.first_name} ${selectedUser.last_name}` : 'User Details'\" \r\n      :modal=\"true\"\r\n      class=\"user-details-dialog\"\r\n    >\r\n      <div v-if=\"selectedUser\" class=\"user-details\">\r\n        <div class=\"user-details-header\">\r\n          <Avatar \r\n            :image=\"selectedUser.profile_image\" \r\n            size=\"xlarge\" \r\n            shape=\"circle\" \r\n            :pt=\"{\r\n              image: {\r\n                style: { \r\n                  objectFit: 'cover',\r\n                  width: '120px',\r\n                  height: '120px'\r\n                }\r\n              }\r\n            }\"\r\n          />\r\n          <div class=\"user-header-info\">\r\n            <h2 class=\"user-full-name\">{{ selectedUser.first_name }} {{ selectedUser.last_name }}</h2>\r\n            <div class=\"user-job-title\">{{ selectedUser.job_title || 'No title' }}</div>\r\n            <div class=\"user-tags\">\r\n              <Tag \r\n                :value=\"selectedUser.role\" \r\n                :severity=\"getRoleSeverity(selectedUser.role)\" \r\n              />\r\n              <Tag \r\n                v-if=\"!selectedUser.is_active\" \r\n                value=\"Inactive\" \r\n                severity=\"danger\" \r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"user-details-content\">\r\n          <div class=\"user-info-section\">\r\n            <h3>Contact Information</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Email</div>\r\n                <div class=\"info-value\">\r\n                  <a :href=\"`mailto:${selectedUser.email}`\">{{ selectedUser.email }}</a>\r\n                </div>\r\n              </div>\r\n              <div v-if=\"selectedUser.phone\" class=\"info-group\">\r\n                <div class=\"info-label\">Phone</div>\r\n                <div class=\"info-value\">\r\n                  <a :href=\"`tel:${selectedUser.phone}`\">{{ selectedUser.phone }}</a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"user-info-section\">\r\n            <h3>Organization</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div v-if=\"selectedUser.department_name\" class=\"info-group\">\r\n                <div class=\"info-label\">Department</div>\r\n                <div class=\"info-value\">{{ selectedUser.department_name }}</div>\r\n              </div>\r\n              <div v-if=\"selectedUser.manager_name\" class=\"info-group\">\r\n                <div class=\"info-label\">Manager</div>\r\n                <div class=\"info-value\">{{ selectedUser.manager_name }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Direct Reports section (if the user is a manager) -->\r\n          <div v-if=\"directReports.length > 0\" class=\"user-info-section\">\r\n            <h3>Direct Reports</h3>\r\n            <div class=\"direct-reports-list\">\r\n              <div \r\n                v-for=\"report in directReports\" \r\n                :key=\"report.id\" \r\n                class=\"direct-report-item p-ripple\"\r\n                @click=\"viewUser(report)\"\r\n              >\r\n                <Avatar \r\n                  :image=\"report.profile_image\" \r\n                  size=\"small\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '32px',\r\n                        height: '32px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n                <div class=\"report-info\">\r\n                  <div class=\"report-name\">{{ report.first_name }} {{ report.last_name }}</div>\r\n                  <div class=\"report-title\">{{ report.job_title || 'No title' }}</div>\r\n                </div>\r\n                <Button \r\n                  icon=\"pi pi-chevron-right\" \r\n                  class=\"p-button-text p-button-rounded\" \r\n                />\r\n                <Ripple />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Account section -->\r\n          <div class=\"user-info-section\">\r\n            <h3>Account</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Last Login</div>\r\n                <div class=\"info-value\">\r\n                  {{ selectedUser.last_login ? formatDate(selectedUser.last_login) : 'Never' }}\r\n                </div>\r\n              </div>\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Created</div>\r\n                <div class=\"info-value\">{{ formatDate(selectedUser.created_at) }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"userDetailsVisible = false\" \r\n        />\r\n        <Button \r\n          v-if=\"canEditUser\" \r\n          label=\"Edit\" \r\n          icon=\"pi pi-pencil\" \r\n          @click=\"editFromDetails\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport InputText from 'primevue/inputtext';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Avatar from 'primevue/avatar';\r\nimport Tag from 'primevue/tag';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport Checkbox from 'primevue/checkbox';\r\nimport Password from 'primevue/password';\r\nimport Divider from 'primevue/divider';\r\nimport FileUpload from 'primevue/fileupload';\r\nimport Paginator from 'primevue/paginator';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\nimport Ripple from 'primevue/ripple';\r\n\r\nexport default {\r\n  name: 'UsersView',\r\n  components: {\r\n    Button,\r\n    InputText,\r\n    Dropdown,\r\n    Avatar,\r\n    Tag,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    Checkbox,\r\n    Password,\r\n    Divider,\r\n    FileUpload,\r\n    Paginator,\r\n    ConfirmDialog,\r\n    Ripple\r\n  },\r\n  directives: {\r\n    ripple: Ripple\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n//    const router = useRouter();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n\r\n    // State\r\n    const userDialogVisible = ref(false);\r\n    const userDetailsVisible = ref(false);\r\n    const dialogMode = ref('create');\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const showPasswordFields = ref(false);\r\n    const passwordMismatch = ref(false);\r\n    const emailError = ref('');\r\n    const profileImageError = ref('');\r\n    const selectedProfileImage = ref(null);\r\n\r\n    // Form state for user\r\n    const userForm = reactive({\r\n      id: null,\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      jobTitle: '',\r\n      phone: '',\r\n      departmentId: null,\r\n      managerId: null,\r\n      role: '',\r\n      isActive: true,\r\n      password: '',\r\n      confirmPassword: '',\r\n      profileImageUrl: null\r\n    });\r\n\r\n    // Options for roles filter\r\n    const roleOptions = ref([\r\n      { label: 'All Roles', value: '' },\r\n      { label: 'Admin', value: 'admin' },\r\n      { label: 'Manager', value: 'manager' },\r\n      { label: 'Employee', value: 'employee' }\r\n    ]);\r\n\r\n    // Options for departments (should come from API in real app)\r\n    const departments = ref([\r\n      { id: '1', name: 'Finance' },\r\n      { id: '2', name: 'Human Resources' },\r\n      { id: '3', name: 'Marketing' },\r\n      { id: '4', name: 'Engineering' },\r\n      { id: '5', name: 'Operations' }\r\n    ]);\r\n\r\n    // List of managers for dropdown\r\n    const managers = ref([]);\r\n\r\n    // Computed properties\r\n    const users = computed(() => store.state.users.users);\r\n    const selectedUser = computed(() => store.state.users.currentUser);\r\n    const directReports = computed(() => store.state.users.directReports);\r\n    const isLoading = computed(() => store.state.users.isLoading);\r\n    const pagination = computed(() => store.state.users.pagination);\r\n    const filters = computed(() => store.state.users.filters);\r\n\r\n    // Check if current user is admin\r\n    const isAdmin = computed(() => {\r\n      return store.getters['auth/isAdmin'];\r\n    });\r\n\r\n    // Check if the user can be edited by current user\r\n    const canEditUser = computed(() => {\r\n      if (!selectedUser.value) return false;\r\n      \r\n      // Admin can edit any user\r\n      if (isAdmin.value) return true;\r\n      \r\n      // Users can edit their own profile\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedUser.value.id === currentUserId;\r\n    });\r\n\r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      }).format(date);\r\n    };\r\n\r\n    // Get severity class for role tag\r\n    const getRoleSeverity = (role) => {\r\n      switch (role) {\r\n        case 'admin': return 'danger';\r\n        case 'manager': return 'warning';\r\n        case 'employee': return 'info';\r\n        default: return 'secondary';\r\n      }\r\n    };\r\n\r\n    // Filter change handler\r\n    const onFilterChange = () => {\r\n      fetchUsers(1);\r\n    };\r\n\r\n    // Toggle active filter\r\n    const toggleActiveFilter = () => {\r\n      store.dispatch('users/setFilter', {\r\n        key: 'isActive',\r\n        value: filters.value.isActive !== false ? false : null\r\n      });\r\n      fetchUsers(1);\r\n    };\r\n\r\n    // Page change handler\r\n    const onPageChange = (event) => {\r\n      fetchUsers(event.page + 1, event.rows);\r\n    };\r\n\r\n    // Fetch users from API\r\n    const fetchUsers = async (page = 1, limit = pagination.value.per_page) => {\r\n      try {\r\n        await store.dispatch('users/fetchUsers', { page, limit });\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load users',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Fetch managers list for dropdown\r\n    const fetchManagers = async () => {\r\n      try {\r\n        const response = await store.dispatch('users/fetchUsers', {\r\n          limit: 100,\r\n          role: 'manager'\r\n        });\r\n        \r\n        managers.value = response.data.map(user => ({\r\n          id: user.id,\r\n          name: `${user.first_name} ${user.last_name}`\r\n        }));\r\n        \r\n        // Add admins as potential managers too\r\n        const adminResponse = await store.dispatch('users/fetchUsers', {\r\n          limit: 100,\r\n          role: 'admin'\r\n        });\r\n        \r\n        adminResponse.data.forEach(user => {\r\n          managers.value.push({\r\n            id: user.id,\r\n            name: `${user.first_name} ${user.last_name}`\r\n          });\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching managers:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch direct reports for a user\r\n    const fetchDirectReports = async (userId) => {\r\n      try {\r\n        await store.dispatch('users/fetchDirectReports', userId);\r\n      } catch (error) {\r\n        console.error('Error fetching direct reports:', error);\r\n      }\r\n    };\r\n\r\n    // Open new user dialog\r\n    const openNewUserDialog = () => {\r\n      resetUserForm();\r\n      dialogMode.value = 'create';\r\n      userDialogVisible.value = true;\r\n    };\r\n\r\n    // Close user dialog\r\n    const closeUserDialog = () => {\r\n      userDialogVisible.value = false;\r\n      submitted.value = false;\r\n      passwordMismatch.value = false;\r\n      emailError.value = '';\r\n      profileImageError.value = '';\r\n      showPasswordFields.value = false;\r\n    };\r\n\r\n    // Reset user form\r\n    const resetUserForm = () => {\r\n      Object.assign(userForm, {\r\n        id: null,\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        jobTitle: '',\r\n        phone: '',\r\n        departmentId: null,\r\n        managerId: null,\r\n        role: 'employee', // Default role\r\n        isActive: true,\r\n        password: '',\r\n        confirmPassword: '',\r\n        profileImageUrl: null\r\n      });\r\n    };\r\n\r\n    // Handle profile image selection\r\n    const onProfileImageSelect = (event) => {\r\n      profileImageError.value = '';\r\n      selectedProfileImage.value = event.files[0];\r\n      \r\n      // Generate a temporary URL for preview\r\n      userForm.profileImageUrl = URL.createObjectURL(selectedProfileImage.value);\r\n    };\r\n\r\n    // Handle profile image error\r\n    const onProfileImageError = (event) => {\r\n      profileImageError.value = event.message;\r\n    };\r\n\r\n    // View a user\r\n    const viewUser = async (userData) => {\r\n      try {\r\n        // Fetch fresh user data\r\n        await store.dispatch('users/fetchUser', userData.id);\r\n        \r\n        // Fetch direct reports\r\n        await fetchDirectReports(userData.id);\r\n        \r\n        // Show details dialog\r\n        userDetailsVisible.value = true;\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load user details',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Edit from details view\r\n    const editFromDetails = () => {\r\n      if (!selectedUser.value) return;\r\n      \r\n      // Close details dialog\r\n      userDetailsVisible.value = false;\r\n      \r\n      // Reset form\r\n      resetUserForm();\r\n      \r\n      // Copy data to form\r\n      userForm.id = selectedUser.value.id;\r\n      userForm.firstName = selectedUser.value.first_name;\r\n      userForm.lastName = selectedUser.value.last_name;\r\n      userForm.email = selectedUser.value.email;\r\n      userForm.jobTitle = selectedUser.value.job_title || '';\r\n      userForm.phone = selectedUser.value.phone || '';\r\n      userForm.departmentId = selectedUser.value.department_id;\r\n      userForm.managerId = selectedUser.value.manager_id;\r\n      userForm.role = selectedUser.value.role;\r\n      userForm.isActive = selectedUser.value.is_active;\r\n      userForm.profileImageUrl = selectedUser.value.profile_image;\r\n      \r\n      // Show edit dialog\r\n      dialogMode.value = 'edit';\r\n      userDialogVisible.value = true;\r\n    };\r\n\r\n    // Confirm delete user\r\n    const confirmDeleteUser = () => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this user?',\r\n        header: 'Delete Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteUser(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Delete user\r\n    const deleteUser = async () => {\r\n      if (!userForm.id) return;\r\n      \r\n      try {\r\n        saving.value = true;\r\n        \r\n        // Delete user via API\r\n        await store.dispatch('users/deleteUser', userForm.id);\r\n        \r\n        // Close dialog\r\n        userDialogVisible.value = false;\r\n        \r\n        // Show success toast\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'User Deleted',\r\n          detail: 'User has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh list\r\n        fetchUsers();\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to delete user',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n      }\r\n    };\r\n\r\n    // Save user (create or update)\r\n    const saveUser = async () => {\r\n      submitted.value = true;\r\n      passwordMismatch.value = false;\r\n      emailError.value = '';\r\n      \r\n      // Validate required fields\r\n      if (!userForm.firstName || !userForm.lastName || !userForm.email) {\r\n        return;\r\n      }\r\n      \r\n      // Validate email format\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(userForm.email)) {\r\n        emailError.value = 'Please enter a valid email address.';\r\n        return;\r\n      }\r\n      \r\n      // Validate role if admin\r\n      if (isAdmin.value && !userForm.role) {\r\n        return;\r\n      }\r\n      \r\n      // Validate password for new users\r\n      if (dialogMode.value === 'create' && !userForm.password) {\r\n        return;\r\n      }\r\n      \r\n      // Validate password confirmation\r\n      if ((dialogMode.value === 'create' || (dialogMode.value === 'edit' && userForm.password)) &&\r\n          userForm.password !== userForm.confirmPassword) {\r\n        passwordMismatch.value = true;\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      try {\r\n        // Prepare user data\r\n        const userData = {\r\n          firstName: userForm.firstName,\r\n          lastName: userForm.lastName,\r\n          jobTitle: userForm.jobTitle,\r\n          phone: userForm.phone,\r\n          departmentId: userForm.departmentId,\r\n          managerId: userForm.managerId,\r\n          role: userForm.role,\r\n          isActive: userForm.isActive\r\n        };\r\n        \r\n        // Add email and password for new users\r\n        if (dialogMode.value === 'create') {\r\n          userData.email = userForm.email;\r\n          userData.password = userForm.password;\r\n        }\r\n        \r\n        // Add password if changing it\r\n        if (dialogMode.value === 'edit' && userForm.password) {\r\n          userData.password = userForm.password;\r\n        }\r\n        \r\n        let savedUser;\r\n        \r\n        if (dialogMode.value === 'create') {\r\n          // Create new user\r\n          savedUser = await store.dispatch('users/createUser', userData);\r\n        } else {\r\n          // Update existing user\r\n          savedUser = await store.dispatch('users/updateUser', {\r\n            id: userForm.id,\r\n            ...userData\r\n          });\r\n        }\r\n        \r\n        // Handle profile image upload if selected\r\n        if (selectedProfileImage.value && savedUser) {\r\n          await store.dispatch('users/uploadProfileImage', {\r\n            id: savedUser.id,\r\n            imageFile: selectedProfileImage.value\r\n          });\r\n        }\r\n        \r\n        // Close dialog\r\n        userDialogVisible.value = false;\r\n        submitted.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: dialogMode.value === 'create' ? 'User Created' : 'User Updated',\r\n          detail: dialogMode.value === 'create' ? 'User has been created successfully' : 'User has been updated successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh user list\r\n        fetchUsers();\r\n      } catch (error) {\r\n        console.error('Error saving user:', error);\r\n        \r\n        const errorMsg = error.response?.data?.message || 'Failed to save user';\r\n        \r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: errorMsg,\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(() => {\r\n      // Load initial data\r\n      fetchUsers();\r\n      fetchManagers();\r\n      \r\n      // Load departments (in a real app, this would come from an API)\r\n      store.dispatch('departments/fetchDepartments')\r\n        .then(response => {\r\n          if (response && response.data) {\r\n            departments.value = response.data.map(dept => ({\r\n              id: dept.id,\r\n              name: dept.name\r\n            }));\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error loading departments:', error);\r\n        });\r\n    });\r\n\r\n    return {\r\n      users,\r\n      selectedUser,\r\n      directReports,\r\n      isLoading,\r\n      userDialogVisible,\r\n      userDetailsVisible,\r\n      dialogMode,\r\n      saving,\r\n      submitted,\r\n      showPasswordFields,\r\n      passwordMismatch,\r\n      emailError,\r\n      profileImageError,\r\n      pagination,\r\n      filters,\r\n      userForm,\r\n      roleOptions,\r\n      departments,\r\n      managers,\r\n      isAdmin,\r\n      canEditUser,\r\n      \r\n      // Methods\r\n      formatDate,\r\n      getRoleSeverity,\r\n      onFilterChange,\r\n      toggleActiveFilter,\r\n      onPageChange,\r\n      openNewUserDialog,\r\n      closeUserDialog,\r\n      onProfileImageSelect,\r\n      onProfileImageError,\r\n      viewUser,\r\n      editFromDetails,\r\n      confirmDeleteUser,\r\n      deleteUser,\r\n      saveUser\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.users-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* User filters */\r\n.user-filters {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Loading container */\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3rem;\r\n}\r\n\r\n/* Empty state */\r\n.empty-message {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.empty-message i {\r\n  font-size: 2.5rem;\r\n  margin-bottom: 1rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n/* User list styling */\r\n.user-list {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.user-card {\r\n  background-color: var(--surface-card);\r\n  border-radius: 0.5rem;\r\n  padding: 1.25rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);\r\n  margin-bottom: 1.5rem;\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n  cursor: pointer;\r\n  position: relative;\r\n}\r\n\r\n.user-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-info {\r\n  margin-left: 1rem;\r\n}\r\n\r\n.user-name {\r\n  font-size: 1.125rem;\r\n  font-weight: 600;\r\n  margin: 0 0 0.25rem 0;\r\n}\r\n\r\n.user-title {\r\n  color: var(--text-color-secondary);\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.user-card-content {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-detail {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.user-detail i {\r\n  margin-right: 0.5rem;\r\n  color: var(--primary-color);\r\n  width: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.user-card-footer {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.inactive-user {\r\n  opacity: 0.7;\r\n}\r\n\r\n/* User paginator */\r\n.user-paginator {\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n/* Profile image upload */\r\n.profile-image-upload {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.profile-image-container {\r\n  position: relative;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.profile-upload-overlay {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n}\r\n\r\n.profile-upload-button {\r\n  width: 2rem !important;\r\n  height: 2rem !important;\r\n}\r\n\r\n/* User details dialog */\r\n.user-details-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.user-header-info {\r\n  margin-left: 1.5rem;\r\n}\r\n\r\n.user-full-name {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  margin: 0 0 0.25rem 0;\r\n}\r\n\r\n.user-job-title {\r\n  color: var(--text-color-secondary);\r\n  font-size: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.user-tags {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.user-info-section {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.user-info-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n  color: var(--text-color);\r\n  padding-bottom: 0.5rem;\r\n  border-bottom: 1px solid var(--surface-border);\r\n}\r\n\r\n.user-info-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 1rem;\r\n}\r\n\r\n.info-label {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: var(--text-color);\r\n}\r\n\r\n.info-value a {\r\n  color: var(--primary-color);\r\n  text-decoration: none;\r\n}\r\n\r\n.info-value a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Direct reports list */\r\n.direct-reports-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.direct-report-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.75rem;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  transition: background-color 0.2s;\r\n  cursor: pointer;\r\n  position: relative;\r\n}\r\n\r\n.direct-report-item:hover {\r\n  background-color: var(--surface-hover);\r\n}\r\n\r\n.report-info {\r\n  margin-left: 0.75rem;\r\n  flex: 1;\r\n}\r\n\r\n.report-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.report-title {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .user-details-header {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n  }\r\n  \r\n  .user-header-info {\r\n    margin-left: 0;\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .user-info-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .user-tags {\r\n    justify-content: center;\r\n  }\r\n}\r\n</style>","/home/pi/projects/intranet/frontend/src/views/UserDetails.vue",[],"/home/pi/projects/intranet/frontend/src/views/OrgChart.vue",["69","70"],"<template>\r\n    <div class=\"orgchart-container\">\r\n      <div class=\"page-header\">\r\n        <h1 class=\"page-title\">Organization Chart</h1>\r\n        <div class=\"page-actions\">\r\n          <Button \r\n            label=\"Export\" \r\n            icon=\"pi pi-download\" \r\n            class=\"p-button-outlined\" \r\n            @click=\"exportOrgChart\"\r\n          />\r\n          <Button \r\n            :label=\"showDepartments ? 'Hide Departments' : 'Show Departments'\" \r\n            :icon=\"showDepartments ? 'pi pi-eye-slash' : 'pi pi-eye'\" \r\n            class=\"p-button-outlined ml-2\" \r\n            @click=\"toggleAppDepartments\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"card loading-card\">\r\n        <ProgressSpinner class=\"spinner\" />\r\n        <p>Loading organization data...</p>\r\n      </div>\r\n      \r\n      <!-- Error state -->\r\n      <div v-else-if=\"error\" class=\"card error-card\">\r\n        <i class=\"pi pi-exclamation-triangle error-icon\"></i>\r\n        <h3>Error Loading Data</h3>\r\n        <p>{{ error }}</p>\r\n        <Button label=\"Retry\" icon=\"pi pi-refresh\" @click=\"loadOrgData\" />\r\n      </div>\r\n      \r\n      <!-- Organization Chart -->\r\n      <div v-else class=\"orgchart-wrapper card\">\r\n        <div class=\"orgchart-actions\">\r\n          <div class=\"zoom-controls\">\r\n            <Button icon=\"pi pi-minus\" class=\"p-button-rounded p-button-text\" @click=\"zoomOut\" />\r\n            <span class=\"zoom-level\">{{ Math.round(zoomLevel * 100) }}%</span>\r\n            <Button icon=\"pi pi-plus\" class=\"p-button-rounded p-button-text\" @click=\"zoomIn\" />\r\n          </div>\r\n          \r\n          <div class=\"orgchart-filters\">\r\n            <Dropdown \r\n              v-if=\"departments.length > 0\"\r\n              v-model=\"selectedDepartment\" \r\n              :options=\"departmentOptions\" \r\n              optionLabel=\"name\" \r\n              placeholder=\"Filter by Department\" \r\n              class=\"department-filter\"\r\n              @change=\"filterByDepartment\"\r\n            />\r\n            \r\n            <div class=\"p-input-icon-left search-box\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText v-model=\"searchTerm\" placeholder=\"Search employees\" @input=\"filterBySearch\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"chart-container\" ref=\"chartContainer\">\r\n          <div class=\"orgchart\" ref=\"orgchart\" :style=\"{ transform: `scale(${zoomLevel})` }\">\r\n            <!-- Recursive tree component -->\r\n            <OrgNode \r\n              v-if=\"rootNode\" \r\n              :node=\"rootNode\" \r\n              :show-departments=\"showAppDepartments\"\r\n              :highlighted-nodes=\"highlightedNodes\"\r\n              @node-click=\"viewEmployeeDetails\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Employee Details Dialog -->\r\n      <Dialog \r\n        v-model:visible=\"employeeDialogVisible\" \r\n        :header=\"selectedEmployee ? `${selectedEmployee.first_name} ${selectedEmployee.last_name}` : 'Employee Details'\" \r\n        :modal=\"true\"\r\n        :dismissableMask=\"true\"\r\n        :style=\"{ width: '500px' }\"\r\n        :closeOnEscape=\"true\"\r\n      >\r\n        <div v-if=\"selectedEmployee\" class=\"employee-details\">\r\n          <div class=\"employee-header\">\r\n            <div class=\"employee-avatar\">\r\n              <img \r\n                v-if=\"selectedEmployee.profile_image\" \r\n                :src=\"selectedEmployee.profile_image\" \r\n                :alt=\"selectedEmployee.first_name\" \r\n                class=\"employee-image\"\r\n              />\r\n              <div v-else class=\"employee-initials\">\r\n                {{ getInitials(selectedEmployee) }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"employee-title\">\r\n              <h3>{{ selectedEmployee.first_name }} {{ selectedEmployee.last_name }}</h3>\r\n              <div class=\"employee-position\">{{ selectedEmployee.job_title }}</div>\r\n              <Tag \r\n                v-if=\"selectedEmployee.department_name\" \r\n                :value=\"selectedEmployee.department_name\"\r\n                severity=\"info\"\r\n                class=\"department-tag\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <Divider />\r\n          \r\n          <div class=\"employee-info\">\r\n            <div class=\"info-item\">\r\n              <div class=\"info-label\">Email</div>\r\n              <div class=\"info-value\">\r\n                <a :href=\"`mailto:${selectedEmployee.email}`\">{{ selectedEmployee.email }}</a>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-if=\"selectedEmployee.phone\" class=\"info-item\">\r\n              <div class=\"info-label\">Phone</div>\r\n              <div class=\"info-value\">{{ selectedEmployee.phone }}</div>\r\n            </div>\r\n            \r\n            <div v-if=\"selectedEmployee.manager_name\" class=\"info-item\">\r\n              <div class=\"info-label\">Manager</div>\r\n              <div class=\"info-value\">{{ selectedEmployee.manager_name }}</div>\r\n            </div>\r\n            \r\n            <div v-if=\"directReports.length > 0\" class=\"info-item\">\r\n              <div class=\"info-label\">Direct Reports</div>\r\n              <div class=\"info-value\">\r\n                <ul class=\"direct-reports-list\">\r\n                  <li v-for=\"report in directReports\" :key=\"report.id\">\r\n                    {{ report.first_name }} {{ report.last_name }}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <template #footer>\r\n          <Button \r\n            label=\"View Profile\" \r\n            icon=\"pi pi-user\" \r\n            @click=\"goToEmployeeProfile\" \r\n          />\r\n        </template>\r\n      </Dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed, onMounted, nextTick } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import Button from 'primevue/button';\r\n  import Dropdown from 'primevue/dropdown';\r\n  import InputText from 'primevue/inputtext';\r\n  import Dialog from 'primevue/dialog';\r\n  import Divider from 'primevue/divider';\r\n  import Tag from 'primevue/tag';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  import OrgNode from '../components/orgchart/OrgNode.vue';\r\n  \r\n  export default {\r\n    name: 'OrgChartView',\r\n    components: {\r\n      Button,\r\n      Dropdown,\r\n      InputText,\r\n      Dialog,\r\n      Divider,\r\n      Tag,\r\n      ProgressSpinner,\r\n      OrgNode\r\n    },\r\n    \r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n      \r\n      // State\r\n      const loading = ref(false);\r\n      const error = ref(null);\r\n      const orgData = ref([]);\r\n      const departments = ref([]);\r\n      const rootNode = ref(null);\r\n      const zoomLevel = ref(1);\r\n      const showDepartments = ref(true);\r\n      const selectedDepartment = ref(null);\r\n      const searchTerm = ref('');\r\n      const highlightedNodes = ref([]);\r\n      const employeeDialogVisible = ref(false);\r\n      const selectedEmployee = ref(null);\r\n      const directReports = ref([]);\r\n      \r\n      // DOM refs\r\n      const chartContainer = ref(null);\r\n      const orgchart = ref(null);\r\n      \r\n      // Computed properties\r\n      const departmentOptions = computed(() => {\r\n        const options = [{ id: null, name: 'All Departments' }];\r\n        departments.value.forEach(dept => {\r\n          options.push(dept);\r\n        });\r\n        return options;\r\n      });\r\n      \r\n      // Methods\r\n      const loadOrgData = async () => {\r\n        try {\r\n          loading.value = true;\r\n          error.value = null;\r\n          \r\n          // Fetch org chart data\r\n          await store.dispatch('users/fetchOrgChart');\r\n          orgData.value = store.state.users.orgChart;\r\n          \r\n          // Fetch departments\r\n          await store.dispatch('departments/fetchDepartments');\r\n          departments.value = store.state.departments.list;\r\n          \r\n          // Build tree structure\r\n          buildOrgTree();\r\n        } catch (err) {\r\n          console.error('Error loading org chart data:', err);\r\n          error.value = 'Failed to load organization data. Please try again.';\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const buildOrgTree = () => {\r\n        if (!orgData.value || orgData.value.length === 0) {\r\n          rootNode.value = null;\r\n          return;\r\n        }\r\n        \r\n        // Create nodes map\r\n        const nodesMap = new Map();\r\n        \r\n        // First pass: Create all nodes\r\n        orgData.value.forEach(employee => {\r\n          nodesMap.set(employee.id, {\r\n            ...employee,\r\n            children: []\r\n          });\r\n        });\r\n        \r\n        // Second pass: Build parent-child relationships\r\n        let root = null;\r\n        \r\n        orgData.value.forEach(employee => {\r\n          const node = nodesMap.get(employee.id);\r\n          \r\n          if (employee.manager_id) {\r\n            // Add to parent's children\r\n            const parent = nodesMap.get(employee.manager_id);\r\n            if (parent) {\r\n              parent.children.push(node);\r\n            }\r\n          } else {\r\n            // This is a root node (no manager)\r\n            root = node;\r\n          }\r\n        });\r\n        \r\n        // Sort children by last name in each node\r\n        const sortChildren = (node) => {\r\n          if (node.children && node.children.length > 0) {\r\n            node.children.sort((a, b) => \r\n              a.last_name.localeCompare(b.last_name) || \r\n              a.first_name.localeCompare(b.first_name)\r\n            );\r\n            \r\n            node.children.forEach(child => sortChildren(child));\r\n          }\r\n        };\r\n        \r\n        if (root) {\r\n          sortChildren(root);\r\n        }\r\n        \r\n        rootNode.value = root;\r\n      };\r\n      \r\n      const zoomIn = () => {\r\n        zoomLevel.value = Math.min(2, zoomLevel.value + 0.1);\r\n      };\r\n      \r\n      const zoomOut = () => {\r\n        zoomLevel.value = Math.max(0.5, zoomLevel.value - 0.1);\r\n      };\r\n      \r\n      const toggleDepartments = () => {\r\n        showDepartments.value = !showDepartments.value;\r\n      };\r\n      \r\n      const filterByDepartment = () => {\r\n        if (!selectedDepartment.value || selectedDepartment.value.id === null) {\r\n          highlightedNodes.value = [];\r\n          buildOrgTree(); // Reset to original tree\r\n          return;\r\n        }\r\n        \r\n        // Find employees in the selected department\r\n        const deptEmployees = orgData.value.filter(\r\n          emp => emp.department_id === selectedDepartment.value.id\r\n        );\r\n        \r\n        // Highlight these nodes\r\n        highlightedNodes.value = deptEmployees.map(emp => emp.id);\r\n        \r\n        // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\r\n        buildOrgTree();\r\n      };\r\n      \r\n      const filterBySearch = () => {\r\n        if (!searchTerm.value.trim()) {\r\n          highlightedNodes.value = [];\r\n          buildOrgTree(); // Reset to original tree\r\n          return;\r\n        }\r\n        \r\n        const term = searchTerm.value.toLowerCase();\r\n        \r\n        // Find employees matching the search term\r\n        const matchingEmployees = orgData.value.filter(\r\n          emp => emp.first_name.toLowerCase().includes(term) || \r\n                 emp.last_name.toLowerCase().includes(term) ||\r\n                 emp.job_title?.toLowerCase().includes(term) ||\r\n                 emp.email.toLowerCase().includes(term)\r\n        );\r\n        \r\n        // Highlight these nodes\r\n        highlightedNodes.value = matchingEmployees.map(emp => emp.id);\r\n        \r\n        // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\r\n        buildOrgTree();\r\n      };\r\n      \r\n      const viewEmployeeDetails = async (employee) => {\r\n        selectedEmployee.value = employee;\r\n        \r\n        // Get direct reports\r\n        try {\r\n          const reports = await store.dispatch('users/fetchDirectReports', employee.id);\r\n          directReports.value = reports || [];\r\n        } catch (error) {\r\n          console.error('Error fetching direct reports:', error);\r\n          directReports.value = [];\r\n        }\r\n        \r\n        employeeDialogVisible.value = true;\r\n      };\r\n      \r\n      const goToEmployeeProfile = () => {\r\n        if (selectedEmployee.value) {\r\n          router.push(`/users/${selectedEmployee.value.id}`);\r\n        }\r\n      };\r\n      \r\n      const getInitials = (employee) => {\r\n        if (!employee) return '';\r\n        \r\n        const first = employee.first_name.charAt(0).toUpperCase();\r\n        const last = employee.last_name.charAt(0).toUpperCase();\r\n        \r\n        return `${first}${last}`;\r\n      };\r\n      \r\n      const exportOrgChart = () => {\r\n        // In a real application, this would create a PDF or image export\r\n        // For this implementation, we'll just show a message\r\n        store.dispatch('showToast', {\r\n          severity: 'info',\r\n          summary: 'Export',\r\n          detail: 'Organization chart export functionality would be implemented here'\r\n        });\r\n      };\r\n      \r\n      // Load data when component mounts\r\n      onMounted(async () => {\r\n        await loadOrgData();\r\n        \r\n        // Center the chart after it's rendered\r\n        nextTick(() => {\r\n          if (chartContainer.value && orgchart.value) {\r\n            chartContainer.value.scrollLeft = \r\n              (orgchart.value.scrollWidth - chartContainer.value.clientWidth) / 2;\r\n          }\r\n        });\r\n      });\r\n      \r\n      return {\r\n        loading,\r\n        error,\r\n        rootNode,\r\n        departments,\r\n        departmentOptions,\r\n        zoomLevel,\r\n        showDepartments,\r\n        selectedDepartment,\r\n        searchTerm,\r\n        highlightedNodes,\r\n        employeeDialogVisible,\r\n        selectedEmployee,\r\n        directReports,\r\n        chartContainer,\r\n        orgchart,\r\n        \r\n        loadOrgData,\r\n        zoomIn,\r\n        zoomOut,\r\n        toggleDepartments,\r\n        filterByDepartment,\r\n        filterBySearch,\r\n        viewEmployeeDetails,\r\n        goToEmployeeProfile,\r\n        getInitials,\r\n        exportOrgChart\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .orgchart-container {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .page-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .page-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n  }\r\n  \r\n  .loading-card, .error-card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 3rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .spinner {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .error-icon {\r\n    font-size: 3rem;\r\n    color: var(--danger-color);\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .orgchart-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .orgchart-actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .zoom-controls {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .zoom-level {\r\n    margin: 0 0.5rem;\r\n    min-width: 3rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .orgchart-filters {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .department-filter {\r\n    width: 200px;\r\n  }\r\n  \r\n  .search-box {\r\n    width: 200px;\r\n  }\r\n  \r\n  .chart-container {\r\n    overflow: auto;\r\n    border: 1px solid var(--surface-border);\r\n    padding: 2rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    min-height: 500px;\r\n    background-color: var(--surface-ground);\r\n  }\r\n  \r\n  .orgchart {\r\n    transform-origin: center top;\r\n    transition: transform 0.3s;\r\n  }\r\n  \r\n  /* Employee details styles */\r\n  .employee-details {\r\n    padding: 1rem 0;\r\n  }\r\n  \r\n  .employee-header {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .employee-avatar {\r\n    width: 80px;\r\n    height: 80px;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    margin-right: 1.5rem;\r\n    background-color: var(--primary-color);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .employee-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  .employee-initials {\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n    color: white;\r\n  }\r\n  \r\n  .employee-title h3 {\r\n    margin: 0 0 0.5rem 0;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  .employee-position {\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .department-tag {\r\n    font-size: 0.75rem;\r\n  }\r\n  \r\n  .employee-info {\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .info-item {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .info-label {\r\n    font-weight: 500;\r\n    margin-bottom: 0.25rem;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .info-value {\r\n    color: var(--text-color);\r\n  }\r\n  \r\n  .direct-reports-list {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n  }\r\n  \r\n  .direct-reports-list li {\r\n    padding: 0.25rem 0;\r\n  }\r\n  \r\n  /* Responsive adjustments */\r\n  @media screen and (max-width: 768px) {\r\n    .page-header {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .page-actions {\r\n      margin-top: 1rem;\r\n      width: 100%;\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .orgchart-actions {\r\n      flex-direction: column;\r\n      align-items: stretch;\r\n    }\r\n    \r\n    .zoom-controls {\r\n      margin-bottom: 1rem;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .orgchart-filters {\r\n      flex-direction: column;\r\n      width: 100%;\r\n    }\r\n    \r\n    .department-filter,\r\n    .search-box {\r\n      width: 100%;\r\n    }\r\n    \r\n    .chart-container {\r\n      min-height: 400px;\r\n    }\r\n    \r\n    .employee-header {\r\n      flex-direction: column;\r\n      text-align: center;\r\n    }\r\n    \r\n    .employee-avatar {\r\n      margin-right: 0;\r\n      margin-bottom: 1rem;\r\n    }\r\n  }\r\n  </style>","/home/pi/projects/intranet/frontend/src/views/Departments.vue",["71"],"","/home/pi/projects/intranet/frontend/src/views/Documents.vue",["72","73","74"],"<template>\r\n    <div class=\"documents-container\">\r\n      <div class=\"page-header\">\r\n        <h1 class=\"page-title\">Document Repository</h1>\r\n        <div class=\"page-actions\">\r\n          <Button \r\n            label=\"Upload Document\" \r\n            icon=\"pi pi-upload\" \r\n            class=\"p-button-primary\" \r\n            @click=\"openUploadAppDialog\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Filters -->\r\n      <div class=\"card filter-card\">\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-4\">\r\n            <span class=\"p-input-icon-left w-full\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText \r\n                v-model=\"filters.searchTerm\" \r\n                placeholder=\"Search documents\" \r\n                class=\"w-full\"\r\n                @keyup.enter=\"loadDocuments\"\r\n              />\r\n            </span>\r\n          </div>\r\n          \r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.category\"\r\n              :options=\"categories\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"value\"\r\n              placeholder=\"Select category\"\r\n              class=\"w-full\"\r\n              @change=\"loadDocuments\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.departmentId\"\r\n              :options=\"departments\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"id\"\r\n              placeholder=\"Select department\"\r\n              class=\"w-full\"\r\n              @change=\"loadDocuments\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"col-12 md:col-2\">\r\n            <Button \r\n              icon=\"pi pi-filter-slash\" \r\n              label=\"Clear\" \r\n              class=\"p-button-outlined w-full\" \r\n              @click=\"clearFilters\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"card loading-card\">\r\n        <ProgressSpinner class=\"spinner\" />\r\n        <p>Loading documents...</p>\r\n      </div>\r\n      \r\n      <!-- Empty state -->\r\n      <div v-else-if=\"documents.length === 0\" class=\"card empty-state\">\r\n        <i class=\"pi pi-folder-open empty-icon\"></i>\r\n        <h3>No documents found</h3>\r\n        <p>There are no documents matching your criteria. Try adjusting your filters or upload a new document.</p>\r\n        <Button label=\"Upload Document\" icon=\"pi pi-upload\" @click=\"openUploadAppDialog\" />\r\n      </div>\r\n      \r\n      <!-- Documents list -->\r\n      <div v-else class=\"document-list\">\r\n        <div class=\"grid\">\r\n          <div \r\n            v-for=\"doc in documents\" \r\n            :key=\"doc.id\" \r\n            class=\"col-12 md:col-6 lg:col-4\"\r\n          >\r\n            <div class=\"card document-card\">\r\n              <div class=\"document-card-content\">\r\n                <div class=\"document-icon-container\">\r\n                  <i class=\"document-icon pi\" :class=\"getDocumentIcon(doc.file_type)\"></i>\r\n                </div>\r\n                \r\n                <div class=\"document-details\">\r\n                  <div class=\"document-title\">{{ doc.title }}</div>\r\n                  <div class=\"document-meta\">\r\n                    <span class=\"document-type\">{{ formatFileType(doc.file_type) }}</span>\r\n                    <span class=\"document-date\">{{ formatDate(doc.created_at) }}</span>\r\n                  </div>\r\n                  <div class=\"document-info\">\r\n                    <span v-if=\"doc.department_name\" class=\"document-department\">\r\n                      <i class=\"pi pi-building\"></i> {{ doc.department_name }}\r\n                    </span>\r\n                    <span class=\"document-size\">\r\n                      <i class=\"pi pi-file\"></i> {{ formatFileSize(doc.file_size) }}\r\n                    </span>\r\n                  </div>\r\n                  <div v-if=\"doc.description\" class=\"document-description\">\r\n                    {{ truncateText(doc.description, 100) }}\r\n                  </div>\r\n                  <Tag \r\n                    v-if=\"doc.is_public\" \r\n                    severity=\"info\" \r\n                    value=\"Public\" \r\n                    class=\"document-tag\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"document-actions\">\r\n                <Button \r\n                  icon=\"pi pi-eye\" \r\n                  class=\"p-button-rounded p-button-text\" \r\n                  @click=\"viewDocument(doc.id)\"\r\n                  tooltip=\"View\"\r\n                  tooltipOptions=\"{ position: 'top' }\"\r\n                />\r\n                <Button \r\n                  icon=\"pi pi-download\" \r\n                  class=\"p-button-rounded p-button-text\" \r\n                  @click=\"downloadDocument(doc)\"\r\n                  tooltip=\"Download\"\r\n                  tooltipOptions=\"{ position: 'top' }\"\r\n                />\r\n                <Button \r\n                  v-if=\"canEditDocument(doc)\"\r\n                  icon=\"pi pi-pencil\" \r\n                  class=\"p-button-rounded p-button-text\" \r\n                  @click=\"editDocument(doc)\"\r\n                  tooltip=\"Edit\"\r\n                  tooltipOptions=\"{ position: 'top' }\"\r\n                />\r\n                <Button \r\n                  v-if=\"canDeleteDocument(doc)\"\r\n                  icon=\"pi pi-trash\" \r\n                  class=\"p-button-rounded p-button-text p-button-danger\" \r\n                  @click=\"confirmDeleteDocument(doc)\"\r\n                  tooltip=\"Delete\"\r\n                  tooltipOptions=\"{ position: 'top' }\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Pagination -->\r\n        <div class=\"pagination-container\">\r\n          <Paginator \r\n            v-if=\"pagination.total > pagination.per_page\"\r\n            :rows=\"pagination.per_page\" \r\n            :totalRecords=\"pagination.total\"\r\n            :first=\"(pagination.current_page - 1) * pagination.per_page\"\r\n            :rowsPerPageOptions=\"[10, 20, 50]\"\r\n            @page=\"onPageChange($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Upload document dialog -->\r\n      <Dialog \r\n        v-model:visible=\"uploadDialogVisible\" \r\n        header=\"Upload Document\" \r\n        :modal=\"true\"\r\n        :style=\"{ width: '500px' }\"\r\n        :closable=\"!uploading\"\r\n        :closeOnEscape=\"!uploading\"\r\n      >\r\n        <div class=\"upload-form\">\r\n          <div class=\"form-field\">\r\n            <label for=\"documentTitle\">Title <span class=\"required\">*</span></label>\r\n            <InputText \r\n              id=\"documentTitle\" \r\n              v-model=\"documentForm.title\" \r\n              class=\"w-full\"\r\n              :disabled=\"uploading\"\r\n              :class=\"{ 'p-invalid': submitted && !documentForm.title }\"\r\n            />\r\n            <small v-if=\"submitted && !documentForm.title\" class=\"p-error\">Title is required</small>\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"documentDescription\">Description</label>\r\n            <Textarea \r\n              id=\"documentDescription\" \r\n              v-model=\"documentForm.description\" \r\n              rows=\"3\" \r\n              class=\"w-full\"\r\n              :disabled=\"uploading\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"documentCategory\">Category</label>\r\n            <Dropdown\r\n              id=\"documentCategory\"\r\n              v-model=\"documentForm.category\"\r\n              :options=\"categories\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"value\"\r\n              placeholder=\"Select category\"\r\n              class=\"w-full\"\r\n              :disabled=\"uploading\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"documentDepartment\">Department</label>\r\n            <Dropdown\r\n              id=\"documentDepartment\"\r\n              v-model=\"documentForm.departmentId\"\r\n              :options=\"departments\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"id\"\r\n              placeholder=\"Select department\"\r\n              class=\"w-full\"\r\n              :disabled=\"uploading\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <div class=\"flex align-items-center\">\r\n              <Checkbox \r\n                id=\"isPublic\" \r\n                v-model=\"documentForm.isPublic\" \r\n                :binary=\"true\"\r\n                :disabled=\"uploading\"\r\n              />\r\n              <label for=\"isPublic\" class=\"ml-2\">Make document public</label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-field file-upload\">\r\n            <label>Document File <span class=\"required\">*</span></label>\r\n            <FileUpload\r\n              name=\"document\"\r\n              :multiple=\"false\"\r\n              accept=\"application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/plain, image/jpeg, image/png\"\r\n              :maxFileSize=\"10000000\"\r\n              @select=\"onFileSelect\"\r\n              @clear=\"onFileClear\"\r\n              :disabled=\"uploading\"\r\n              :auto=\"false\"\r\n              chooseLabel=\"Select Document\"\r\n              :class=\"{ 'p-invalid': submitted && !selectedFile }\"\r\n            >\r\n              <template #empty>\r\n                <p>Drag and drop a file here or click to browse.</p>\r\n                <p class=\"text-sm\">Supported formats: PDF, Word, Excel, PowerPoint, Text, and Images</p>\r\n                <p class=\"text-sm\">Maximum file size: 10MB</p>\r\n              </template>\r\n            </FileUpload>\r\n            <small v-if=\"submitted && !selectedFile\" class=\"p-error\">Document file is required</small>\r\n          </div>\r\n          \r\n          <ProgressBar v-if=\"uploading\" :value=\"uploadProgress\" class=\"mt-3\" />\r\n        </div>\r\n        \r\n        <template #footer>\r\n          <Button \r\n            label=\"Cancel\" \r\n            icon=\"pi pi-times\" \r\n            class=\"p-button-text\" \r\n            @click=\"closeUploadAppDialog\" \r\n            :disabled=\"uploading\"\r\n          />\r\n          <Button \r\n            label=\"Upload\" \r\n            icon=\"pi pi-upload\" \r\n            @click=\"uploadDocument\" \r\n            :loading=\"uploading\"\r\n          />\r\n        </template>\r\n      </Dialog>\r\n      \r\n      <!-- Edit document dialog -->\r\n      <Dialog \r\n        v-model:visible=\"editDialogVisible\" \r\n        header=\"Edit Document\" \r\n        :modal=\"true\"\r\n        :style=\"{ width: '500px' }\"\r\n      >\r\n        <div class=\"edit-form\" v-if=\"selectedDocument\">\r\n          <div class=\"form-field\">\r\n            <label for=\"editTitle\">Title <span class=\"required\">*</span></label>\r\n            <InputText \r\n              id=\"editTitle\" \r\n              v-model=\"editForm.title\" \r\n              class=\"w-full\"\r\n              :class=\"{ 'p-invalid': editSubmitted && !editForm.title }\"\r\n            />\r\n            <small v-if=\"editSubmitted && !editForm.title\" class=\"p-error\">Title is required</small>\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"editDescription\">Description</label>\r\n            <Textarea \r\n              id=\"editDescription\" \r\n              v-model=\"editForm.description\" \r\n              rows=\"3\" \r\n              class=\"w-full\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"editCategory\">Category</label>\r\n            <Dropdown\r\n              id=\"editCategory\"\r\n              v-model=\"editForm.category\"\r\n              :options=\"categories\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"value\"\r\n              placeholder=\"Select category\"\r\n              class=\"w-full\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <label for=\"editDepartment\">Department</label>\r\n            <Dropdown\r\n              id=\"editDepartment\"\r\n              v-model=\"editForm.departmentId\"\r\n              :options=\"departments\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"id\"\r\n              placeholder=\"Select department\"\r\n              class=\"w-full\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-field\">\r\n            <div class=\"flex align-items-center\">\r\n              <Checkbox \r\n                id=\"editIsPublic\" \r\n                v-model=\"editForm.isPublic\" \r\n                :binary=\"true\"\r\n              />\r\n              <label for=\"editIsPublic\" class=\"ml-2\">Make document public</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <template #footer>\r\n          <Button \r\n            label=\"Cancel\" \r\n            icon=\"pi pi-times\" \r\n            class=\"p-button-text\" \r\n            @click=\"closeEditAppDialog\"\r\n          />\r\n          <Button \r\n            label=\"Save\" \r\n            icon=\"pi pi-check\" \r\n            @click=\"saveDocumentChanges\"\r\n          />\r\n        </template>\r\n      </Dialog>\r\n      \r\n      <!-- Delete confirmation dialog -->\r\n      <ConfirmDialog></ConfirmDialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, reactive, computed, onMounted } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import { useConfirm } from 'primevue/useconfirm';\r\n  import InputText from 'primevue/inputtext';\r\n  import Button from 'primevue/button';\r\n  import Dropdown from 'primevue/dropdown';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  import ProgressBar from 'primevue/progressbar';\r\n  import FileUpload from 'primevue/fileupload';\r\n  import Paginator from 'primevue/paginator';\r\n  import Dialog from 'primevue/dialog';\r\n  import Textarea from 'primevue/textarea';\r\n  import Checkbox from 'primevue/checkbox';\r\n  import Tag from 'primevue/tag';\r\n  import ConfirmDialog from 'primevue/confirmdialog';\r\n  import api from '../services/api';\r\n  \r\n  export default {\r\n    name: 'DocumentsView',\r\n    components: {\r\n      InputText,\r\n      Button,\r\n      Dropdown,\r\n      ProgressSpinner,\r\n      ProgressBar,\r\n      FileUpload,\r\n      Paginator,\r\n      Dialog,\r\n      Textarea,\r\n      Checkbox,\r\n      Tag,\r\n      ConfirmDialog\r\n    },\r\n    \r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n      const confirm = useConfirm();\r\n      \r\n      // State\r\n      const loading = ref(false);\r\n      const documents = ref([]);\r\n      const selectedDocument = ref(null);\r\n      const selectedFile = ref(null);\r\n      const uploading = ref(false);\r\n      const uploadProgress = ref(0);\r\n      const submitted = ref(false);\r\n      const editSubmitted = ref(false);\r\n      const uploadDialogVisible = ref(false);\r\n      const editDialogVisible = ref(false);\r\n      \r\n      // Pagination\r\n      const pagination = ref({\r\n        current_page: 1,\r\n        per_page: 20,\r\n        total: 0,\r\n        last_page: 1\r\n      });\r\n      \r\n      // Filters\r\n      const filters = reactive({\r\n        searchTerm: '',\r\n        category: null,\r\n        departmentId: null\r\n      });\r\n      \r\n      // Form data\r\n      const documentForm = reactive({\r\n        title: '',\r\n        description: '',\r\n        category: null,\r\n        departmentId: null,\r\n        isPublic: false\r\n      });\r\n      \r\n      const editForm = reactive({\r\n        title: '',\r\n        description: '',\r\n        category: null,\r\n        departmentId: null,\r\n        isPublic: false\r\n      });\r\n      \r\n      // Computed values\r\n      const isAdmin = computed(() => store.getters['auth/isAdmin']);\r\n      const currentUser = computed(() => store.getters['auth/currentUser']);\r\n      \r\n      const categories = computed(() => [\r\n        { name: 'All Categories', value: null },\r\n        { name: 'Report', value: 'report' },\r\n        { name: 'Policy', value: 'policy' },\r\n        { name: 'Procedure', value: 'procedure' },\r\n        { name: 'Form', value: 'form' },\r\n        { name: 'Presentation', value: 'presentation' },\r\n        { name: 'Template', value: 'template' },\r\n        { name: 'Financial', value: 'financial' },\r\n        { name: 'HR', value: 'hr' },\r\n        { name: 'Marketing', value: 'marketing' },\r\n        { name: 'Technical', value: 'technical' },\r\n        { name: 'Other', value: 'other' }\r\n      ]);\r\n      \r\n      const departments = computed(() => {\r\n        const depts = [{ name: 'All Departments', value: null }];\r\n        const departmentsList = store.state.departments?.list || [];\r\n        \r\n        departmentsList.forEach(dept => {\r\n          depts.push({\r\n            name: dept.name,\r\n            id: dept.id\r\n          });\r\n        });\r\n        \r\n        return depts;\r\n      });\r\n      \r\n      // Methods\r\n      const loadDocuments = async (page = 1) => {\r\n        try {\r\n          loading.value = true;\r\n          \r\n          const response = await api.get('/api/documents', {\r\n            params: {\r\n              page,\r\n              limit: pagination.value.per_page,\r\n              search: filters.searchTerm || undefined,\r\n              category: filters.category || undefined,\r\n              departmentId: filters.departmentId || undefined\r\n            }\r\n          });\r\n          \r\n          documents.value = response.data.data;\r\n          pagination.value = response.data.pagination;\r\n        } catch (error) {\r\n          console.error('Error loading documents:', error);\r\n          store.dispatch('showToast', {\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: 'Failed to load documents'\r\n          });\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const onPageChange = (event) => {\r\n        const page = event.page + 1;\r\n        loadDocuments(page);\r\n      };\r\n      \r\n      const clearFilters = () => {\r\n        filters.searchTerm = '';\r\n        filters.category = null;\r\n        filters.departmentId = null;\r\n        loadDocuments();\r\n      };\r\n      \r\n      const openUploadDialog = () => {\r\n        // Reset form\r\n        documentForm.title = '';\r\n        documentForm.description = '';\r\n        documentForm.category = null;\r\n        documentForm.departmentId = currentUser.value?.departmentId || null;\r\n        documentForm.isPublic = false;\r\n        \r\n        selectedFile.value = null;\r\n        submitted.value = false;\r\n        uploadDialogVisible.value = true;\r\n      };\r\n      \r\n      const closeUploadDialog = () => {\r\n        if (uploading.value) return;\r\n        uploadDialogVisible.value = false;\r\n      };\r\n      \r\n      const onFileSelect = (event) => {\r\n        selectedFile.value = event.files[0];\r\n        \r\n        // Auto-fill title from filename if empty\r\n        if (!documentForm.title && selectedFile.value) {\r\n          // Remove extension\r\n          const filename = selectedFile.value.name.replace(/\\.[^/.]+$/, '');\r\n          documentForm.title = filename;\r\n        }\r\n        \r\n        // Auto-detect category from file type if empty\r\n        if (!documentForm.category && selectedFile.value) {\r\n          const fileType = selectedFile.value.type;\r\n          \r\n          if (fileType.includes('pdf')) {\r\n            documentForm.category = 'report';\r\n          } else if (fileType.includes('word')) {\r\n            documentForm.category = 'policy';\r\n          } else if (fileType.includes('excel') || fileType.includes('spreadsheet')) {\r\n            documentForm.category = 'financial';\r\n          } else if (fileType.includes('powerpoint') || fileType.includes('presentation')) {\r\n            documentForm.category = 'presentation';\r\n          }\r\n        }\r\n      };\r\n      \r\n      const onFileClear = () => {\r\n        selectedFile.value = null;\r\n      };\r\n      \r\n      const uploadDocument = async () => {\r\n        submitted.value = true;\r\n        \r\n        // Validate form\r\n        if (!documentForm.title || !selectedFile.value) {\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          uploading.value = true;\r\n          uploadProgress.value = 0;\r\n          \r\n          // Create form data\r\n          const formData = new FormData();\r\n          formData.append('title', documentForm.title);\r\n          formData.append('document', selectedFile.value);\r\n          \r\n          if (documentForm.description) {\r\n            formData.append('description', documentForm.description);\r\n          }\r\n          \r\n          if (documentForm.category) {\r\n            formData.append('category', documentForm.category);\r\n          }\r\n          \r\n          if (documentForm.departmentId) {\r\n            formData.append('departmentId', documentForm.departmentId);\r\n          }\r\n          \r\n          formData.append('isPublic', documentForm.isPublic);\r\n          \r\n          // Upload with progress tracking\r\n          const response = await api.post('/api/documents', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data'\r\n            },\r\n            onUploadProgress: (progressEvent) => {\r\n              uploadProgress.value = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n            }\r\n          });\r\n          \r\n          // Add document to list\r\n          documents.value.unshift(response.data.data);\r\n          \r\n          // Close dialog\r\n          uploadDialogVisible.value = false;\r\n          \r\n          // Show success message\r\n          store.dispatch('showToast', {\r\n            severity: 'success',\r\n            summary: 'Success',\r\n            detail: 'Document uploaded successfully'\r\n          });\r\n        } catch (error) {\r\n          console.error('Error uploading document:', error);\r\n          store.dispatch('showToast', {\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: error.response?.data?.message || 'Failed to upload document'\r\n          });\r\n        } finally {\r\n          uploading.value = false;\r\n        }\r\n      };\r\n      \r\n      const viewDocument = (id) => {\r\n        router.push(`/documents/${id}`);\r\n      };\r\n      \r\n      const downloadDocument = (doc) => {\r\n        // In production, this would trigger a direct download\r\n        if (doc.file_path) {\r\n          window.open(doc.file_path, '_blank');\r\n        }\r\n      };\r\n      \r\n      const canEditDocument = (doc) => {\r\n        if (isAdmin.value) return true;\r\n        return doc.created_by === currentUser.value?.id;\r\n      };\r\n      \r\n      const canDeleteDocument = (doc) => {\r\n        if (isAdmin.value) return true;\r\n        return doc.created_by === currentUser.value?.id;\r\n      };\r\n      \r\n      const editDocument = (doc) => {\r\n        selectedDocument.value = doc;\r\n        \r\n        // Copy values to edit form\r\n        editForm.title = doc.title;\r\n        editForm.description = doc.description || '';\r\n        editForm.category = doc.category;\r\n        editForm.departmentId = doc.department_id;\r\n        editForm.isPublic = doc.is_public;\r\n        \r\n        editSubmitted.value = false;\r\n        editDialogVisible.value = true;\r\n      };\r\n      \r\n      const closeEditDialog = () => {\r\n        editDialogVisible.value = false;\r\n      };\r\n      \r\n      const saveDocumentChanges = async () => {\r\n        editSubmitted.value = true;\r\n        \r\n        // Validate form\r\n        if (!editForm.title) {\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          loading.value = true;\r\n          \r\n          const response = await api.put(`/api/documents/${selectedDocument.value.id}`, {\r\n            title: editForm.title,\r\n            description: editForm.description,\r\n            category: editForm.category,\r\n            departmentId: editForm.departmentId,\r\n            isPublic: editForm.isPublic\r\n          });\r\n          \r\n          // Update document in list\r\n          const index = documents.value.findIndex(d => d.id === selectedDocument.value.id);\r\n          if (index !== -1) {\r\n            documents.value[index] = response.data.data;\r\n          }\r\n          \r\n          // Close dialog\r\n          editDialogVisible.value = false;\r\n          \r\n          // Show success message\r\n          store.dispatch('showToast', {\r\n            severity: 'success',\r\n            summary: 'Success',\r\n            detail: 'Document updated successfully'\r\n          });\r\n        } catch (error) {\r\n          console.error('Error updating document:', error);\r\n          store.dispatch('showToast', {\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: error.response?.data?.message || 'Failed to update document'\r\n          });\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const confirmDeleteDocument = (doc) => {\r\n        confirm.require({\r\n          message: 'Are you sure you want to delete this document?',\r\n          header: 'Delete Confirmation',\r\n          icon: 'pi pi-exclamation-triangle',\r\n          acceptClass: 'p-button-danger',\r\n          accept: () => deleteDocument(doc),\r\n          reject: () => {}\r\n        });\r\n      };\r\n      \r\n      const deleteDocument = async (doc) => {\r\n        try {\r\n          loading.value = true;\r\n          \r\n          await api.delete(`/api/documents/${doc.id}`);\r\n          \r\n          // Remove document from list\r\n          documents.value = documents.value.filter(d => d.id !== doc.id);\r\n          \r\n          // Show success message\r\n          store.dispatch('showToast', {\r\n            severity: 'success',\r\n            summary: 'Success',\r\n            detail: 'Document deleted successfully'\r\n          });\r\n        } catch (error) {\r\n          console.error('Error deleting document:', error);\r\n          store.dispatch('showToast', {\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: error.response?.data?.message || 'Failed to delete document'\r\n          });\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const formatDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const date = new Date(dateString);\r\n        return date.toLocaleDateString('en-US', {\r\n          year: 'numeric',\r\n          month: 'short',\r\n          day: 'numeric'\r\n        });\r\n      };\r\n      \r\n      const formatFileSize = (bytes) => {\r\n        if (!bytes) return '0 Bytes';\r\n        \r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        \r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n      };\r\n      \r\n      const formatFileType = (type) => {\r\n        if (!type) return 'Unknown';\r\n        \r\n        const lookup = {\r\n          'application/pdf': 'PDF',\r\n          'application/msword': 'Word',\r\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word',\r\n          'application/vnd.ms-excel': 'Excel',\r\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel',\r\n          'application/vnd.ms-powerpoint': 'PowerPoint',\r\n          'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'PowerPoint',\r\n          'text/plain': 'Text',\r\n          'image/jpeg': 'JPEG',\r\n          'image/png': 'PNG'\r\n        };\r\n        \r\n        return lookup[type] || type.split('/')[1].toUpperCase();\r\n      };\r\n      \r\n      const getDocumentIcon = (fileType) => {\r\n        if (!fileType) return 'pi-file-o';\r\n        \r\n        const type = fileType.toLowerCase();\r\n        \r\n        if (type.includes('pdf')) return 'pi-file-pdf';\r\n        if (type.includes('word') || type.includes('document')) return 'pi-file-word';\r\n        if (type.includes('excel') || type.includes('sheet')) return 'pi-file-excel';\r\n        if (type.includes('powerpoint') || type.includes('presentation')) return 'pi-file-powerpoint';\r\n        if (type.includes('zip') || type.includes('rar')) return 'pi-file-archive';\r\n        if (type.includes('jpg') || type.includes('jpeg') || \r\n            type.includes('png') || type.includes('gif')) return 'pi-file-image';\r\n        if (type.includes('text') || type.includes('txt')) return 'pi-file-lines';\r\n        \r\n        return 'pi-file-o';\r\n      };\r\n      \r\n      const truncateText = (text, maxLength) => {\r\n        if (!text) return '';\r\n        if (text.length <= maxLength) return text;\r\n        \r\n        return text.substr(0, maxLength) + '...';\r\n      };\r\n      \r\n      // Load departments on mount\r\n      onMounted(async () => {\r\n        try {\r\n          await store.dispatch('departments/fetchDepartments');\r\n          loadDocuments();\r\n        } catch (error) {\r\n          console.error('Error initializing documents page:', error);\r\n        }\r\n      });\r\n      \r\n      return {\r\n        // State\r\n        loading,\r\n        documents,\r\n        pagination,\r\n        filters,\r\n        uploadDialogVisible,\r\n        editDialogVisible,\r\n        documentForm,\r\n        editForm,\r\n        selectedDocument,\r\n        selectedFile,\r\n        uploading,\r\n        uploadProgress,\r\n        submitted,\r\n        editSubmitted,\r\n        \r\n        // Computed\r\n        categories,\r\n        departments,\r\n        \r\n        // Methods\r\n        loadDocuments,\r\n        onPageChange,\r\n        clearFilters,\r\n        openUploadDialog,\r\n        closeUploadDialog,\r\n        onFileSelect,\r\n        onFileClear,\r\n        uploadDocument,\r\n        viewDocument,\r\n        downloadDocument,\r\n        canEditDocument,\r\n        canDeleteDocument,\r\n        editDocument,\r\n        closeEditDialog,\r\n        saveDocumentChanges,\r\n        confirmDeleteDocument,\r\n        \r\n        // Formatters\r\n        formatDate,\r\n        formatFileSize,\r\n        formatFileType,\r\n        getDocumentIcon,\r\n        truncateText\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .documents-container {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .page-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .page-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n  }\r\n  \r\n  .filter-card {\r\n    margin-bottom: 1.5rem;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .loading-card, .empty-state {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 3rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .spinner {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .empty-icon {\r\n    font-size: 3rem;\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .document-list {\r\n    margin-bottom: 2rem;\r\n  }\r\n  \r\n  .document-card {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n    transition: transform 0.2s;\r\n  }\r\n  \r\n  .document-card:hover {\r\n    transform: translateY(-3px);\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .document-card-content {\r\n    display: flex;\r\n    padding: 1rem;\r\n    flex: 1;\r\n  }\r\n  \r\n  .document-icon-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border-radius: 0.5rem;\r\n    margin-right: 1rem;\r\n    background-color: rgba(59, 130, 246, 0.1);\r\n  }\r\n  \r\n  .document-icon {\r\n    font-size: 1.5rem;\r\n    color: var(--primary-color);\r\n  }\r\n  \r\n  .document-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .document-title {\r\n    font-weight: 600;\r\n    font-size: 1rem;\r\n    margin-bottom: 0.25rem;\r\n  }\r\n  \r\n  .document-meta {\r\n    display: flex;\r\n    font-size: 0.75rem;\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .document-type {\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .document-info {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 0.75rem;\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .document-department, .document-size {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .document-department i, .document-size i {\r\n    margin-right: 0.25rem;\r\n  }\r\n  \r\n  .document-description {\r\n    font-size: 0.875rem;\r\n    margin-bottom: 0.5rem;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .document-tag {\r\n    margin-top: 0.25rem;\r\n  }\r\n  \r\n  .document-actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    padding: 0.5rem;\r\n    border-top: 1px solid var(--surface-border);\r\n  }\r\n  \r\n  .pagination-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .form-field {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .form-field label {\r\n    display: block;\r\n    margin-bottom: 0.5rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .form-field .required {\r\n    color: var(--danger-color);\r\n  }\r\n  \r\n  @media screen and (max-width: 768px) {\r\n    .page-header {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .page-actions {\r\n      margin-top: 1rem;\r\n      width: 100%;\r\n    }\r\n    \r\n    .page-actions button {\r\n      width: 100%;\r\n    }\r\n    \r\n    .document-card-content {\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .document-icon-container {\r\n      margin-right: 0;\r\n      margin-bottom: 1rem;\r\n    }\r\n  }\r\n  </style>\r\n<!-- \r\n  export default {\r\n    name: 'DocumentsView',\r\n    components: {\r\n      InputText,\r\n      Button,\r\n      Dropdown,\r\n      ProgressSpinner,\r\n      ProgressBar,\r\n      FileUpload,\r\n      Paginator,\r\n      Dialog,\r\n      Textarea,\r\n      Checkbox,\r\n      Tag,\r\n      ConfirmDialog-->","/home/pi/projects/intranet/frontend/src/views/Calendar.vue",["75"],"<template>\r\n  <div class=\"calendar-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Calendar</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Event\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewEventAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <div class=\"calendar-toolbar\">\r\n        <div class=\"view-buttons\">\r\n          <SelectButton v-model=\"calendarView\" :options=\"viewOptions\" />\r\n        </div>\r\n        <div class=\"month-navigation\">\r\n          <Button \r\n            icon=\"pi pi-chevron-left\" \r\n            class=\"p-button-text\" \r\n            @click=\"previousPeriod\" \r\n          />\r\n          <h2 class=\"calendar-title\">{{ currentViewTitle }}</h2>\r\n          <Button \r\n            icon=\"pi pi-chevron-right\" \r\n            class=\"p-button-text\" \r\n            @click=\"nextPeriod\" \r\n          />\r\n        </div>\r\n        <div class=\"filter-buttons\">\r\n          <MultiSelect \r\n            v-model=\"selectedAppDepartments\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            placeholder=\"All AppDepartments\" \r\n            class=\"departments-filter\" \r\n            :maxSelectedLabels=\"1\"\r\n          />\r\n          <ToggleButton \r\n            v-model=\"showOnlyMyEvents\" \r\n            onLabel=\"My Events\" \r\n            offLabel=\"All Events\" \r\n            onIcon=\"pi pi-user\" \r\n            offIcon=\"pi pi-users\" \r\n            class=\"ml-2\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"calendar-loading\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- Calendar view -->\r\n      <div v-else class=\"calendar-view\">\r\n        <!-- Month view -->\r\n        <FullCalendar \r\n          v-if=\"calendarView === 'month'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarOptions\"\r\n        />\r\n\r\n        <!-- Week view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'week'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarWeekOptions\"\r\n        />\r\n\r\n        <!-- Day view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'day'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarDayOptions\"\r\n        />\r\n\r\n        <!-- List view -->\r\n        <FullCalendar \r\n          v-else-if=\"calendarView === 'list'\" \r\n          ref=\"fullCalendar\"\r\n          :options=\"calendarListOptions\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Event Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDialogVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New Event' : 'Edit Event'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid\"\r\n    >\r\n      <div class=\"event-form\">\r\n        <div class=\"field\">\r\n          <label for=\"title\">Title *</label>\r\n          <InputText \r\n            id=\"title\" \r\n            v-model=\"event.title\" \r\n            required \r\n            autofocus \r\n            :class=\"{ 'p-invalid': submitted && !event.title }\"\r\n          />\r\n          <small v-if=\"submitted && !event.title\" class=\"p-error\">Title is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"description\">Description</label>\r\n          <Textarea \r\n            id=\"description\" \r\n            v-model=\"event.description\" \r\n            rows=\"3\" \r\n            autoResize \r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>All Day</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.allDay\" binary id=\"allDay\" />\r\n            <label for=\"allDay\">Event runs all day</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Date/Time *</label>\r\n          <div class=\"date-time-fields\">\r\n            <div class=\"start-datetime\">\r\n              <Calendar \r\n                v-model=\"event.startDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"Start Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.startDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.startDate\" class=\"p-error\">Start date is required.</small>\r\n            </div>\r\n\r\n            <div class=\"end-datetime\">\r\n              <Calendar \r\n                v-model=\"event.endDate\" \r\n                dateFormat=\"mm/dd/yy\" \r\n                placeholder=\"End Date\" \r\n                :showTime=\"!event.allDay\"\r\n                :timeOnly=\"false\" \r\n                :showIcon=\"true\"\r\n                :class=\"{ 'p-invalid': submitted && !event.endDate }\"\r\n              />\r\n              <small v-if=\"submitted && !event.endDate\" class=\"p-error\">End date is required.</small>\r\n              <small v-if=\"dateRangeError\" class=\"p-error\">End date must be after start date.</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"location\">Location</label>\r\n          <InputText id=\"location\" v-model=\"event.location\" />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"departmentId\">Department</label>\r\n          <Dropdown \r\n            id=\"departmentId\" \r\n            v-model=\"event.departmentId\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Department\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label>Visibility</label>\r\n          <div class=\"field-checkbox\">\r\n            <Checkbox v-model=\"event.isCompanyWide\" binary id=\"isCompanyWide\" />\r\n            <label for=\"isCompanyWide\">Company-wide event</label>\r\n          </div>\r\n          <small>If checked, all employees will see this event</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"attendees\">Attendees</label>\r\n          <MultiSelect \r\n            id=\"attendees\" \r\n            v-model=\"event.attendees\" \r\n            :options=\"users\" \r\n            optionLabel=\"fullName\" \r\n            optionValue=\"id\" \r\n            placeholder=\"Select Attendees\"\r\n            display=\"chip\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeEventAppDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && canDeleteEvent\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteEvent\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveEvent\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Event Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"eventDetailsVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"selectedEvent.title\" \r\n      :modal=\"true\"\r\n    >\r\n      <div v-if=\"selectedEvent\" class=\"event-details\">\r\n        <div class=\"event-detail-item\">\r\n          <i class=\"pi pi-calendar\"></i>\r\n          <span v-if=\"selectedEvent.allDay\">\r\n            {{ formatDate(selectedEvent.startTime) }}\r\n            <span v-if=\"!isSameDay(selectedEvent.startTime, selectedEvent.endTime)\">\r\n              - {{ formatDate(selectedEvent.endTime) }}\r\n            </span>\r\n            <Tag value=\"All Day\" class=\"ml-2\" />\r\n          </span>\r\n          <span v-else>\r\n            {{ formatDateTime(selectedEvent.startTime) }} - {{ formatTime(selectedEvent.endTime) }}\r\n          </span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.location\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-map-marker\"></i>\r\n          <span>{{ selectedEvent.location }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.description\" class=\"event-description\">\r\n          {{ selectedEvent.description }}\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.department_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-sitemap\"></i>\r\n          <span>Department: {{ selectedEvent.department_name }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedEvent.created_by_name\" class=\"event-detail-item\">\r\n          <i class=\"pi pi-user\"></i>\r\n          <span>Created by: {{ selectedEvent.created_by_name }}</span>\r\n        </div>\r\n\r\n        <Divider v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" />\r\n\r\n        <div v-if=\"selectedEvent.attendees && selectedEvent.attendees.length > 0\" class=\"attendees-section\">\r\n          <h3>Attendees</h3>\r\n          <ul class=\"attendee-list\">\r\n            <li v-for=\"attendee in selectedEvent.attendees\" :key=\"attendee.user_id\" class=\"attendee-item\">\r\n              <div class=\"attendee-avatar\">\r\n                <Avatar \r\n                  :image=\"attendee.profile_image\" \r\n                  size=\"small\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '32px',\r\n                        height: '32px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n              </div>\r\n              <div class=\"attendee-info\">\r\n                <span class=\"attendee-name\">{{ attendee.first_name }} {{ attendee.last_name }}</span>\r\n                <Tag \r\n                  :value=\"capitalizeFirst(attendee.status)\" \r\n                  :severity=\"getAttendanceTagSeverity(attendee.status)\" \r\n                  class=\"attendee-status\"\r\n                />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div v-if=\"isAttendee\" class=\"response-section\">\r\n          <Divider />\r\n          <h3>Your Response</h3>\r\n          <div class=\"response-buttons\">\r\n            <Button \r\n              label=\"Accept\" \r\n              class=\"p-button-success mr-2\" \r\n              @click=\"updateAttendance('accepted')\" \r\n              :disabled=\"currentAttendanceStatus === 'accepted'\" \r\n            />\r\n            <Button \r\n              label=\"Maybe\" \r\n              class=\"p-button-warning mr-2\" \r\n              @click=\"updateAttendance('tentative')\" \r\n              :disabled=\"currentAttendanceStatus === 'tentative'\" \r\n            />\r\n            <Button \r\n              label=\"Decline\" \r\n              class=\"p-button-danger\" \r\n              @click=\"updateAttendance('declined')\" \r\n              :disabled=\"currentAttendanceStatus === 'declined'\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"eventDetailsVisible = false\" \r\n        />\r\n        <Button \r\n          v-if=\"canEditEvent\" \r\n          label=\"Edit\" \r\n          icon=\"pi pi-pencil\" \r\n          @click=\"editSelectedEvent\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Delete Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\nimport FullCalendar from '@fullcalendar/vue3';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport FullCalendar from '@fullcalendar/vue3'\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport SelectButton from 'primevue/selectbutton';\r\nimport MultiSelect from 'primevue/multiselect';\r\nimport ToggleButton from 'primevue/togglebutton';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport InputText from 'primevue/inputtext';\r\nimport Textarea from 'primevue/textarea';\r\nimport Checkbox from 'primevue/checkbox';\r\nimport Calendar from 'primevue/calendar';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Avatar from 'primevue/avatar';\r\nimport Tag from 'primevue/tag';\r\nimport Divider from 'primevue/divider';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\n\r\nexport default {\r\n  name: 'CalendarView',\r\n  components: {\r\n    FullCalendar,\r\n    Button,\r\n    SelectButton,\r\n    MultiSelect,\r\n    ToggleButton,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    InputText,\r\n    Textarea,\r\n    Checkbox,\r\n    Calendar,\r\n    Dropdown,\r\n    Avatar,\r\n    Tag,\r\n    Divider,\r\n    ConfirmDialog\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n    const fullCalendar = ref(null);\r\n\r\n    // State\r\n    const loading = ref(true);\r\n    const events = ref([]);\r\n    const calendarView = ref('month');\r\n    const currentDate = ref(new Date());\r\n    const selectedDepartments = ref([]);\r\n    const showOnlyMyEvents = ref(false);\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const dateRangeError = ref(false);\r\n\r\n    // Event dialog state\r\n    const eventDialogVisible = ref(false);\r\n    const dialogMode = ref('create'); // 'create' or 'edit'\r\n    \r\n    // Event details dialog\r\n    const eventDetailsVisible = ref(false);\r\n    const selectedEvent = ref(null);\r\n    \r\n    // Form state\r\n    const event = reactive({\r\n      id: null,\r\n      title: '',\r\n      description: '',\r\n      startDate: null,\r\n      endDate: null,\r\n      allDay: false,\r\n      location: '',\r\n      departmentId: null,\r\n      isCompanyWide: false,\r\n      attendees: []\r\n    });\r\n\r\n    // Options for calendar view selector\r\n    const viewOptions = [\r\n      { label: 'Month', value: 'month' },\r\n      { label: 'Week', value: 'week' },\r\n      { label: 'Day', value: 'day' },\r\n      { label: 'List', value: 'list' }\r\n    ];\r\n\r\n    // Mock departments data (should be fetched from API)\r\n    const departments = ref([]);\r\n    \r\n    // Mock users data (should be fetched from API)\r\n    const users = ref([]);\r\n\r\n    // Calendar options\r\n    const calendarOptions = computed(() => ({\r\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n      initialView: 'dayGridMonth',\r\n      headerToolbar: false, // We're using our own header\r\n      editable: true,\r\n      selectable: true,\r\n      selectMirror: true,\r\n      dayMaxEvents: true,\r\n      weekends: true,\r\n      initialDate: currentDate.value,\r\n      events: mapEventsToCalendar(events.value),\r\n      eventClick: handleEventClick,\r\n      dateClick: handleDateClick,\r\n      select: handleDateSelect,\r\n      eventDrop: handleEventDrop,\r\n      eventResize: handleEventResize,\r\n      height: 'auto'\r\n    }));\r\n\r\n    // Week view options\r\n    const calendarWeekOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridWeek',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // Day view options\r\n    const calendarDayOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      initialView: 'timeGridDay',\r\n      allDaySlot: true,\r\n      slotMinTime: '07:00:00',\r\n      slotMaxTime: '20:00:00'\r\n    }));\r\n\r\n    // List view options\r\n    const calendarListOptions = computed(() => ({\r\n      ...calendarOptions.value,\r\n      plugins: [listPlugin],\r\n      initialView: 'listWeek'\r\n    }));\r\n\r\n    // Current view title (month/year)\r\n    const currentViewTitle = computed(() => {\r\n      const date = currentDate.value;\r\n      const formatter = new Intl.DateTimeFormat('en-US', { \r\n        month: 'long', \r\n        year: 'numeric' \r\n      });\r\n      \r\n      return formatter.format(date);\r\n    });\r\n\r\n    // Check if current user is an attendee of the selected event\r\n    const isAttendee = computed(() => {\r\n      if (!selectedEvent.value || !selectedEvent.value.attendees) return false;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedEvent.value.attendees.some(attendee => \r\n        attendee.user_id === currentUserId\r\n      );\r\n    });\r\n\r\n    // Get current user's attendance status\r\n    const currentAttendanceStatus = computed(() => {\r\n      if (!isAttendee.value) return null;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      const attendee = selectedEvent.value.attendees.find(a => \r\n        a.user_id === currentUserId\r\n      );\r\n      \r\n      return attendee ? attendee.status : null;\r\n    });\r\n\r\n    // Check if user can edit the selected event\r\n    const canEditEvent = computed(() => {\r\n      if (!selectedEvent.value) return false;\r\n      \r\n      const currentUser = store.getters['auth/currentUser'];\r\n      if (!currentUser) return false;\r\n      \r\n      // Admin can edit any event\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // Creator can edit their own event\r\n      return selectedEvent.value.created_by === currentUser.id;\r\n    });\r\n\r\n    // Check if user can delete the selected event\r\n    const canDeleteEvent = computed(() => {\r\n      return canEditEvent.value;\r\n    });\r\n\r\n    // Methods\r\n    const fetchEvents = async () => {\r\n      try {\r\n        loading.value = true;\r\n        \r\n        // Build filter query\r\n        const filters = {};\r\n        \r\n        // Date range for current view\r\n        const calendarApi = fullCalendar.value?.getApi();\r\n        if (!calendarApi) return;\r\n\tif (calendarApi) {\r\n          const view = calendarApi.view;\r\n          filters.start = view.activeStart.toISOString();\r\n          filters.end = view.activeEnd.toISOString();\r\n        }\r\n        \r\n        // Department filter\r\n        if (selectedDepartments.value.length > 0) {\r\n          filters.departmentId = selectedDepartments.value[0].id;\r\n        }\r\n        \r\n        // Show only my events filter\r\n        if (showOnlyMyEvents.value) {\r\n          filters.userId = store.getters['auth/currentUser']?.id;\r\n        }\r\n        \r\n        // Fetch events from API\r\n//        const response = await fetch('/api/calendar', { \r\n          params: filters \r\n        });\r\n        \r\n        // For now, using mock data since we don't have the actual API integrated\r\n        events.value = await mockFetchEvents();\r\n      } catch (error) {\r\n        console.error('Error fetching events:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load events',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Mock event data fetch function \r\n    const mockFetchEvents = () => {\r\n      // Return a promise to simulate API call\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve([\r\n            {\r\n              id: '1',\r\n              title: 'Annual Budget Meeting',\r\n              description: 'Review annual budget and forecast for next fiscal year',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 10, 0),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 15, 12, 0),\r\n              all_day: false,\r\n              location: 'Conference Room A',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: '1',\r\n              department_name: 'Finance',\r\n              is_company_wide: true,\r\n              attendees: [\r\n                {\r\n                  user_id: '1',\r\n                  first_name: 'John',\r\n                  last_name: 'Doe',\r\n                  email: 'john@example.com',\r\n                  status: 'accepted'\r\n                },\r\n                {\r\n                  user_id: '2',\r\n                  first_name: 'Jane',\r\n                  last_name: 'Smith',\r\n                  email: 'jane@example.com',\r\n                  status: 'tentative'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              id: '2',\r\n              title: 'Team Building Event',\r\n              description: 'Company-wide team building activities',\r\n              start_time: new Date(new Date().getFullYear(), new Date().getMonth(), 22),\r\n              end_time: new Date(new Date().getFullYear(), new Date().getMonth(), 23),\r\n              all_day: true,\r\n              location: 'City Park',\r\n              created_by: 'admin',\r\n              created_by_name: 'Admin User',\r\n              department_id: null,\r\n              department_name: null,\r\n              is_company_wide: true,\r\n              attendees: []\r\n            }\r\n          ]);\r\n        }, 500);\r\n      });\r\n    };\r\n\r\n    // Mock data for departments\r\n    const fetchDepartments = () => {\r\n      departments.value = [\r\n        { id: '1', name: 'Finance' },\r\n        { id: '2', name: 'Human Resources' },\r\n        { id: '3', name: 'Marketing' },\r\n        { id: '4', name: 'Engineering' },\r\n        { id: '5', name: 'Operations' }\r\n      ];\r\n    };\r\n\r\n    // Mock data for users\r\n    const fetchUsers = () => {\r\n      users.value = [\r\n        { id: '1', fullName: 'John Doe', email: 'john@example.com' },\r\n        { id: '2', fullName: 'Jane Smith', email: 'jane@example.com' },\r\n        { id: '3', fullName: 'Bob Johnson', email: 'bob@example.com' },\r\n        { id: '4', fullName: 'Alice Williams', email: 'alice@example.com' }\r\n      ];\r\n    };\r\n\r\n    // Map events to FullCalendar format\r\n    const mapEventsToCalendar = (eventsData) => {\r\n      return eventsData.map(event => ({\r\n        id: event.id,\r\n        title: event.title,\r\n        start: event.start_time,\r\n        end: event.end_time,\r\n        allDay: event.all_day,\r\n        extendedProps: {\r\n          description: event.description,\r\n          location: event.location,\r\n          departmentId: event.department_id,\r\n          departmentName: event.department_name,\r\n          isCompanyWide: event.is_company_wide,\r\n          createdBy: event.created_by,\r\n          createdByName: event.created_by_name,\r\n          attendees: event.attendees\r\n        },\r\n        backgroundColor: getEventColor(event),\r\n        borderColor: getEventColor(event)\r\n      }));\r\n    };\r\n\r\n    // Determine event color based on department or other attributes\r\n    const getEventColor = (event) => {\r\n      // Company-wide events are blue\r\n      if (event.is_company_wide) return '#3B82F6';\r\n      \r\n      // Color based on department\r\n      switch (event.department_id) {\r\n        case '1': return '#22C55E'; // Finance - green\r\n        case '2': return '#F59E0B'; // HR - yellow\r\n        case '3': return '#8B5CF6'; // Marketing - purple\r\n        case '4': return '#EC4899'; // Engineering - pink\r\n        case '5': return '#14B8A6'; // Operations - teal\r\n        default: return '#64748B'; // Default - gray\r\n      }\r\n    };\r\n\r\n    // Handle clicking on an event\r\n    const handleEventClick = (info) => {\r\n      // Get the clicked event data\r\n      const eventId = info.event.id;\r\n      \r\n      // Find the full event details\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        selectedEvent.value = eventData;\r\n        eventDetailsVisible.value = true;\r\n      }\r\n    };\r\n\r\n    // Handle clicking on a date\r\n    const handleDateClick = (info) => {\r\n      // Set start date to clicked date\r\n      const clickedDate = new Date(info.date);\r\n      resetEventForm();\r\n      \r\n      event.startDate = clickedDate;\r\n      event.endDate = new Date(clickedDate.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle selecting a date range\r\n    const handleDateSelect = (info) => {\r\n      resetEventForm();\r\n      \r\n      event.startDate = new Date(info.start);\r\n      event.endDate = new Date(info.end);\r\n      event.allDay = info.allDay;\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Handle dragging an event\r\n    const handleEventDrop = (info) => {\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event dates\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          start_time: info.event.start,\r\n          end_time: info.event.end || info.event.start,\r\n          all_day: info.event.allDay\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server (would use real API in production)\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event dates updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Handle resizing an event\r\n    const handleEventResize = (info) => {\r\n      // Similar to handleEventDrop\r\n      const eventId = info.event.id;\r\n      const eventData = events.value.find(e => e.id === eventId);\r\n      \r\n      if (eventData) {\r\n        // Update event end date\r\n        const updatedEvent = {\r\n          ...eventData,\r\n          end_time: info.event.end\r\n        };\r\n        \r\n        // Optimistically update the UI\r\n        const index = events.value.findIndex(e => e.id === eventId);\r\n        if (index !== -1) {\r\n          events.value[index] = updatedEvent;\r\n        }\r\n        \r\n        // Save to server\r\n        saveEventToServer(updatedEvent)\r\n          .then(() => {\r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Event Updated',\r\n              detail: 'Event duration updated successfully',\r\n              life: 3000\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // Revert the change in UI if save fails\r\n            info.revert();\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to update event',\r\n              life: 3000\r\n            });\r\n          });\r\n      }\r\n    };\r\n\r\n    // Change calendar view to previous month/week/day\r\n    const previousPeriod = () => {\r\n      if (!fullCalendar.value) return;\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.prev();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Change calendar view to next month/week/day\r\n    const nextPeriod = () => {\r\n      if (!fullCalendar.value) return;\r\n      const calendarApi = fullCalendar.value.getApi();\r\n      calendarApi.next();\r\n      currentDate.value = calendarApi.getDate();\r\n    };\r\n\r\n    // Open dialog to create a new event\r\n    const openNewEventDialog = () => {\r\n      resetEventForm();\r\n      \r\n      // Set default start/end times\r\n      const now = new Date();\r\n      now.setMinutes(0, 0, 0); // Round to nearest hour\r\n      now.setHours(now.getHours() + 1);\r\n      \r\n      event.startDate = now;\r\n      event.endDate = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\r\n      \r\n      dialogMode.value = 'create';\r\n      eventDialogVisible.value = true;\r\n    };\r\n\r\n    // Close event dialog\r\n    const closeEventDialog = () => {\r\n      eventDialogVisible.value = false;\r\n      submitted.value = false;\r\n      dateRangeError.value = false;\r\n    };\r\n\r\n    // Reset event form\r\n    const resetEventForm = () => {\r\n      event.id = null;\r\n      event.title = '';\r\n      event.description = '';\r\n      event.startDate = null;\r\n      event.endDate = null;\r\n      event.allDay = false;\r\n      event.location = '';\r\n      event.departmentId = null;\r\n      event.isCompanyWide = false;\r\n      event.attendees = [];\r\n    };\r\n\r\n    // Validate event form\r\n    const validateEventForm = () => {\r\n      dateRangeError.value = false;\r\n      \r\n      // Check required fields\r\n      if (!event.title || !event.startDate || !event.endDate) {\r\n        return false;\r\n      }\r\n      \r\n      // Check date range\r\n      if (event.startDate > event.endDate) {\r\n        dateRangeError.value = true;\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    };\r\n\r\n    // Save event (create or update)\r\n    const saveEvent = () => {\r\n      submitted.value = true;\r\n      \r\n      if (!validateEventForm()) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      // Prepare event data\r\n      const eventData = {\r\n        id: event.id,\r\n        title: event.title,\r\n        description: event.description,\r\n        startTime: event.startDate,\r\n        endTime: event.endDate,\r\n        allDay: event.allDay,\r\n        location: event.location,\r\n        departmentId: event.departmentId,\r\n        isCompanyWide: event.isCompanyWide,\r\n        attendees: event.attendees\r\n      };\r\n      \r\n      // Save to server (create or update)\r\n      const savePromise = event.id \r\n        ? saveEventToServer(eventData) // Update\r\n        : createEventOnServer(eventData); // Create\r\n      \r\n      savePromise\r\n        .then(savedEvent => {\r\n          // Update local data\r\n          if (event.id) {\r\n            // Update existing event in list\r\n            const index = events.value.findIndex(e => e.id === event.id);\r\n            if (index !== -1) {\r\n              events.value[index] = savedEvent;\r\n            }\r\n          } else {\r\n            // Add new event to list\r\n            events.value.push(savedEvent);\r\n          }\r\n          \r\n          // Close dialog and show success message\r\n          eventDialogVisible.value = false;\r\n          submitted.value = false;\r\n          \r\n          toast.add({\r\n            severity: 'success',\r\n            summary: dialogMode.value === 'create' ? 'Event Created' : 'Event Updated',\r\n            detail: dialogMode.value === 'create' \r\n              ? 'Event has been created successfully' \r\n              : 'Event has been updated successfully',\r\n            life: 3000\r\n          });\r\n          \r\n          // Refresh calendar\r\n          refreshCalendar();\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving event:', error);\r\n          toast.add({\r\n            severity: 'error',\r\n            summary: 'Error',\r\n            detail: `Failed to ${dialogMode.value === 'create' ? 'create' : 'update'} event`,\r\n            life: 3000\r\n          });\r\n        })\r\n        .finally(() => {\r\n          saving.value = false;\r\n        });\r\n    };\r\n    \r\n    // Mock function to simulate saving to server\r\n    const saveEventToServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a PUT/PATCH request to update the event\r\n          console.log('Updating event on server:', eventData);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: eventData.id,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Mock function to simulate creating event on server\r\n    const createEventOnServer = (eventData) => {\r\n      // Simulate API call with a promise\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          // In a real app, this would be a POST request to create the event\r\n          console.log('Creating event on server:', eventData);\r\n          \r\n          // Generate a fake ID for the new event\r\n          const newId = Math.random().toString(36).substring(2, 11);\r\n          \r\n          // Convert to the format that matches our API response\r\n          const savedEvent = {\r\n            id: newId,\r\n            title: eventData.title,\r\n            description: eventData.description,\r\n            start_time: eventData.startTime,\r\n            end_time: eventData.endTime,\r\n            all_day: eventData.allDay,\r\n            location: eventData.location,\r\n            department_id: eventData.departmentId,\r\n            is_company_wide: eventData.isCompanyWide,\r\n            created_by: store.getters['auth/currentUser']?.id,\r\n            created_by_name: store.getters['auth/userFullName'],\r\n            attendees: eventData.attendees.map(id => {\r\n              const user = users.value.find(u => u.id === id);\r\n              return {\r\n                user_id: id,\r\n                first_name: user?.fullName.split(' ')[0] || '',\r\n                last_name: user?.fullName.split(' ')[1] || '',\r\n                email: user?.email || '',\r\n                status: 'pending'\r\n              };\r\n            })\r\n          };\r\n          \r\n          // Find department name if departmentId is provided\r\n          if (eventData.departmentId) {\r\n            const dept = departments.value.find(d => d.id === eventData.departmentId);\r\n            savedEvent.department_name = dept ? dept.name : null;\r\n          }\r\n          \r\n          resolve(savedEvent);\r\n        }, 500);\r\n      });\r\n    };\r\n    \r\n    // Edit selected event\r\n    const editSelectedEvent = () => {\r\n      if (!selectedEvent.value) return;\r\n      \r\n      // Close details dialog\r\n      eventDetailsVisible.value = false;\r\n      \r\n      // Populate form with event data\r\n      event.id = selectedEvent.value.id;\r\n      event.title = selectedEvent.value.title;\r\n      event.description = selectedEvent.value.description || '';\r\n      event.startDate = new Date(selectedEvent.value.start_time);\r\n      event.endDate = new Date(selectedEvent.value.end_time);\r\n      event.allDay = selectedEvent.value.all_day;\r\n      event.location = selectedEvent.value.location || '';\r\n      event.departmentId = selectedEvent.value.department_id;\r\n      event.isCompanyWide = selectedEvent.value.is_company_wide;\r\n      event.attendees = selectedEvent.value.attendees?.map(a => a.user_id) || [];\r\n      \r\n      // Show edit dialog\r\n      dialogMode.value = 'edit';\r\n      eventDialogVisible.value = true;\r\n    };\r\n    \r\n    // Delete event\r\n    const confirmDeleteEvent = () => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this event?',\r\n        header: 'Confirm Delete',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteEvent(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n    \r\n    // Delete event after confirmation\r\n    const deleteEvent = () => {\r\n      if (!event.id) return;\r\n      \r\n      saving.value = true;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Remove from local events array\r\n        const index = events.value.findIndex(e => e.id === event.id);\r\n        if (index !== -1) {\r\n          events.value.splice(index, 1);\r\n        }\r\n        \r\n        // Close dialog\r\n        eventDialogVisible.value = false;\r\n        submitted.value = false;\r\n        saving.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Event Deleted',\r\n          detail: 'Event has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh calendar\r\n        refreshCalendar();\r\n      }, 500);\r\n    };\r\n    \r\n    // Update attendance status\r\n    const updateAttendance = (status) => {\r\n      if (!selectedEvent.value || !isAttendee.value) return;\r\n      \r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      \r\n      // Simulate API call\r\n      setTimeout(() => {\r\n        // Update local event data\r\n        const attendee = selectedEvent.value.attendees.find(a => a.user_id === currentUserId);\r\n        if (attendee) {\r\n          attendee.status = status;\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Response Updated',\r\n          detail: `You have ${status} the event`,\r\n          life: 3000\r\n        });\r\n      }, 300);\r\n    };\r\n    \r\n    // Refresh calendar\r\n    const refreshCalendar = () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        calendarApi.refetchEvents();\r\n      }\r\n    };\r\n    \r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric' \r\n      }).format(date);\r\n    };\r\n    \r\n    // Format date and time\r\n    const formatDateTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        month: 'short', \r\n        day: 'numeric', \r\n        year: 'numeric',\r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Format time only\r\n    const formatTime = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', { \r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n      }).format(date);\r\n    };\r\n    \r\n    // Check if two dates are the same day\r\n    const isSameDay = (date1, date2) => {\r\n      const d1 = new Date(date1);\r\n      const d2 = new Date(date2);\r\n      return d1.getFullYear() === d2.getFullYear() && \r\n             d1.getMonth() === d2.getMonth() && \r\n             d1.getDate() === d2.getDate();\r\n    };\r\n    \r\n    // Get tag severity for attendance status\r\n    const getAttendanceTagSeverity = (status) => {\r\n      switch (status) {\r\n        case 'accepted': return 'success';\r\n        case 'declined': return 'danger';\r\n        case 'tentative': return 'warning';\r\n        default: return 'info';\r\n      }\r\n    };\r\n    \r\n    // Capitalize first letter\r\n    const capitalizeFirst = (str) => {\r\n      if (!str) return '';\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n    };\r\n    \r\n    // Watch for changes to filters and refresh data\r\n    watch([selectedDepartments, showOnlyMyEvents], () => {\r\n      fetchEvents();\r\n    });\r\n    \r\n    // Watch for calendar view changes\r\n    watch(calendarView, () => {\r\n      if (fullCalendar.value) {\r\n        const calendarApi = fullCalendar.value.getApi();\r\n        \r\n        switch (calendarView.value) {\r\n          case 'month':\r\n            calendarApi.changeView('dayGridMonth');\r\n            break;\r\n          case 'week':\r\n            calendarApi.changeView('timeGridWeek');\r\n            break;\r\n          case 'day':\r\n            calendarApi.changeView('timeGridDay');\r\n            break;\r\n          case 'list':\r\n            calendarApi.changeView('listWeek');\r\n            break;\r\n        }\r\n        \r\n        // Store current date when changing views\r\n        currentDate.value = calendarApi.getDate();\r\n      }\r\n    });\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      fetchDepartments();\r\n      fetchUsers();\r\n      fetchEvents();\r\n    });\r\n    \r\n    return {\r\n      loading,\r\n      events,\r\n      calendarView,\r\n      viewOptions,\r\n      currentViewTitle,\r\n      selectedDepartments,\r\n      showOnlyMyEvents,\r\n      departments,\r\n      users,\r\n      calendarOptions,\r\n      calendarWeekOptions,\r\n      calendarDayOptions,\r\n      calendarListOptions,\r\n      fullCalendar,\r\n      eventDialogVisible,\r\n      dialogMode,\r\n      event,\r\n      submitted,\r\n      dateRangeError,\r\n      saving,\r\n      eventDetailsVisible,\r\n      selectedEvent,\r\n      isAttendee,\r\n      currentAttendanceStatus,\r\n      canEditEvent,\r\n      canDeleteEvent,\r\n      \r\n      // Methods\r\n      previousPeriod,\r\n      nextPeriod,\r\n      openNewEventDialog,\r\n      closeEventDialog,\r\n      saveEvent,\r\n      editSelectedEvent,\r\n      confirmDeleteEvent,\r\n      updateAttendance,\r\n      formatDate,\r\n      formatDateTime,\r\n      formatTime,\r\n      isSameDay,\r\n      getAttendanceTagSeverity,\r\n      capitalizeFirst\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.calendar-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.calendar-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n}\r\n\r\n.calendar-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.month-navigation {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.calendar-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 400px;\r\n}\r\n\r\n.departments-filter {\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event dialog */\r\n.date-time-fields {\r\n  display: flex;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.start-datetime,\r\n.end-datetime {\r\n  flex: 1;\r\n  min-width: 200px;\r\n}\r\n\r\n/* Event details */\r\n.event-details {\r\n  color: var(--text-color);\r\n}\r\n\r\n.event-detail-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.event-detail-item i {\r\n  margin-right: 0.5rem;\r\n  color: var(--primary-color);\r\n  width: 1.25rem;\r\n}\r\n\r\n.event-description {\r\n  margin: 1rem 0;\r\n  padding: 0.75rem;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.5rem;\r\n  white-space: pre-line;\r\n}\r\n\r\n/* Attendees */\r\n.attendees-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.attendee-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.attendee-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  border-radius: 0.375rem;\r\n  margin-bottom: 0.5rem;\r\n  background-color: var(--surface-ground);\r\n}\r\n\r\n.attendee-avatar {\r\n  margin-right: 0.75rem;\r\n}\r\n\r\n.attendee-info {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex: 1;\r\n}\r\n\r\n.attendee-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.attendee-status {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n/* Response section */\r\n.response-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.response-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n/* Full calendar overrides */\r\n:deep(.fc) {\r\n  --fc-border-color: var(--surface-border);\r\n  --fc-event-border-color: transparent;\r\n  --fc-today-bg-color: rgba(59, 130, 246, 0.1);\r\n  --fc-event-bg-color: var(--primary-color);\r\n  --fc-event-text-color: #fff;\r\n  --fc-page-bg-color: var(--surface-card);\r\n}\r\n\r\n:deep(.fc-event) {\r\n  cursor: pointer;\r\n  padding: 0.25rem;\r\n  border-radius: 0.25rem;\r\n}\r\n\r\n:deep(.fc-header-toolbar) {\r\n  margin-bottom: 1rem !important;\r\n}\r\n\r\n:deep(.fc-day-today) {\r\n  background-color: var(--surface-hover) !important;\r\n}\r\n\r\n:deep(.fc-timegrid-event-harness), \r\n:deep(.fc-daygrid-event-harness) {\r\n  margin-right: 0.25rem;\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .calendar-toolbar {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .month-navigation {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .view-buttons,\r\n  .filter-buttons {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .departments-filter {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n","/home/pi/projects/intranet/frontend/src/views/Wiki.vue",["76"],"<template>\r\n  <div class=\"wiki-container\">\r\n    <!-- Page header with title and actions -->\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Knowledge Base</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Page\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewPageAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Wiki content area with sidebar and main content -->\r\n    <div class=\"wiki-content\">\r\n      <!-- Sidebar for tree navigation -->\r\n      <div class=\"wiki-sidebar card\">\r\n        <div class=\"wiki-search p-input-icon-left w-full\">\r\n          <i class=\"pi pi-search\" />\r\n          <InputText \r\n            v-model=\"searchQuery\" \r\n            placeholder=\"Search wiki...\" \r\n            class=\"w-full\"\r\n            @input=\"debounceSearch\"\r\n          />\r\n        </div>\r\n        \r\n        <div v-if=\"isSearching\" class=\"wiki-sidebar-loading\">\r\n          <ProgressSpinner style=\"width: 50px; height: 50px\" />\r\n        </div>\r\n        \r\n        <div v-else-if=\"searchQuery && searchResults.length > 0\" class=\"wiki-search-results\">\r\n          <h3 class=\"search-results-title\">Search Results</h3>\r\n          <ul class=\"search-results-list\">\r\n            <li \r\n              v-for=\"result in searchResults\" \r\n              :key=\"result.id\" \r\n              class=\"search-result-item p-ripple\"\r\n              @click=\"viewPage(result.id)\"\r\n            >\r\n              <div class=\"search-result-title\">{{ result.title }}</div>\r\n              <div class=\"search-result-path\">{{ result.path }}</div>\r\n              <Ripple />\r\n            </li>\r\n          </ul>\r\n          <Button \r\n            label=\"Clear Search\" \r\n            icon=\"pi pi-times\" \r\n            class=\"p-button-text p-button-sm mt-2\" \r\n            @click=\"clearSearch\"\r\n          />\r\n        </div>\r\n        \r\n        <div v-else-if=\"searchQuery && searchResults.length === 0\" class=\"wiki-empty-results\">\r\n          <i class=\"pi pi-search\"></i>\r\n          <p>No pages match your search</p>\r\n          <Button \r\n            label=\"Clear\" \r\n            icon=\"pi pi-times\" \r\n            class=\"p-button-text p-button-sm\" \r\n            @click=\"clearSearch\"\r\n          />\r\n        </div>\r\n        \r\n        <div v-else class=\"wiki-tree\">\r\n          <h3 class=\"wiki-tree-title\">Wiki Pages</h3>\r\n          <div v-if=\"isLoading\" class=\"wiki-sidebar-loading\">\r\n            <ProgressSpinner style=\"width: 50px; height: 50px\" />\r\n          </div>\r\n          <div v-else>\r\n            <TreeTable :value=\"wikiTreeNodes\" selectionMode=\"single\" :expandedKeys=\"expandedKeys\">\r\n              <Column field=\"title\" expander>\r\n                <template #body=\"{ data }\">\r\n                  <div \r\n                    class=\"wiki-node p-ripple\" \r\n                    :class=\"{ 'active-node': currentPage && currentPage.id === data.id }\"\r\n                    @click=\"viewPage(data.id)\"\r\n                  >\r\n                    {{ data.title }}\r\n                    <Ripple />\r\n                  </div>\r\n                </template>\r\n              </Column>\r\n            </TreeTable>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Main content area -->\r\n      <div class=\"wiki-main\">\r\n        <!-- Loading state -->\r\n        <div v-if=\"isLoading\" class=\"wiki-loading\">\r\n          <ProgressSpinner />\r\n        </div>\r\n        \r\n        <!-- Empty state - no page selected -->\r\n        <div v-else-if=\"!currentPage\" class=\"wiki-empty card\">\r\n          <div class=\"wiki-empty-content\">\r\n            <i class=\"pi pi-book\"></i>\r\n            <h2>Welcome to the Knowledge Base</h2>\r\n            <p>Select a page from the sidebar or create a new one to get started.</p>\r\n            <Button \r\n              label=\"Create Your First Page\" \r\n              icon=\"pi pi-plus\" \r\n              @click=\"openNewPageAppDialog\" \r\n              class=\"p-button-primary mt-3\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Wiki page content -->\r\n        <div v-else class=\"wiki-page card\">\r\n          <!-- Breadcrumb navigation -->\r\n          <Breadcrumb :model=\"breadcrumbItems\" class=\"wiki-breadcrumb mb-3\" />\r\n          \r\n          <!-- Page header with title and metadata -->\r\n          <div class=\"wiki-page-header\">\r\n            <h1 class=\"wiki-page-title\">{{ currentPage.title }}</h1>\r\n            <div class=\"wiki-page-meta\">\r\n              <span class=\"wiki-page-author\">\r\n                <i class=\"pi pi-user\"></i>\r\n                {{ currentPage.created_by_name }}\r\n              </span>\r\n              <span class=\"wiki-page-date\">\r\n                <i class=\"pi pi-calendar\"></i>\r\n                {{ formatDate(currentPage.updated_at || currentPage.created_at) }}\r\n              </span>\r\n              <div class=\"wiki-page-actions\">\r\n                <Button \r\n                  icon=\"pi pi-pencil\" \r\n                  class=\"p-button-text p-button-rounded\" \r\n                  @click=\"editPage\" \r\n                  v-tooltip.top=\"'Edit Page'\" \r\n                />\r\n                <Button \r\n                  icon=\"pi pi-history\" \r\n                  class=\"p-button-text p-button-rounded\" \r\n                  @click=\"viewRevisions\" \r\n                  v-tooltip.top=\"'View History'\" \r\n                />\r\n                <Button \r\n                  icon=\"pi pi-trash\" \r\n                  class=\"p-button-text p-button-rounded p-button-danger\" \r\n                  @click=\"confirmDeletePage\" \r\n                  v-tooltip.top=\"'Delete Page'\" \r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Page content rendered as markdown -->\r\n          <div class=\"wiki-page-content p-4\">\r\n            <div v-html=\"renderedContent\"></div>\r\n          </div>\r\n          \r\n          <!-- Page footer with tags and other metadata -->\r\n          <div class=\"wiki-page-footer\" v-if=\"currentPage.tags && currentPage.tags.length > 0\">\r\n            <div class=\"wiki-page-tags\">\r\n              <i class=\"pi pi-tags\"></i>\r\n              <span \r\n                v-for=\"tag in currentPage.tags\" \r\n                :key=\"tag\"\r\n                class=\"wiki-tag\"\r\n              >{{ tag }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Wiki page dialog (create/edit) -->\r\n    <Dialog \r\n      v-model:visible=\"pageDialogVisible\" \r\n      :style=\"{ width: '80%', maxWidth: '800px' }\" \r\n      :header=\"dialogMode === 'create' ? 'Create New Page' : 'Edit Page'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid wiki-dialog\"\r\n    >\r\n      <div class=\"wiki-form\">\r\n        <div class=\"field\">\r\n          <label for=\"pageTitle\">Title*</label>\r\n          <InputText \r\n            id=\"pageTitle\" \r\n            v-model=\"pageForm.title\" \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !pageForm.title }\"\r\n          />\r\n          <small v-if=\"submitted && !pageForm.title\" class=\"p-error\">Title is required.</small>\r\n        </div>\r\n        \r\n        <div class=\"field\">\r\n          <label for=\"pageParent\">Parent Page</label>\r\n          <Dropdown \r\n            id=\"pageParent\" \r\n            v-model=\"pageForm.parentId\" \r\n            :options=\"parentPageOptions\" \r\n            optionLabel=\"title\" \r\n            optionValue=\"id\" \r\n            placeholder=\"No Parent (Top Level)\" \r\n          />\r\n        </div>\r\n        \r\n        <div class=\"field\">\r\n          <label for=\"pageDepartment\">Department</label>\r\n          <Dropdown \r\n            id=\"pageDepartment\" \r\n            v-model=\"pageForm.departmentId\" \r\n            :options=\"departments\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"id\" \r\n            placeholder=\"No Department\" \r\n          />\r\n        </div>\r\n        \r\n        <div class=\"field\">\r\n          <label for=\"pageTags\">Tags</label>\r\n          <Chips \r\n            id=\"pageTags\" \r\n            v-model=\"pageForm.tags\" \r\n            separator=\",\" \r\n            placeholder=\"Add tags (press enter or comma to add)\"\r\n          />\r\n          <small class=\"form-helper-text\">Tags help with organization and searching</small>\r\n        </div>\r\n        \r\n        <div class=\"field\">\r\n          <label for=\"pageContent\">Content*</label>\r\n          <Textarea \r\n            id=\"pageContent\" \r\n            v-model=\"pageForm.content\" \r\n            rows=\"12\" \r\n            required\r\n            :class=\"{ 'p-invalid': submitted && !pageForm.content }\"\r\n          />\r\n          <small v-if=\"submitted && !pageForm.content\" class=\"p-error\">Content is required.</small>\r\n          <small class=\"form-helper-text\">\r\n            This editor supports Markdown formatting. \r\n            <a href=\"#\" @click.prevent=\"showMarkdownHelp\">View formatting help</a>\r\n          </small>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closePageAppDialog\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"savePage\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n    \r\n    <!-- Revisions dialog -->\r\n    <Dialog \r\n      v-model:visible=\"revisionsDialogVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      header=\"Page History\" \r\n      :modal=\"true\"\r\n      class=\"wiki-revisions-dialog\"\r\n    >\r\n      <div v-if=\"pageRevisions.length === 0\" class=\"empty-revisions\">\r\n        <i class=\"pi pi-history\"></i>\r\n        <p>No revision history available</p>\r\n      </div>\r\n      <div v-else class=\"revisions-list\">\r\n        <Timeline :value=\"formattedRevisions\">\r\n          <template #content=\"slotProps\">\r\n            <div class=\"revision-item\">\r\n              <div class=\"revision-content\">\r\n                <h3>{{ slotProps.item.title }}</h3>\r\n                <div class=\"revision-meta\">\r\n                  <span class=\"revision-date\">{{ slotProps.item.date }}</span>\r\n                  <span class=\"revision-author\">{{ slotProps.item.author }}</span>\r\n                </div>\r\n                <p v-if=\"slotProps.item.description\" class=\"revision-description\">\r\n                  {{ slotProps.item.description }}\r\n                </p>\r\n                <div class=\"revision-actions\">\r\n                  <Button \r\n                    label=\"View\" \r\n                    icon=\"pi pi-eye\" \r\n                    class=\"p-button-sm p-button-text\" \r\n                    @click=\"viewRevision(slotProps.item.id)\"\r\n                  />\r\n                  <Button \r\n                    label=\"Restore\" \r\n                    icon=\"pi pi-replay\" \r\n                    class=\"p-button-sm p-button-text\" \r\n                    @click=\"restoreRevision(slotProps.item.id)\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </template>\r\n        </Timeline>\r\n      </div>\r\n      \r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"revisionsDialogVisible = false\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n    \r\n    <!-- Markdown help dialog -->\r\n    <Dialog \r\n      v-model:visible=\"markdownHelpVisible\" \r\n      :style=\"{ width: '700px' }\" \r\n      header=\"Markdown Formatting Guide\" \r\n      :modal=\"true\"\r\n    >\r\n      <div class=\"markdown-help\">\r\n        <div class=\"markdown-help-section\">\r\n          <h3>Basic Formatting</h3>\r\n          <div class=\"markdown-example-grid\">\r\n            <div class=\"markdown-example\">\r\n              <div class=\"markdown-code\">**Bold text**</div>\r\n              <div class=\"markdown-result\"><strong>Bold text</strong></div>\r\n            </div>\r\n            <div class=\"markdown-example\">\r\n              <div class=\"markdown-code\">*Italic text*</div>\r\n              <div class=\"markdown-result\"><em>Italic text</em></div>\r\n            </div>\r\n            <div class=\"markdown-example\">\r\n              <div class=\"markdown-code\">~~Strikethrough~~</div>\r\n              <div class=\"markdown-result\"><s>Strikethrough</s></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"markdown-help-section\">\r\n          <h3>Headings</h3>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\"># Heading 1</div>\r\n            <div class=\"markdown-result\"><h1 style=\"margin: 0\">Heading 1</h1></div>\r\n          </div>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">## Heading 2</div>\r\n            <div class=\"markdown-result\"><h2 style=\"margin: 0\">Heading 2</h2></div>\r\n          </div>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">### Heading 3</div>\r\n            <div class=\"markdown-result\"><h3 style=\"margin: 0\">Heading 3</h3></div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"markdown-help-section\">\r\n          <h3>Lists</h3>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">\r\n              - Item 1<br>\r\n              - Item 2<br>\r\n              - Item 3\r\n            </div>\r\n            <div class=\"markdown-result\">\r\n              <ul style=\"margin: 0\">\r\n                <li>Item 1</li>\r\n                <li>Item 2</li>\r\n                <li>Item 3</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">\r\n              1. First item<br>\r\n              2. Second item<br>\r\n              3. Third item\r\n            </div>\r\n            <div class=\"markdown-result\">\r\n              <ol style=\"margin: 0\">\r\n                <li>First item</li>\r\n                <li>Second item</li>\r\n                <li>Third item</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"markdown-help-section\">\r\n          <h3>Links and Images</h3>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">[Link text](https://example.com)</div>\r\n            <div class=\"markdown-result\"><a href=\"#\">Link text</a></div>\r\n          </div>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">![Alt text](image-url.jpg)</div>\r\n            <div class=\"markdown-result\">Image with alt text</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"markdown-help-section\">\r\n          <h3>Code</h3>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">`inline code`</div>\r\n            <div class=\"markdown-result\"><code>inline code</code></div>\r\n          </div>\r\n          <div class=\"markdown-example\">\r\n            <div class=\"markdown-code\">\r\n              ```<br>\r\n              // Code block<br>\r\n              function example() {<br>\r\n              &nbsp;&nbsp;return true;<br>\r\n              }<br>\r\n              ```\r\n            </div>\r\n            <div class=\"markdown-result\">\r\n              <pre style=\"margin: 0\"><code>// Code block\r\nfunction example() {\r\n  return true;\r\n}</code></pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"markdownHelpVisible = false\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n    \r\n    <!-- Confirm Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\nimport { marked } from 'marked';\r\nimport DOMPurify from 'dompurify';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport InputText from 'primevue/inputtext';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Textarea from 'primevue/textarea';\r\nimport Chips from 'primevue/chips';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport TreeTable from 'primevue/treetable';\r\nimport Column from 'primevue/column';\r\nimport Breadcrumb from 'primevue/breadcrumb';\r\nimport Timeline from 'primevue/timeline';\r\nimport Tooltip from 'primevue/tooltip';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\nimport Ripple from 'primevue/ripple';\r\n\r\nexport default {\r\n  name: 'WikiView',\r\n  components: {\r\n    Button,\r\n    InputText,\r\n    Dropdown,\r\n    Textarea,\r\n    Chips,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    TreeTable,\r\n    Column,\r\n    Breadcrumb,\r\n    Timeline,\r\n    ConfirmDialog\r\n  },\r\n  directives: {\r\n    tooltip: Tooltip,\r\n    ripple: Ripple\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const router = useRouter();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n\r\n    // State\r\n    const searchQuery = ref('');\r\n    const isSearching = ref(false);\r\n    const pageDialogVisible = ref(false);\r\n    const revisionsDialogVisible = ref(false);\r\n    const markdownHelpVisible = ref(false);\r\n    const dialogMode = ref('create');\r\n    const submitted = ref(false);\r\n    const saving = ref(false);\r\n    const expandedKeys = ref({});\r\n    \r\n    // Debounce search\r\n    let searchTimeout = null;\r\n    \r\n    // Form state for page\r\n    const pageForm = reactive({\r\n      id: null,\r\n      title: '',\r\n      content: '',\r\n      parentId: null,\r\n      departmentId: null,\r\n      tags: []\r\n    });\r\n\r\n    // Departments (fetch from store or API)\r\n    const departments = ref([\r\n      { id: '1', name: 'Finance' },\r\n      { id: '2', name: 'Human Resources' },\r\n      { id: '3', name: 'Marketing' },\r\n      { id: '4', name: 'Engineering' },\r\n      { id: '5', name: 'Operations' }\r\n    ]);\r\n\r\n    // Computed properties\r\n    const isLoading = computed(() => store.state.knowledge.isLoading);\r\n    const wikiPages = computed(() => store.state.knowledge.wikiPages);\r\n    const wikiTree = computed(() => store.state.knowledge.wikiTree);\r\n    const currentPage = computed(() => store.state.knowledge.currentPage);\r\n    const pageRevisions = computed(() => store.state.knowledge.pageRevisions);\r\n    const searchResults = computed(() => store.state.knowledge.searchResults);\r\n\r\n    // Format wiki tree for TreeTable component\r\n    const wikiTreeNodes = computed(() => {\r\n      return formatTreeNodes(wikiTree.value);\r\n    });\r\n\r\n    // Options for parent page dropdown\r\n    const parentPageOptions = computed(() => {\r\n      const options = [];\r\n      \r\n      // Add option for no parent (root level)\r\n      options.push({ id: null, title: 'No Parent (Top Level)' });\r\n      \r\n      // Add all pages except current page and its descendants\r\n      if (wikiPages.value) {\r\n        wikiPages.value.forEach(page => {\r\n          // Skip current page and its descendants to prevent circular references\r\n          if (pageForm.id && (page.id === pageForm.id || isDescendant(page.id, pageForm.id))) {\r\n            return;\r\n          }\r\n          options.push({ id: page.id, title: page.title });\r\n        });\r\n      }\r\n      \r\n      return options;\r\n    });\r\n\r\n    // Breadcrumb trail for current page\r\n    const breadcrumbItems = computed(() => {\r\n      if (!currentPage.value) return [];\r\n      \r\n      const items = [\r\n        { label: 'Wiki Home', command: () => router.push('/wiki') }\r\n      ];\r\n      \r\n      if (store.getters['knowledge/breadcrumbPath'] && store.getters['knowledge/breadcrumbPath'].length > 0) {\r\n        store.getters['knowledge/breadcrumbPath'].forEach((item, index) => {\r\n          if (index === 0) return; // Skip home item as we already added it\r\n          \r\n          items.push({\r\n            label: item.title,\r\n            command: () => viewPage(item.id),\r\n            class: item.isActive ? 'active-breadcrumb' : ''\r\n          });\r\n        });\r\n      }\r\n      \r\n      return items;\r\n    });\r\n\r\n    // Format revisions for timeline component\r\n    const formattedRevisions = computed(() => {\r\n      return pageRevisions.value.map(revision => ({\r\n        id: revision.id,\r\n        title: `Version ${revision.version}`,\r\n        date: formatDate(revision.created_at),\r\n        author: revision.created_by_name || 'Unknown',\r\n        description: revision.change_description || '',\r\n        color: revision.is_current ? '#4caf50' : '#2196f3'\r\n      }));\r\n    });\r\n\r\n    // Rendered markdown content\r\n    const renderedContent = computed(() => {\r\n      if (!currentPage.value || !currentPage.value.content) return '';\r\n      \r\n      // Convert markdown to HTML and sanitize\r\n      const html = marked(currentPage.value.content);\r\n      return DOMPurify.sanitize(html);\r\n    });\r\n\r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      }).format(date);\r\n    };\r\n\r\n    // Format tree nodes for TreeTable component\r\n//    const formatTreeNodes = (tree, parent = null) => {\r\n      if (!tree || tree.length === 0) return [];\r\n      \r\n      return tree.map(item => {\r\n        const node = {\r\n          key: item.id,\r\n          id: item.id,\r\n          title: item.title,\r\n          data: {\r\n            id: item.id,\r\n            title: item.title,\r\n            createdBy: item.created_by_name,\r\n            updatedAt: item.updated_at\r\n          }\r\n        };\r\n        \r\n        // If item has children, add them\r\n        if (item.children && item.children.length > 0) {\r\n          node.children = formatTreeNodes(item.children, item);\r\n        }\r\n        \r\n        return node;\r\n      });\r\n    };\r\n\r\n    // Check if a page is a descendant of another page\r\n    const isDescendant = (pageId, potentialAncestorId) => {\r\n      // Find the page\r\n      const page = wikiPages.value.find(p => p.id === pageId);\r\n      if (!page) return false;\r\n      \r\n      // If the page has no parent, it can't be a descendant\r\n      if (!page.parent_id) return false;\r\n      \r\n      // If the page's parent is the potential ancestor, it is a descendant\r\n      if (page.parent_id === potentialAncestorId) return true;\r\n      \r\n      // Recursively check if the page's parent is a descendant of the potential ancestor\r\n      return isDescendant(page.parent_id, potentialAncestorId);\r\n    };\r\n\r\n    // Handle search input with debounce\r\n    const debounceSearch = () => {\r\n      if (searchTimeout) {\r\n        clearTimeout(searchTimeout);\r\n      }\r\n      \r\n      searchTimeout = setTimeout(() => {\r\n        if (searchQuery.value.length >= 2) {\r\n          performSearch();\r\n        } else if (searchQuery.value.length === 0) {\r\n          clearSearch();\r\n        }\r\n      }, 300);\r\n    };\r\n\r\n    // Perform search\r\n    const performSearch = async () => {\r\n      if (!searchQuery.value || searchQuery.value.length < 2) return;\r\n      \r\n      isSearching.value = true;\r\n      try {\r\n        await store.dispatch('knowledge/searchWikiPages', searchQuery.value);\r\n      } catch (error) {\r\n        console.error('Error searching wiki:', error);\r\n      } finally {\r\n        isSearching.value = false;\r\n      }\r\n    };\r\n\r\n    // Clear search\r\n    const clearSearch = () => {\r\n      searchQuery.value = '';\r\n      store.dispatch('knowledge/setSearchResults', []);\r\n    };\r\n\r\n    // View wiki page\r\n    const viewPage = async (id) => {\r\n      if (!id) {\r\n        // Reset current page if no ID provided\r\n        store.commit('knowledge/setCurrentPage', null);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        await store.dispatch('knowledge/fetchWikiPage', id);\r\n        \r\n        // Expand parents in tree\r\n        const page = store.state.knowledge.currentPage;\r\n        if (page && page.parent_id) {\r\n          expandParentNodes(page.parent_id);\r\n        }\r\n        \r\n        // Navigate to page URL if not already there\r\n        if (router.currentRoute.value.path !== `/wiki/${id}`) {\r\n          router.push(`/wiki/${id}`);\r\n        }\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load wiki page',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Expand parent nodes in tree\r\n    const expandParentNodes = (parentId) => {\r\n      if (!parentId) return;\r\n      \r\n      expandedKeys.value[parentId] = true;\r\n      \r\n      // Find parent's parent to expand it too\r\n      const parentPage = wikiPages.value.find(p => p.id === parentId);\r\n      if (parentPage && parentPage.parent_id) {\r\n        expandParentNodes(parentPage.parent_id);\r\n      }\r\n    };\r\n\r\n    // Open new page dialog\r\n    const openNewPageDialog = () => {\r\n      resetPageForm();\r\n      dialogMode.value = 'create';\r\n      pageDialogVisible.value = true;\r\n    };\r\n\r\n    // Edit current page\r\n    const editPage = () => {\r\n      if (!currentPage.value) return;\r\n      \r\n      resetPageForm();\r\n      \r\n      // Copy data to form\r\n      pageForm.id = currentPage.value.id;\r\n      pageForm.title = currentPage.value.title;\r\n      pageForm.content = currentPage.value.content;\r\n      pageForm.parentId = currentPage.value.parent_id;\r\n      pageForm.departmentId = currentPage.value.department_id;\r\n      pageForm.tags = currentPage.value.tags || [];\r\n      \r\n      dialogMode.value = 'edit';\r\n      pageDialogVisible.value = true;\r\n    };\r\n\r\n    // View page revisions\r\n    const viewRevisions = async () => {\r\n      if (!currentPage.value) return;\r\n      \r\n      try {\r\n        // If revisions are not already loaded with the page\r\n        if (!pageRevisions.value || pageRevisions.value.length === 0) {\r\n          await store.dispatch('knowledge/fetchPageRevisions', currentPage.value.id);\r\n        }\r\n        \r\n        revisionsDialogVisible.value = true;\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load revision history',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // View specific revision\r\n    const viewRevision = async (revisionId) => {\r\n      if (!currentPage.value) return;\r\n      \r\n      try {\r\n        await store.dispatch('knowledge/fetchRevision', {\r\n          id: currentPage.value.id,\r\n          revisionId\r\n        });\r\n        \r\n        // Open edit dialog with revision content\r\n        resetPageForm();\r\n        \r\n        // Get the revision data\r\n        const revision = store.state.knowledge.currentRevision;\r\n        \r\n        pageForm.id = currentPage.value.id;\r\n        pageForm.title = revision.title;\r\n        pageForm.content = revision.content;\r\n        pageForm.parentId = revision.parent_id;\r\n        pageForm.departmentId = revision.department_id;\r\n        pageForm.tags = revision.tags || [];\r\n        \r\n        dialogMode.value = 'edit';\r\n        pageDialogVisible.value = true;\r\n        revisionsDialogVisible.value = false;\r\n        \r\n        // Show info toast\r\n        toast.add({\r\n          severity: 'info',\r\n          summary: 'Viewing Revision',\r\n          detail: `Viewing version from ${formatDate(revision.created_at)}`,\r\n          life: 5000\r\n        });\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load revision',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Restore revision\r\n    const restoreRevision = async (revisionId) => {\r\n      if (!currentPage.value) return;\r\n      \r\n      confirm.require({\r\n        message: 'Are you sure you want to restore this version? Current content will be overwritten.',\r\n        header: 'Restore Confirmation',\r\n        icon: 'pi pi-info-circle',\r\n        acceptClass: 'p-button-primary',\r\n        accept: async () => {\r\n          try {\r\n            // First fetch the revision\r\n            await store.dispatch('knowledge/fetchRevision', {\r\n              id: currentPage.value.id,\r\n              revisionId\r\n            });\r\n            \r\n            // Get the revision data\r\n            const revision = store.state.knowledge.currentRevision;\r\n            \r\n            // Prepare update data\r\n            const updateData = {\r\n              id: currentPage.value.id,\r\n              title: revision.title,\r\n              content: revision.content,\r\n              parentId: revision.parent_id,\r\n              departmentId: revision.department_id,\r\n              tags: revision.tags || [],\r\n              changeDescription: `Restored version from ${formatDate(revision.created_at)}`\r\n            };\r\n            \r\n            // Update page with revision content\r\n            await store.dispatch('knowledge/updateWikiPage', updateData);\r\n            \r\n            // Close dialog and refresh page\r\n            revisionsDialogVisible.value = false;\r\n            await viewPage(currentPage.value.id);\r\n            \r\n            toast.add({\r\n              severity: 'success',\r\n              summary: 'Revision Restored',\r\n              detail: 'The page has been restored to a previous version',\r\n              life: 3000\r\n            });\r\n          } catch (error) {\r\n            toast.add({\r\n              severity: 'error',\r\n              summary: 'Error',\r\n              detail: 'Failed to restore revision',\r\n              life: 3000\r\n            });\r\n          }\r\n        },\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Confirm delete page\r\n    const confirmDeletePage = () => {\r\n      if (!currentPage.value) return;\r\n      \r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this page? This action cannot be undone.',\r\n        header: 'Delete Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deletePage(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Delete page\r\n    const deletePage = async () => {\r\n      if (!currentPage.value) return;\r\n      \r\n      try {\r\n        await store.dispatch('knowledge/deleteWikiPage', currentPage.value.id);\r\n        \r\n        // Navigate back to wiki home\r\n        router.push('/wiki');\r\n        \r\n        // Show success toast\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Page Deleted',\r\n          detail: 'Wiki page has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh wiki tree\r\n        fetchWikiTree();\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to delete wiki page',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Close page dialog\r\n    const closePageDialog = () => {\r\n      pageDialogVisible.value = false;\r\n      submitted.value = false;\r\n    };\r\n\r\n    // Reset page form\r\n    const resetPageForm = () => {\r\n      Object.assign(pageForm, {\r\n        id: null,\r\n        title: '',\r\n        content: '',\r\n        parentId: null,\r\n        departmentId: null,\r\n        tags: []\r\n      });\r\n    };\r\n\r\n    // Show markdown help\r\n    const showMarkdownHelp = () => {\r\n      markdownHelpVisible.value = true;\r\n    };\r\n\r\n    // Save page (create or update)\r\n    const savePage = async () => {\r\n      submitted.value = true;\r\n      \r\n      // Validate required fields\r\n      if (!pageForm.title || !pageForm.content) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      try {\r\n        // Prepare page data\r\n        const pageData = {\r\n          title: pageForm.title,\r\n          content: pageForm.content,\r\n          parentId: pageForm.parentId,\r\n          departmentId: pageForm.departmentId,\r\n          tags: pageForm.tags\r\n        };\r\n        \r\n        // Add change description for edit mode\r\n        if (dialogMode.value === 'edit') {\r\n          pageData.changeDescription = 'Updated page content';\r\n        }\r\n        \r\n        let savedPage;\r\n        \r\n        if (dialogMode.value === 'create') {\r\n          // Create new page\r\n          savedPage = await store.dispatch('knowledge/createWikiPage', pageData);\r\n        } else {\r\n          // Update existing page\r\n          savedPage = await store.dispatch('knowledge/updateWikiPage', {\r\n            id: pageForm.id,\r\n            ...pageData\r\n          });\r\n        }\r\n        \r\n        // Close dialog\r\n        pageDialogVisible.value = false;\r\n        submitted.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: dialogMode.value === 'create' ? 'Page Created' : 'Page Updated',\r\n          detail: dialogMode.value === 'create' ? 'Wiki page has been created successfully' : 'Wiki page has been updated successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Navigate to saved page\r\n        if (savedPage) {\r\n          // Refresh wiki tree first\r\n          await fetchWikiTree();\r\n          \r\n          // Then view the page\r\n          await viewPage(savedPage.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error saving wiki page:', error);\r\n        \r\n        const errorMsg = error.response?.data?.message || 'Failed to save wiki page';\r\n        \r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: errorMsg,\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n      }\r\n    };\r\n\r\n    // Fetch wiki tree\r\n    const fetchWikiTree = async () => {\r\n      try {\r\n        await store.dispatch('knowledge/fetchWikiTree');\r\n      } catch (error) {\r\n        console.error('Error fetching wiki tree:', error);\r\n      }\r\n    };\r\n\r\n    // Load initial data\r\n    const loadInitialData = async () => {\r\n      try {\r\n        // Fetch wiki pages and tree structure\r\n        await Promise.all([\r\n          store.dispatch('knowledge/fetchWikiPages'),\r\n          fetchWikiTree()\r\n        ]);\r\n        \r\n        // If route includes an ID, load that page\r\n        const pageId = router.currentRoute.value.params.id;\r\n        if (pageId) {\r\n          await viewPage(pageId);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading wiki data:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load wiki data',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(() => {\r\n      loadInitialData();\r\n      \r\n      // Load departments (in a real app, this would come from an API)\r\n      store.dispatch('departments/fetchDepartments')\r\n        .then(response => {\r\n          if (response && response.data) {\r\n            departments.value = response.data.map(dept => ({\r\n              id: dept.id,\r\n              name: dept.name\r\n            }));\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error loading departments:', error);\r\n        });\r\n    });\r\n\r\n    // Watch for route changes\r\n    watch(() => router.currentRoute.value.params.id, (newId) => {\r\n      if (newId) {\r\n        viewPage(newId);\r\n      } else {\r\n        // Reset current page if no ID in route\r\n        store.commit('knowledge/setCurrentPage', null);\r\n      }\r\n    });\r\n\r\n    return {\r\n      // State\r\n      searchQuery,\r\n      isSearching,\r\n      pageDialogVisible,\r\n      revisionsDialogVisible,\r\n      markdownHelpVisible,\r\n      dialogMode,\r\n      submitted,\r\n      saving,\r\n      expandedKeys,\r\n      pageForm,\r\n      departments,\r\n      \r\n      // Computed properties\r\n      isLoading,\r\n      wikiPages,\r\n      wikiTreeNodes,\r\n      currentPage,\r\n      parentPageOptions,\r\n      breadcrumbItems,\r\n      pageRevisions,\r\n      formattedRevisions,\r\n      renderedContent,\r\n      searchResults,\r\n      \r\n      // Methods\r\n      formatDate,\r\n      debounceSearch,\r\n      clearSearch,\r\n      viewPage,\r\n      openNewPageDialog,\r\n      editPage,\r\n      closePageDialog,\r\n      savePage,\r\n      viewRevisions,\r\n      viewRevision,\r\n      restoreRevision,\r\n      confirmDeletePage,\r\n      showMarkdownHelp\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wiki-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Wiki content layout */\r\n.wiki-content {\r\n  display: flex;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.wiki-sidebar {\r\n  width: 300px;\r\n  flex-shrink: 0;\r\n  height: calc(100vh - 180px);\r\n  overflow-y: auto;\r\n  padding: 1rem;\r\n}\r\n\r\n.wiki-main {\r\n  flex: 1;\r\n  min-width: 0; /* For proper text wrapping */\r\n}\r\n\r\n.wiki-search {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.wiki-tree-title, .search-results-title {\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.5rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Wiki tree customization */\r\n.wiki-node {\r\n  padding: 0.375rem 0.25rem;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.wiki-node:hover {\r\n  background-color: var(--surface-hover);\r\n}\r\n\r\n.active-node {\r\n  background-color: var(--primary-color-lighter, rgba(103, 58, 183, 0.1));\r\n  font-weight: 500;\r\n}\r\n\r\n/* Search results styling */\r\n.search-results-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.search-result-item {\r\n  padding: 0.75rem;\r\n  border-radius: 4px;\r\n  margin-bottom: 0.5rem;\r\n  background-color: var(--surface-ground);\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.search-result-item:hover {\r\n  background-color: var(--surface-hover);\r\n}\r\n\r\n.search-result-title {\r\n  font-weight: 500;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.search-result-path {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Wiki empty states */\r\n.wiki-empty, .wiki-sidebar-loading, .wiki-empty-results {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 3rem 1rem;\r\n  text-align: center;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.wiki-empty i, .wiki-empty-results i {\r\n  font-size: 3rem;\r\n  margin-bottom: 1rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n.wiki-empty h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 0.5rem;\r\n  color: var(--text-color);\r\n}\r\n\r\n/* Wiki page styling */\r\n.wiki-page {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.wiki-page-header {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.wiki-page-title {\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  margin: 0 0 0.5rem 0;\r\n  color: var(--text-color);\r\n}\r\n\r\n.wiki-page-meta {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.wiki-page-author, .wiki-page-date {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.25rem;\r\n}\r\n\r\n.wiki-page-actions {\r\n  margin-left: auto;\r\n}\r\n\r\n.wiki-page-content {\r\n  line-height: 1.6;\r\n  font-size: 1rem;\r\n}\r\n\r\n.wiki-page-content h1 {\r\n  font-size: 1.75rem;\r\n  margin-top: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.wiki-page-content h2 {\r\n  font-size: 1.5rem;\r\n  margin-top: 1.5rem;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.wiki-page-content h3 {\r\n  font-size: 1.25rem;\r\n  margin-top: 1.25rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.wiki-page-content p {\r\n  margin: 0 0 1rem 0;\r\n}\r\n\r\n.wiki-page-content ul, .wiki-page-content ol {\r\n  margin: 0 0 1rem 0;\r\n  padding-left: 1.5rem;\r\n}\r\n\r\n.wiki-page-content code {\r\n  background-color: var(--surface-ground);\r\n  padding: 0.125rem 0.25rem;\r\n  border-radius: 3px;\r\n  font-family: monospace;\r\n}\r\n\r\n.wiki-page-content pre {\r\n  background-color: var(--surface-ground);\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  overflow-x: auto;\r\n  margin: 0 0 1rem 0;\r\n}\r\n\r\n.wiki-page-content pre code {\r\n  background-color: transparent;\r\n  padding: 0;\r\n}\r\n\r\n.wiki-page-content blockquote {\r\n  border-left: 4px solid var(--primary-color-lighter, rgba(103, 58, 183, 0.3));\r\n  padding-left: 1rem;\r\n  margin: 0 0 1rem 0;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.wiki-page-footer {\r\n  margin-top: 2rem;\r\n  padding-top: 1rem;\r\n  border-top: 1px solid var(--surface-border);\r\n}\r\n\r\n.wiki-page-tags {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.wiki-tag {\r\n  background-color: var(--surface-ground);\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 3px;\r\n  font-size: 0.75rem;\r\n}\r\n\r\n/* Revision dialog styling */\r\n.revision-item {\r\n  padding: 0.5rem 0;\r\n}\r\n\r\n.revision-content {\r\n  background-color: var(--surface-ground);\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.revision-content h3 {\r\n  margin: 0 0 0.5rem 0;\r\n  font-size: 1rem;\r\n}\r\n\r\n.revision-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.revision-description {\r\n  font-size: 0.875rem;\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.revision-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 0.5rem;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n/* Markdown help styling */\r\n.markdown-help-section {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.markdown-help-section h3 {\r\n  margin: 0 0 0.75rem 0;\r\n  padding-bottom: 0.5rem;\r\n  border-bottom: 1px solid var(--surface-border);\r\n}\r\n\r\n.markdown-example-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 1rem;\r\n}\r\n\r\n.markdown-example {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.markdown-code {\r\n  background-color: var(--surface-ground);\r\n  padding: 0.5rem;\r\n  border-radius: 4px 4px 0 0;\r\n  font-family: monospace;\r\n  border: 1px solid var(--surface-border);\r\n}\r\n\r\n.markdown-result {\r\n  background-color: var(--surface-card);\r\n  padding: 0.5rem;\r\n  border-radius: 0 0 4px 4px;\r\n  border: 1px solid var(--surface-border);\r\n  border-top: none;\r\n}\r\n\r\n/* Helper text for form fields */\r\n.form-helper-text {\r\n  font-size: 0.75rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media screen and (max-width: 991px) {\r\n  .wiki-content {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .wiki-sidebar {\r\n    width: 100%;\r\n    height: auto;\r\n    max-height: 300px;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .wiki-page-meta {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .wiki-page-actions {\r\n    margin-left: 0;\r\n    margin-top: 0.5rem;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 576px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .markdown-example-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .wiki-page-title {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style>","/home/pi/projects/intranet/frontend/src/views/Unauthorized.vue",["77"],"/home/pi/projects/intranet/frontend/src/views/Expenses.vue",["78","79","80","81"],"<template>\r\n  <div class=\"expenses-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Expenses</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Expense\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewExpenseAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense stats summary cards -->\r\n    <div class=\"grid expense-stats\">\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Draft</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.draft?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.draft?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Submitted</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.submitted?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.submitted?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Approved</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.approved?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.approved?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Paid</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.paid?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.paid?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense filters and table -->\r\n    <div class=\"card\">\r\n      <div class=\"expense-filters\">\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-3\">\r\n            <span class=\"p-input-icon-left w-full\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText \r\n                v-model=\"filters.search\" \r\n                placeholder=\"Search expenses\" \r\n                class=\"w-full\"\r\n                @input=\"onFilterChange\"\r\n              />\r\n            </span>\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.status\"\r\n              :options=\"statusOptions\"\r\n              optionLabel=\"label\"\r\n              optionValue=\"value\"\r\n              placeholder=\"Status\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.category\"\r\n              :options=\"categoryOptions\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"name\"\r\n              placeholder=\"Category\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Calendar\r\n              v-model=\"filters.dateRange\"\r\n              selectionMode=\"range\"\r\n              placeholder=\"Date range\"\r\n              class=\"w-full\"\r\n              @date-select=\"onFilterChange\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading spinner -->\r\n      <div v-if=\"loading\" class=\"loading-container\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- Expense table -->\r\n      <DataTable \r\n        v-else\r\n        :value=\"expenses\" \r\n        :paginator=\"true\" \r\n        :rows=\"10\"\r\n        :rowsPerPageOptions=\"[10, 25, 50]\"\r\n        tableStyle=\"min-width: 50rem\"\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} expenses\"\r\n        responsiveLayout=\"scroll\"\r\n        :loading=\"tableLoading\"\r\n        sortField=\"date\"\r\n        :sortOrder=\"-1\"\r\n        v-model:selection=\"selectedExpenses\"\r\n        dataKey=\"id\"\r\n        @rowSelect=\"onExpenseSelect\"\r\n        @rowUnselect=\"onExpenseUnselect\"\r\n        class=\"expense-table\"\r\n      >\r\n        <template #empty>\r\n          <div class=\"empty-message\">\r\n            <i class=\"pi pi-money-bill\"></i>\r\n            <p>No expenses found</p>\r\n          </div>\r\n        </template>\r\n\r\n        <Column selectionMode=\"single\" style=\"width: 3rem\" :exportable=\"false\"></Column>\r\n        \r\n        <Column field=\"date\" header=\"Date\" sortable>\r\n          <template #body=\"slotProps\">\r\n            {{ formatDate(slotProps.data.date) }}\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"description\" header=\"Description\" sortable></Column>\r\n\r\n        <Column field=\"category\" header=\"Category\" sortable>\r\n          <template #body=\"slotProps\">\r\n            <Tag :value=\"slotProps.data.category\" :severity=\"getCategorySeverity(slotProps.data.category)\" />\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"amount\" header=\"Amount\" sortable>\r\n          <template #body=\"slotProps\">\r\n            {{ formatCurrency(slotProps.data.amount) }}\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"status\" header=\"Status\" sortable>\r\n          <template #body=\"slotProps\">\r\n            <Tag \r\n              :value=\"formatStatus(slotProps.data.status)\" \r\n              :severity=\"getStatusSeverity(slotProps.data.status)\" \r\n            />\r\n          </template>\r\n        </Column>\r\n\r\n        <Column header=\"Actions\" style=\"width: 8rem\">\r\n          <template #body=\"slotProps\">\r\n            <div class=\"action-buttons\">\r\n              <Button \r\n                icon=\"pi pi-eye\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"viewExpense(slotProps.data)\" \r\n                tooltip=\"View\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n              <Button \r\n                v-if=\"canEditExpense(slotProps.data)\" \r\n                icon=\"pi pi-pencil\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"editExpense(slotProps.data)\" \r\n                tooltip=\"Edit\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n              <Button \r\n                v-if=\"canDeleteExpense(slotProps.data)\" \r\n                icon=\"pi pi-trash\" \r\n                class=\"p-button-rounded p-button-text p-button-danger\" \r\n                @click=\"confirmDeleteExpense(slotProps.data)\" \r\n                tooltip=\"Delete\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n            </div>\r\n          </template>\r\n        </Column>\r\n      </DataTable>\r\n\r\n      <!-- Paginator controls -->\r\n      <div class=\"pagination-controls\">\r\n        <div class=\"pagination-summary\">\r\n          {{ paginationSummary }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"expenseDialogVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New Expense' : 'Edit Expense'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid expense-dialog\"\r\n    >\r\n      <div class=\"expense-form\">\r\n        <div class=\"field\">\r\n          <label for=\"amount\">Amount *</label>\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">$</span>\r\n            <InputNumber \r\n              id=\"amount\" \r\n              v-model=\"expense.amount\" \r\n              mode=\"decimal\" \r\n              :minFractionDigits=\"2\" \r\n              :maxFractionDigits=\"2\" \r\n              required \r\n              :class=\"{ 'p-invalid': submitted && !expense.amount }\"\r\n            />\r\n          </div>\r\n          <small v-if=\"submitted && !expense.amount\" class=\"p-error\">Amount is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"date\">Date *</label>\r\n          <Calendar \r\n            id=\"date\" \r\n            v-model=\"expense.date\" \r\n            dateFormat=\"mm/dd/yy\" \r\n            :showIcon=\"true\" \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.date }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.date\" class=\"p-error\">Date is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"description\">Description *</label>\r\n          <Textarea \r\n            id=\"description\" \r\n            v-model=\"expense.description\" \r\n            rows=\"3\" \r\n            autoResize \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.description }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.description\" class=\"p-error\">Description is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"category\">Category *</label>\r\n          <Dropdown \r\n            id=\"category\" \r\n            v-model=\"expense.category\" \r\n            :options=\"categoryOptions\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"name\" \r\n            placeholder=\"Select a category\" \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.category }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.category\" class=\"p-error\">Category is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"receipt\">Receipt</label>\r\n          <div class=\"p-fileupload-content\">\r\n            <FileUpload \r\n              ref=\"fileUpload\"\r\n              mode=\"basic\" \r\n              name=\"receipt\" \r\n              accept=\"image/*,application/pdf\" \r\n              :maxFileSize=\"5000000\" \r\n              chooseLabel=\"Select Receipt\" \r\n              class=\"p-button-outlined w-full\"\r\n              @select=\"onFileSelect\"\r\n              @error=\"onFileError\"\r\n            />\r\n          </div>\r\n          <small v-if=\"fileError\" class=\"p-error\">{{ fileError }}</small>\r\n          \r\n          <!-- Preview of existing receipt -->\r\n          <div v-if=\"expense.receiptPath && !selectedFile\" class=\"receipt-preview\">\r\n            <div class=\"receipt-preview-info\">\r\n              <i class=\"pi pi-file-pdf\" v-if=\"isReceiptPdf\"></i>\r\n              <i class=\"pi pi-image\" v-else></i>\r\n              <span>Current receipt</span>\r\n            </div>\r\n            <Button \r\n              icon=\"pi pi-download\" \r\n              class=\"p-button-text p-button-sm\" \r\n              @click=\"downloadReceipt\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeExpenseAppDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && canDeleteExpense(expense)\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteExpense(expense)\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveExpense\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Expense Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"expenseDetailsVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"selectedExpense ? `Expense: ${formatCurrency(selectedExpense.amount)}` : 'Expense Details'\" \r\n      :modal=\"true\"\r\n      class=\"expense-details-dialog\"\r\n    >\r\n      <div v-if=\"selectedExpense\" class=\"expense-details\">\r\n        <div class=\"expense-header\">\r\n          <div class=\"expense-amount\">\r\n            <span class=\"amount-value\">{{ formatCurrency(selectedExpense.amount) }}</span>\r\n            <span class=\"currency\">{{ selectedExpense.currency || 'USD' }}</span>\r\n          </div>\r\n          <Tag \r\n            :value=\"formatStatus(selectedExpense.status)\" \r\n            :severity=\"getStatusSeverity(selectedExpense.status)\" \r\n            class=\"status-tag\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"expense-info-grid\">\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Date</div>\r\n            <div class=\"info-value\">{{ formatDate(selectedExpense.date) }}</div>\r\n          </div>\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Category</div>\r\n            <div class=\"info-value\">\r\n              <Tag :value=\"selectedExpense.category\" :severity=\"getCategorySeverity(selectedExpense.category)\" />\r\n            </div>\r\n          </div>\r\n          <div v-if=\"selectedExpense.user_name\" class=\"info-group\">\r\n            <div class=\"info-label\">Submitted By</div>\r\n            <div class=\"info-value\">{{ selectedExpense.user_name }}</div>\r\n          </div>\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Created</div>\r\n            <div class=\"info-value\">{{ formatDate(selectedExpense.created_at) }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <Divider />\r\n\r\n        <div class=\"description-section\">\r\n          <h3>Description</h3>\r\n          <div class=\"description-content\">{{ selectedExpense.description }}</div>\r\n        </div>\r\n\r\n        <div v-if=\"selectedExpense.receipt_path\" class=\"receipt-section\">\r\n          <Divider />\r\n          <h3>Receipt</h3>\r\n          <div class=\"receipt-actions\">\r\n            <Button \r\n              label=\"View Receipt\" \r\n              icon=\"pi pi-eye\" \r\n              class=\"p-button-outlined\" \r\n              @click=\"viewReceipt\" \r\n            />\r\n            <Button \r\n              label=\"Download\" \r\n              icon=\"pi pi-download\" \r\n              class=\"p-button-text\" \r\n              @click=\"downloadReceiptFromDetails\" \r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div v-if=\"selectedExpense.approvals && selectedExpense.approvals.length > 0\" class=\"approvals-section\">\r\n          <Divider />\r\n          <h3>Approval History</h3>\r\n          <Timeline :value=\"formattedApprovals\" class=\"approval-timeline\">\r\n            <template #content=\"slotProps\">\r\n              <div class=\"approval-item\">\r\n                <small class=\"approval-date\">{{ formatDate(slotProps.item.date) }}</small>\r\n                <div class=\"approval-content\">\r\n                  <div class=\"approval-description\">\r\n                    <span class=\"approval-user\">{{ slotProps.item.user }}</span>\r\n                    <span> {{ slotProps.item.action }} </span>\r\n                  </div>\r\n                  <div v-if=\"slotProps.item.comments\" class=\"approval-comments\">\r\n                    \"{{ slotProps.item.comments }}\"\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </template>\r\n            <template #opposite=\"slotProps\">\r\n              <Tag \r\n                :value=\"slotProps.item.status\" \r\n                :severity=\"getStatusSeverity(slotProps.item.status)\" \r\n              />\r\n            </template>\r\n          </Timeline>\r\n        </div>\r\n\r\n        <!-- Action buttons for expense workflow -->\r\n        <div v-if=\"showExpenseActions\" class=\"expense-actions\">\r\n          <Divider />\r\n          <h3>Actions</h3>\r\n          <div class=\"expense-workflow-buttons\">\r\n            <!-- Submit button (for draft expenses) -->\r\n            <Button \r\n              v-if=\"canSubmitExpense\"\r\n              label=\"Submit for Approval\" \r\n              icon=\"pi pi-send\" \r\n              class=\"p-button-success\" \r\n              @click=\"submitExpense\" \r\n              :loading=\"processingAction\"\r\n            />\r\n\r\n            <!-- Approval buttons (for managers reviewing expenses) -->\r\n            <div v-if=\"canReviewExpense\" class=\"review-buttons\">\r\n              <Button \r\n                label=\"Approve\" \r\n                icon=\"pi pi-check\" \r\n                class=\"p-button-success mr-2\" \r\n                @click=\"approveExpense\" \r\n                :loading=\"processingAction\"\r\n              />\r\n              <Button \r\n                label=\"Reject\" \r\n                icon=\"pi pi-times\" \r\n                class=\"p-button-danger\" \r\n                @click=\"openRejectAppDialog\" \r\n                :loading=\"processingAction\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Payment button (for admins) -->\r\n            <Button \r\n              v-if=\"canMarkAsPaid\"\r\n              label=\"Mark as Paid\" \r\n              icon=\"pi pi-check-circle\" \r\n              class=\"p-button-primary\" \r\n              @click=\"markAsPaid\" \r\n              :loading=\"processingAction\"\r\n            />\r\n\r\n            <!-- Edit button (if the expense can be edited) -->\r\n            <Button \r\n              v-if=\"canEditExpense(selectedExpense)\"\r\n              label=\"Edit Expense\" \r\n              icon=\"pi pi-pencil\" \r\n              class=\"p-button-secondary\" \r\n              @click=\"editFromDetails\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"expenseDetailsVisible = false\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Reject Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"rejectDialogVisible\" \r\n      :style=\"{ width: '450px' }\" \r\n      header=\"Reject Expense\" \r\n      :modal=\"true\"\r\n      class=\"p-fluid\"\r\n    >\r\n      <div class=\"reject-form\">\r\n        <div class=\"field\">\r\n          <label for=\"rejectReason\">Reason for Rejection</label>\r\n          <Textarea \r\n            id=\"rejectReason\" \r\n            v-model=\"rejectReason\" \r\n            rows=\"3\" \r\n            autoResize \r\n            placeholder=\"Please provide a reason for rejecting this expense\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"rejectDialogVisible = false\" \r\n        />\r\n        <Button \r\n          label=\"Reject\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-danger\" \r\n          @click=\"rejectExpense\" \r\n          :loading=\"processingAction\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport InputText from 'primevue/inputtext';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Calendar from 'primevue/calendar';\r\nimport DataTable from 'primevue/datatable';\r\nimport Column from 'primevue/column';\r\nimport Tag from 'primevue/tag';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport InputNumber from 'primevue/inputnumber';\r\nimport Textarea from 'primevue/textarea';\r\nimport FileUpload from 'primevue/fileupload';\r\nimport Divider from 'primevue/divider';\r\nimport Timeline from 'primevue/timeline';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\n\r\nexport default {\r\n  name: 'ExpensesView',\r\n  components: {\r\n    Button,\r\n    InputText,\r\n    Dropdown,\r\n    Calendar,\r\n    DataTable,\r\n    Column,\r\n    Tag,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    InputNumber,\r\n    Textarea,\r\n    FileUpload,\r\n    Divider,\r\n    Timeline,\r\n    ConfirmDialog\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n//    const router = useRouter();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n    const fileUpload = ref(null);\r\n\r\n    // State\r\n    const loading = ref(true);\r\n    const tableLoading = ref(false);\r\n    const expenses = ref([]);\r\n    const stats = ref({});\r\n    const selectedExpenses = ref(null);\r\n    const selectedExpense = ref(null);\r\n    const expenseDialogVisible = ref(false);\r\n    const expenseDetailsVisible = ref(false);\r\n    const rejectDialogVisible = ref(false);\r\n    const dialogMode = ref('create');\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const processingAction = ref(false);\r\n    const rejectReason = ref('');\r\n    const selectedFile = ref(null);\r\n    const fileError = ref('');\r\n\r\n    // Pagination state\r\n    const pagination = ref({\r\n      page: 1,\r\n      rows: 10,\r\n      totalRecords: 0\r\n    });\r\n\r\n    // Filter state\r\n    const filters = reactive({\r\n      search: '',\r\n      status: null,\r\n      dateRange: null,\r\n      category: null\r\n    });\r\n\r\n    // Form state\r\n    const expense = reactive({\r\n      id: null,\r\n      amount: null,\r\n      currency: 'USD',\r\n      date: null,\r\n      description: '',\r\n      category: null,\r\n      receiptPath: null,\r\n      status: 'draft'\r\n    });\r\n\r\n    // Options for status filter\r\n    const statusOptions = [\r\n      { label: 'All Statuses', value: null },\r\n      { label: 'Draft', value: 'draft' },\r\n      { label: 'Submitted', value: 'submitted' },\r\n      { label: 'Approved', value: 'approved' },\r\n      { label: 'Rejected', value: 'rejected' },\r\n      { label: 'Paid', value: 'paid' }\r\n    ];\r\n\r\n    // Options for category filter (hardcoded for now, should come from API)\r\n    const categoryOptions = [\r\n      { name: 'Travel' },\r\n      { name: 'Meals' },\r\n      { name: 'Office Supplies' },\r\n      { name: 'Training' },\r\n      { name: 'Other' }\r\n    ];\r\n\r\n    // Format status for display\r\n    const formatStatus = (status) => {\r\n      if (!status) return '';\r\n      return status.charAt(0).toUpperCase() + status.slice(1);\r\n    };\r\n\r\n    // Format currency\r\n    const formatCurrency = (amount) => {\r\n      if (amount === undefined || amount === null) return '$0.00';\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount);\r\n    };\r\n\r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      }).format(date);\r\n    };\r\n\r\n    // Get severity class for status tag\r\n    const getStatusSeverity = (status) => {\r\n      switch (status) {\r\n        case 'draft': return 'info';\r\n        case 'submitted': return 'warning';\r\n        case 'approved': return 'success';\r\n        case 'rejected': return 'danger';\r\n        case 'paid': return 'success';\r\n        default: return 'info';\r\n      }\r\n    };\r\n\r\n    // Get severity class for category tag\r\n    const getCategorySeverity = (category) => {\r\n      switch (category) {\r\n        case 'Travel': return 'info';\r\n        case 'Meals': return 'success';\r\n        case 'Office Supplies': return 'warning';\r\n        case 'Training': return 'primary';\r\n        default: return 'secondary';\r\n      }\r\n    };\r\n\r\n    // Check if the current user can edit an expense\r\n    const canEditExpense = (expenseData) => {\r\n      if (!expenseData) return false;\r\n      \r\n      // Only draft and rejected expenses can be edited\r\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\r\n      \r\n      // Admin can edit any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // User can edit their own expenses\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return expenseData.user_id === currentUserId;\r\n    };\r\n\r\n    // Check if the current user can delete an expense\r\n    const canDeleteExpense = (expenseData) => {\r\n      if (!expenseData) return false;\r\n      \r\n      // Only draft and rejected expenses can be deleted\r\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\r\n      \r\n      // Admin can delete any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // User can delete their own expenses\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return expenseData.user_id === currentUserId;\r\n    };\r\n\r\n    // Pagination summary text\r\n    const paginationSummary = computed(() => {\r\n      const { page, rows, totalRecords } = pagination.value;\r\n      const first = (page - 1) * rows + 1;\r\n      const last = Math.min(page * rows, totalRecords);\r\n      return `Showing ${first} to ${last} of ${totalRecords} expenses`;\r\n    });\r\n\r\n    // Check if user can submit the selected expense\r\n    const canSubmitExpense = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'draft') return false;\r\n      \r\n      // Only the owner can submit their expense\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedExpense.value.user_id === currentUserId;\r\n    });\r\n\r\n    // Check if user can review (approve/reject) the selected expense\r\n    const canReviewExpense = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'submitted') return false;\r\n      \r\n      // Admin can approve any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // Managers can approve expenses of their direct reports\r\n      if (store.getters['auth/isManager']) {\r\n        // In a real app, we would check if the expense is from a direct report\r\n        // For now, we'll simulate this\r\n        return selectedExpense.value.user_manager_id === store.getters['auth/currentUser']?.id;\r\n      }\r\n      \r\n      return false;\r\n    });\r\n\r\n    // Check if user can mark the expense as paid\r\n    const canMarkAsPaid = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'approved') return false;\r\n      \r\n      // Only admin can mark as paid\r\n      return store.getters['auth/isAdmin'];\r\n    });\r\n\r\n    // Show actions section if user can perform any action on this expense\r\n    const showExpenseActions = computed(() => {\r\n      return canSubmitExpense.value || canReviewExpense.value || \r\n             canMarkAsPaid.value || canEditExpense(selectedExpense.value);\r\n    });\r\n\r\n    // Format approvals for timeline\r\n    const formattedApprovals = computed(() => {\r\n      if (!selectedExpense.value || !selectedExpense.value.approvals) return [];\r\n      \r\n      return selectedExpense.value.approvals.map(approval => ({\r\n        status: approval.status,\r\n        date: approval.updated_at || approval.created_at,\r\n        user: approval.approver_name,\r\n        action: getApprovalAction(approval.status),\r\n        comments: approval.comments\r\n      }));\r\n    });\r\n\r\n    // Determine action text for approval status\r\n    const getApprovalAction = (status) => {\r\n      switch (status) {\r\n        case 'approved': return 'approved this expense';\r\n        case 'rejected': return 'rejected this expense';\r\n        case 'pending': return 'needs to review this expense';\r\n        default: return 'reviewed this expense';\r\n      }\r\n    };\r\n\r\n    // Check if receipt is PDF\r\n    const isReceiptPdf = computed(() => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return false;\r\n      return selectedExpense.value.receipt_path.toLowerCase().endsWith('.pdf');\r\n    });\r\n\r\n    // Filter change handler\r\n    const onFilterChange = () => {\r\n      fetchExpenses();\r\n    };\r\n\r\n    // Fetch expenses from API\r\n    const fetchExpenses = async () => {\r\n      tableLoading.value = true;\r\n      \r\n      try {\r\n        // Build query parameters\r\n        const params = {\r\n          page: pagination.value.page,\r\n          limit: pagination.value.rows\r\n        };\r\n        \r\n        // Add filters if set\r\n        if (filters.search) params.search = filters.search;\r\n        if (filters.status) params.status = filters.status;\r\n        if (filters.category) params.category = filters.category;\r\n        \r\n        // Add date range if selected\r\n        if (filters.dateRange && Array.isArray(filters.dateRange) && filters.dateRange.length === 2) {\r\n          params.startDate = filters.dateRange[0].toISOString().split('T')[0];\r\n          params.endDate = filters.dateRange[1].toISOString().split('T')[0];\r\n        }\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll use mock data\r\n        const response = await mockFetchExpenses(params);\r\n        \r\n        expenses.value = response.data;\r\n        pagination.value.totalRecords = response.pagination.total;\r\n      } catch (error) {\r\n        console.error('Error fetching expenses:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load expenses',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        tableLoading.value = false;\r\n      }\r\n    };\r\n\r\n    // Fetch expense statistics\r\n    const fetchExpenseStats = async () => {\r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll use mock data\r\n        const response = await mockFetchExpenseStats();\r\n        stats.value = response;\r\n      } catch (error) {\r\n        console.error('Error fetching expense stats:', error);\r\n      }\r\n    };\r\n\r\n    // Mock function to fetch expenses\r\n    const mockFetchExpenses = (params) => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          // Generate mock data\r\n          const mockData = [\r\n            {\r\n              id: '1',\r\n              amount: 125.50,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 5),\r\n              description: 'Business lunch with clients',\r\n              category: 'Meals',\r\n              receipt_path: '/uploads/receipts/receipt1.pdf',\r\n              status: 'approved',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 4),\r\n              updated_at: new Date(2025, 3, 5),\r\n              approvals: [\r\n                {\r\n                  id: '101',\r\n                  status: 'approved',\r\n                  approver_id: '2',\r\n                  approver_name: 'Jane Smith',\r\n                  comments: 'Approved as per company policy',\r\n                  created_at: new Date(2025, 3, 5)\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              id: '2',\r\n              amount: 450.00,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 2),\r\n              description: 'Conference registration fee',\r\n              category: 'Training',\r\n              receipt_path: '/uploads/receipts/receipt2.pdf',\r\n              status: 'submitted',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 1),\r\n              updated_at: new Date(2025, 3, 2)\r\n            },\r\n            {\r\n              id: '3',\r\n              amount: 89.99,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 1),\r\n              description: 'Office supplies - printer ink',\r\n              category: 'Office Supplies',\r\n              receipt_path: '/uploads/receipts/receipt3.jpg',\r\n              status: 'draft',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 1)\r\n            }\r\n          ];\r\n          \r\n          // Filter data based on params\r\n          let filteredData = [...mockData];\r\n          \r\n          if (params.status) {\r\n            filteredData = filteredData.filter(expense => expense.status === params.status);\r\n          }\r\n          \r\n          if (params.category) {\r\n            filteredData = filteredData.filter(expense => expense.category === params.category);\r\n          }\r\n          \r\n          if (params.search) {\r\n            const search = params.search.toLowerCase();\r\n            filteredData = filteredData.filter(expense => \r\n              expense.description.toLowerCase().includes(search) ||\r\n              expense.category.toLowerCase().includes(search) ||\r\n              expense.user_name.toLowerCase().includes(search)\r\n            );\r\n          }\r\n          \r\n          if (params.startDate && params.endDate) {\r\n            const startDate = new Date(params.startDate);\r\n            const endDate = new Date(params.endDate);\r\n            filteredData = filteredData.filter(expense => {\r\n              const expenseDate = new Date(expense.date);\r\n              return expenseDate >= startDate && expenseDate <= endDate;\r\n            });\r\n          }\r\n          \r\n          // Calculate pagination\r\n          const total = filteredData.length;\r\n          const start = (params.page - 1) * params.limit;\r\n          const end = start + params.limit;\r\n          const paginatedData = filteredData.slice(start, end);\r\n          \r\n          resolve({\r\n            data: paginatedData,\r\n            pagination: {\r\n              total,\r\n              per_page: params.limit,\r\n              current_page: params.page,\r\n              last_page: Math.ceil(total / params.limit)\r\n            }\r\n          });\r\n        }, 500);\r\n      });\r\n    };\r\n\r\n    // Mock function to fetch expense statistics\r\n    const mockFetchExpenseStats = () => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            draft: {\r\n              count: 2,\r\n              total_amount: 120.50\r\n            },\r\n            submitted: {\r\n              count: 1,\r\n              total_amount: 450.00\r\n            },\r\n            approved: {\r\n              count: 3,\r\n              total_amount: 725.75\r\n            },\r\n            rejected: {\r\n              count: 1,\r\n              total_amount: 50.25\r\n            },\r\n            paid: {\r\n              count: 2,\r\n              total_amount: 600.25\r\n            }\r\n          });\r\n        }, 300);\r\n      });\r\n    };\r\n\r\n    // Open new expense dialog\r\n    const openNewExpenseDialog = () => {\r\n      resetExpenseForm();\r\n      expense.date = new Date(); // Set default date to today\r\n      dialogMode.value = 'create';\r\n      expenseDialogVisible.value = true;\r\n    };\r\n\r\n    // Close expense dialog\r\n    const closeExpenseDialog = () => {\r\n      expenseDialogVisible.value = false;\r\n      submitted.value = false;\r\n      fileError.value = '';\r\n      selectedFile.value = null;\r\n      if (fileUpload.value) {\r\n        fileUpload.value.clear();\r\n      }\r\n    };\r\n\r\n    // Reset expense form\r\n    const resetExpenseForm = () => {\r\n      expense.id = null;\r\n      expense.amount = null;\r\n      expense.currency = 'USD';\r\n      expense.date = null;\r\n      expense.description = '';\r\n      expense.category = null;\r\n      expense.receiptPath = null;\r\n      expense.status = 'draft';\r\n    };\r\n\r\n    // Handle file selection\r\n    const onFileSelect = (event) => {\r\n      fileError.value = '';\r\n      selectedFile.value = event.files[0];\r\n    };\r\n\r\n    // Handle file upload error\r\n    const onFileError = (event) => {\r\n      fileError.value = event.message;\r\n    };\r\n\r\n    // View an expense\r\n    const viewExpense = (expenseData) => {\r\n      selectedExpense.value = expenseData;\r\n      expenseDetailsVisible.value = true;\r\n    };\r\n\r\n    // Edit an expense\r\n    const editExpense = (expenseData) => {\r\n      resetExpenseForm();\r\n      \r\n      // Copy data to form\r\n      expense.id = expenseData.id;\r\n      expense.amount = expenseData.amount;\r\n      expense.currency = expenseData.currency || 'USD';\r\n      expense.date = new Date(expenseData.date);\r\n      expense.description = expenseData.description;\r\n      expense.category = expenseData.category;\r\n      expense.receiptPath = expenseData.receipt_path;\r\n      expense.status = expenseData.status;\r\n      \r\n      dialogMode.value = 'edit';\r\n      expenseDialogVisible.value = true;\r\n    };\r\n\r\n    // Edit from details view\r\n    const editFromDetails = () => {\r\n      if (!selectedExpense.value) return;\r\n      \r\n      // Close details dialog\r\n      expenseDetailsVisible.value = false;\r\n      \r\n      // Edit the expense\r\n      editExpense(selectedExpense.value);\r\n    };\r\n\r\n    // Confirm delete expense\r\n    const confirmDeleteExpense = (expenseData) => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this expense?',\r\n        header: 'Delete Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteExpense(expenseData),\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Delete expense\r\n    const deleteExpense = async (expenseData) => {\r\n      if (!expenseData || !expenseData.id) return;\r\n      \r\n      try {\r\n        // Close dialogs if open\r\n        expenseDialogVisible.value = false;\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        // Remove from local array\r\n        expenses.value = expenses.value.filter(e => e.id !== expenseData.id);\r\n        \r\n        // Update selection if needed\r\n        if (selectedExpense.value && selectedExpense.value.id === expenseData.id) {\r\n          selectedExpense.value = null;\r\n        }\r\n        \r\n        // Show success toast\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Deleted',\r\n          detail: 'Expense has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error deleting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to delete expense',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Save expense (create or update)\r\n    const saveExpense = async () => {\r\n      submitted.value = true;\r\n      \r\n      // Validate form\r\n      if (!expense.amount || !expense.date || !expense.description || !expense.category) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      try {\r\n        // Prepare form data for API submission\r\n        const formData = new FormData();\r\n        formData.append('amount', expense.amount);\r\n        formData.append('currency', expense.currency);\r\n        formData.append('date', expense.date.toISOString().split('T')[0]);\r\n        formData.append('description', expense.description);\r\n        formData.append('category', expense.category);\r\n        \r\n        if (selectedFile.value) {\r\n          formData.append('receipt', selectedFile.value);\r\n        }\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Generate mock response data\r\n        const savedExpense = {\r\n          id: expense.id || Math.random().toString(36).substring(2, 11),\r\n          amount: expense.amount,\r\n          currency: expense.currency,\r\n          date: expense.date,\r\n          description: expense.description,\r\n          category: expense.category,\r\n          receipt_path: selectedFile.value ? `/uploads/receipts/mock-${selectedFile.value.name}` : expense.receiptPath,\r\n          status: expense.status,\r\n          user_id: store.getters['auth/currentUser'].id,\r\n          user_name: store.getters['auth/userFullName'],\r\n          created_at: new Date(),\r\n          updated_at: new Date()\r\n        };\r\n        \r\n        // Update local data\r\n        if (expense.id) {\r\n          // Update existing record\r\n          const index = expenses.value.findIndex(e => e.id === expense.id);\r\n          if (index !== -1) {\r\n            expenses.value[index] = savedExpense;\r\n          }\r\n        } else {\r\n          // Add new record\r\n          expenses.value.unshift(savedExpense);\r\n        }\r\n        \r\n        // Close dialog\r\n        expenseDialogVisible.value = false;\r\n        submitted.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: dialogMode.value === 'create' ? 'Expense Created' : 'Expense Updated',\r\n          detail: dialogMode.value === 'create' ? 'Expense has been created successfully' : 'Expense has been updated successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error saving expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to save expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n        fileError.value = '';\r\n        selectedFile.value = null;\r\n        if (fileUpload.value) {\r\n          fileUpload.value.clear();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Submit expense for approval\r\n    const submitExpense = async () => {\r\n      if (!selectedExpense.value || !canSubmitExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'submitted';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Submitted',\r\n          detail: 'Expense has been submitted for approval',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error submitting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to submit expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Approve expense\r\n    const approveExpense = async () => {\r\n      if (!selectedExpense.value || !canReviewExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'approved';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Add approval record\r\n        if (!selectedExpense.value.approvals) {\r\n          selectedExpense.value.approvals = [];\r\n        }\r\n        \r\n        selectedExpense.value.approvals.push({\r\n          id: Math.random().toString(36).substring(2, 11),\r\n          status: 'approved',\r\n          approver_id: store.getters['auth/currentUser'].id,\r\n          approver_name: store.getters['auth/userFullName'],\r\n          comments: null,\r\n          created_at: new Date()\r\n        });\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Approved',\r\n          detail: 'Expense has been approved',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error approving expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to approve expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Open reject dialog\r\n    const openRejectDialog = () => {\r\n      rejectReason.value = '';\r\n      rejectDialogVisible.value = true;\r\n    };\r\n\r\n    // Reject expense\r\n    const rejectExpense = async () => {\r\n      if (!selectedExpense.value || !canReviewExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'rejected';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Add rejection record\r\n        if (!selectedExpense.value.approvals) {\r\n          selectedExpense.value.approvals = [];\r\n        }\r\n        \r\n        selectedExpense.value.approvals.push({\r\n          id: Math.random().toString(36).substring(2, 11),\r\n          status: 'rejected',\r\n          approver_id: store.getters['auth/currentUser'].id,\r\n          approver_name: store.getters['auth/userFullName'],\r\n          comments: rejectReason.value || null,\r\n          created_at: new Date()\r\n        });\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Rejected',\r\n          detail: 'Expense has been rejected',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close dialogs\r\n        rejectDialogVisible.value = false;\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error rejecting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to reject expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Mark expense as paid\r\n    const markAsPaid = async () => {\r\n      if (!selectedExpense.value || !canMarkAsPaid.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'paid';\r\n        selectedExpense.value.paid_at = new Date();\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Paid',\r\n          detail: 'Expense has been marked as paid',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error marking expense as paid:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to mark expense as paid',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // View receipt\r\n    const viewReceipt = () => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\r\n      \r\n      // In a real app, this would open the file in a new tab\r\n      window.open(selectedExpense.value.receipt_path, '_blank');\r\n    };\r\n\r\n    // Download receipt from details view\r\n    const downloadReceiptFromDetails = () => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\r\n      \r\n      // In a real app, this would trigger a download\r\n      // For now, just simulate opening the file\r\n      window.open(selectedExpense.value.receipt_path, '_blank');\r\n    };\r\n\r\n    // Download receipt from dialog\r\n    const downloadReceipt = () => {\r\n      if (!expense.receiptPath) return;\r\n      \r\n      // In a real app, this would trigger a download\r\n      // For now, just simulate opening the file\r\n      window.open(expense.receiptPath, '_blank');\r\n    };\r\n\r\n    // Row select handler\r\n    const onExpenseSelect = (event) => {\r\n      viewExpense(event.data);\r\n    };\r\n\r\n    // Row unselect handler\r\n    const onExpenseUnselect = () => {\r\n      // Nothing to do here\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(() => {\r\n      Promise.all([\r\n        fetchExpenses(),\r\n        fetchExpenseStats()\r\n      ]).finally(() => {\r\n        loading.value = false;\r\n      });\r\n    });\r\n\r\n    return {\r\n      loading,\r\n      tableLoading,\r\n      expenses,\r\n      stats,\r\n      selectedExpenses,\r\n      selectedExpense,\r\n      expenseDialogVisible,\r\n      expenseDetailsVisible,\r\n      rejectDialogVisible,\r\n      dialogMode,\r\n      saving,\r\n      submitted,\r\n      processingAction,\r\n      rejectReason,\r\n      selectedFile,\r\n      fileError,\r\n      fileUpload,\r\n      pagination,\r\n      filters,\r\n      expense,\r\n      statusOptions,\r\n      categoryOptions,\r\n      paginationSummary,\r\n      canSubmitExpense,\r\n      canReviewExpense,\r\n      canMarkAsPaid,\r\n      showExpenseActions,\r\n      formattedApprovals,\r\n      isReceiptPdf,\r\n      \r\n      // Methods\r\n      formatStatus,\r\n      formatCurrency,\r\n      formatDate,\r\n      getStatusSeverity,\r\n      getCategorySeverity,\r\n      canEditExpense,\r\n      canDeleteExpense,\r\n      onFilterChange,\r\n      openNewExpenseDialog,\r\n      closeExpenseDialog,\r\n      onFileSelect,\r\n      onFileError,\r\n      viewExpense,\r\n      editExpense,\r\n      editFromDetails,\r\n      confirmDeleteExpense,\r\n      saveExpense,\r\n      submitExpense,\r\n      approveExpense,\r\n      openRejectDialog,\r\n      rejectExpense,\r\n      markAsPaid,\r\n      viewReceipt,\r\n      downloadReceiptFromDetails,\r\n      downloadReceipt,\r\n      onExpenseSelect,\r\n      onExpenseUnselect\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.expenses-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Expense stats cards */\r\n.expense-stats {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.summary-card {\r\n  padding: 1.25rem;\r\n  background-color: var(--surface-card);\r\n  border-radius: 0.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.summary-title {\r\n  font-size: 1rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.summary-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.25rem;\r\n  color: var(--text-color);\r\n}\r\n\r\n.summary-count {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Filters */\r\n.expense-filters {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Loading container */\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3rem;\r\n}\r\n\r\n/* Empty state */\r\n.empty-message {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.empty-message i {\r\n  font-size: 2.5rem;\r\n  margin-bottom: 1rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n/* Action buttons */\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  gap: 0.5rem;\r\n}\r\n\r\n/* Pagination controls */\r\n.pagination-controls {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.pagination-summary {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Receipt preview */\r\n.receipt-preview {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 0.5rem 0.75rem;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.receipt-preview-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.receipt-preview-info i {\r\n  color: var(--primary-color);\r\n}\r\n\r\n/* Expense details */\r\n.expense-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.expense-amount {\r\n  display: flex;\r\n  align-items: baseline;\r\n}\r\n\r\n.amount-value {\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.currency {\r\n  font-size: 1rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.status-tag {\r\n  font-size: 0.875rem;\r\n  padding: 0.375rem 0.75rem;\r\n}\r\n\r\n.expense-info-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 1.25rem 2rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.info-label {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: var(--text-color);\r\n  font-weight: 500;\r\n}\r\n\r\n.description-section h3,\r\n.receipt-section h3,\r\n.approvals-section h3,\r\n.expense-actions h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.description-content {\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 1rem;\r\n  white-space: pre-line;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.receipt-actions {\r\n  display: flex;\r\n  gap: 0.75rem;\r\n}\r\n\r\n/* Approval timeline */\r\n.approval-timeline {\r\n  margin: 1rem 0;\r\n}\r\n\r\n.approval-item {\r\n  padding: 0.5rem 0;\r\n}\r\n\r\n.approval-date {\r\n  color: var(--text-color-secondary);\r\n  display: block;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.approval-content {\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 0.75rem;\r\n}\r\n\r\n.approval-description {\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.approval-user {\r\n  font-weight: 500;\r\n}\r\n\r\n.approval-comments {\r\n  font-style: italic;\r\n  color: var(--text-color-secondary);\r\n  font-size: 0.875rem;\r\n}\r\n\r\n/* Action buttons */\r\n.expense-workflow-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.75rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.review-buttons {\r\n  display: flex;\r\n  gap: 0.75rem;\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .expense-info-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .expense-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .review-buttons {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n  \r\n  .review-buttons .p-button {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>",{"ruleId":"82","severity":2,"message":"83","line":59,"column":7,"nodeType":"84","messageId":"85","endLine":59,"endColumn":13},{"ruleId":"82","severity":2,"message":"86","line":61,"column":7,"nodeType":"84","messageId":"85","endLine":61,"endColumn":13},{"ruleId":"82","severity":2,"message":"87","line":285,"column":7,"nodeType":"84","messageId":"85","endLine":285,"endColumn":13},{"ruleId":"88","severity":2,"message":"89","line":534,"column":10,"nodeType":"90","messageId":"91","endLine":534,"endColumn":19},{"ruleId":"82","severity":2,"message":"87","line":557,"column":5,"nodeType":"84","messageId":"85","endLine":557,"endColumn":11},{"ruleId":"82","severity":2,"message":"92","line":563,"column":5,"nodeType":"84","messageId":"85","endLine":563,"endColumn":11},{"ruleId":"82","severity":2,"message":"87","line":171,"column":7,"nodeType":"84","messageId":"85","endLine":171,"endColumn":13},{"ruleId":"82","severity":2,"message":"92","line":174,"column":7,"nodeType":"84","messageId":"85","endLine":174,"endColumn":13},{"ruleId":"93","severity":2,"message":"94","line":1,"column":1,"nodeType":null,"messageId":"95"},{"ruleId":"82","severity":2,"message":"87","line":394,"column":7,"nodeType":"84","messageId":"85","endLine":394,"endColumn":13},{"ruleId":"82","severity":2,"message":"92","line":400,"column":7,"nodeType":"84","messageId":"85","endLine":400,"endColumn":13},{"ruleId":"82","severity":2,"message":"96","line":401,"column":7,"nodeType":"84","messageId":"85","endLine":401,"endColumn":15},{"ruleId":null,"fatal":true,"severity":2,"message":"97","line":356,"column":7},{"ruleId":null,"fatal":true,"severity":2,"message":"98","line":641,"column":5},{"ruleId":"93","severity":2,"message":"99","line":1,"column":1,"nodeType":null,"messageId":"95"},{"ruleId":"88","severity":2,"message":"89","line":527,"column":10,"nodeType":"90","messageId":"91","endLine":527,"endColumn":19},{"ruleId":"82","severity":2,"message":"87","line":551,"column":5,"nodeType":"84","messageId":"85","endLine":551,"endColumn":11},{"ruleId":"82","severity":2,"message":"92","line":559,"column":5,"nodeType":"84","messageId":"85","endLine":559,"endColumn":11},{"ruleId":"82","severity":2,"message":"96","line":561,"column":5,"nodeType":"84","messageId":"85","endLine":561,"endColumn":13},"vue/no-reserved-component-names","Name \"Header\" is reserved in HTML.","Property","reservedInHtml","Name \"Footer\" is reserved in HTML.","Name \"Button\" is reserved in HTML.","no-unused-vars","'useRouter' is defined but never used.","Identifier","unusedVar","Name \"Dialog\" is reserved in HTML.","vue/multi-word-component-names","Component name \"Departments\" should always be multi-word.","unexpected","Name \"Textarea\" is reserved in HTML.","Parsing error: Identifier 'FullCalendar' has already been declared.\n\n\u001b[0m \u001b[90m  9 |\u001b[39m \u001b[36mimport\u001b[39m interactionPlugin \u001b[36mfrom\u001b[39m \u001b[32m'@fullcalendar/interaction'\u001b[39m\u001b[33m;\u001b[39m\n \u001b[90m 10 |\u001b[39m \u001b[36mimport\u001b[39m listPlugin \u001b[36mfrom\u001b[39m \u001b[32m'@fullcalendar/list'\u001b[39m\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 11 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mFullCalendar\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'@fullcalendar/vue3'\u001b[39m\n \u001b[90m    |\u001b[39m        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 12 |\u001b[39m\n \u001b[90m 13 |\u001b[39m \u001b[90m// PrimeVue components\u001b[39m\n \u001b[90m 14 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mButton\u001b[39m \u001b[36mfrom\u001b[39m \u001b[32m'primevue/button'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 198 |\u001b[39m         \u001b[36mreturn\u001b[39m node\u001b[33m;\u001b[39m\n \u001b[90m 199 |\u001b[39m       })\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 200 |\u001b[39m     }\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 201 |\u001b[39m\n \u001b[90m 202 |\u001b[39m     \u001b[90m// Check if a page is a descendant of another page\u001b[39m\n \u001b[90m 203 |\u001b[39m     \u001b[36mconst\u001b[39m isDescendant \u001b[33m=\u001b[39m (pageId\u001b[33m,\u001b[39m potentialAncestorId) \u001b[33m=>\u001b[39m {\u001b[0m","Component name \"Unauthorized\" should always be multi-word."]