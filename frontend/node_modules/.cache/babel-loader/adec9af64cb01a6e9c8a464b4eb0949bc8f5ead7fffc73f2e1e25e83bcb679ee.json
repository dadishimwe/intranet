{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { useConfirm } from 'primevue/useconfirm';\nimport { useToast } from 'primevue/usetoast';\n\n// PrimeVue components\nimport Button from 'primevue/button';\nimport InputText from 'primevue/inputtext';\nimport Dropdown from 'primevue/dropdown';\nimport Calendar from 'primevue/calendar';\nimport DataTable from 'primevue/datatable';\nimport Column from 'primevue/column';\nimport Tag from 'primevue/tag';\nimport ProgressSpinner from 'primevue/progressspinner';\nimport Dialog from 'primevue/dialog';\nimport InputNumber from 'primevue/inputnumber';\nimport Textarea from 'primevue/textarea';\nimport FileUpload from 'primevue/fileupload';\nimport Divider from 'primevue/divider';\nimport Timeline from 'primevue/timeline';\nimport ConfirmDialog from 'primevue/confirmdialog';\nexport default {\n  name: 'ExpensesView',\n  components: {\n    Button,\n    InputText,\n    Dropdown,\n    Calendar,\n    DataTable,\n    Column,\n    Tag,\n    ProgressSpinner,\n    Dialog,\n    InputNumber,\n    Textarea,\n    FileUpload,\n    Divider,\n    Timeline,\n    ConfirmDialog\n  },\n  setup() {\n    const store = useStore();\n    //    const router = useRouter();\n    const confirm = useConfirm();\n    const toast = useToast();\n    const fileUpload = ref(null);\n\n    // State\n    const loading = ref(true);\n    const tableLoading = ref(false);\n    const expenses = ref([]);\n    const stats = ref({});\n    const selectedExpenses = ref(null);\n    const selectedExpense = ref(null);\n    const expenseDialogVisible = ref(false);\n    const expenseDetailsVisible = ref(false);\n    const rejectDialogVisible = ref(false);\n    const dialogMode = ref('create');\n    const saving = ref(false);\n    const submitted = ref(false);\n    const processingAction = ref(false);\n    const rejectReason = ref('');\n    const selectedFile = ref(null);\n    const fileError = ref('');\n\n    // Pagination state\n    const pagination = ref({\n      page: 1,\n      rows: 10,\n      totalRecords: 0\n    });\n\n    // Filter state\n    const filters = reactive({\n      search: '',\n      status: null,\n      dateRange: null,\n      category: null\n    });\n\n    // Form state\n    const expense = reactive({\n      id: null,\n      amount: null,\n      currency: 'USD',\n      date: null,\n      description: '',\n      category: null,\n      receiptPath: null,\n      status: 'draft'\n    });\n\n    // Options for status filter\n    const statusOptions = [{\n      label: 'All Statuses',\n      value: null\n    }, {\n      label: 'Draft',\n      value: 'draft'\n    }, {\n      label: 'Submitted',\n      value: 'submitted'\n    }, {\n      label: 'Approved',\n      value: 'approved'\n    }, {\n      label: 'Rejected',\n      value: 'rejected'\n    }, {\n      label: 'Paid',\n      value: 'paid'\n    }];\n\n    // Options for category filter (hardcoded for now, should come from API)\n    const categoryOptions = [{\n      name: 'Travel'\n    }, {\n      name: 'Meals'\n    }, {\n      name: 'Office Supplies'\n    }, {\n      name: 'Training'\n    }, {\n      name: 'Other'\n    }];\n\n    // Format status for display\n    const formatStatus = status => {\n      if (!status) return '';\n      return status.charAt(0).toUpperCase() + status.slice(1);\n    };\n\n    // Format currency\n    const formatCurrency = amount => {\n      if (amount === undefined || amount === null) return '$0.00';\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(amount);\n    };\n\n    // Format date\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      }).format(date);\n    };\n\n    // Get severity class for status tag\n    const getStatusSeverity = status => {\n      switch (status) {\n        case 'draft':\n          return 'info';\n        case 'submitted':\n          return 'warning';\n        case 'approved':\n          return 'success';\n        case 'rejected':\n          return 'danger';\n        case 'paid':\n          return 'success';\n        default:\n          return 'info';\n      }\n    };\n\n    // Get severity class for category tag\n    const getCategorySeverity = category => {\n      switch (category) {\n        case 'Travel':\n          return 'info';\n        case 'Meals':\n          return 'success';\n        case 'Office Supplies':\n          return 'warning';\n        case 'Training':\n          return 'primary';\n        default:\n          return 'secondary';\n      }\n    };\n\n    // Check if the current user can edit an expense\n    const canEditExpense = expenseData => {\n      if (!expenseData) return false;\n\n      // Only draft and rejected expenses can be edited\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\n\n      // Admin can edit any expense\n      if (store.getters['auth/isAdmin']) return true;\n\n      // User can edit their own expenses\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      return expenseData.user_id === currentUserId;\n    };\n\n    // Check if the current user can delete an expense\n    const canDeleteExpense = expenseData => {\n      if (!expenseData) return false;\n\n      // Only draft and rejected expenses can be deleted\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\n\n      // Admin can delete any expense\n      if (store.getters['auth/isAdmin']) return true;\n\n      // User can delete their own expenses\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      return expenseData.user_id === currentUserId;\n    };\n\n    // Pagination summary text\n    const paginationSummary = computed(() => {\n      const {\n        page,\n        rows,\n        totalRecords\n      } = pagination.value;\n      const first = (page - 1) * rows + 1;\n      const last = Math.min(page * rows, totalRecords);\n      return `Showing ${first} to ${last} of ${totalRecords} expenses`;\n    });\n\n    // Check if user can submit the selected expense\n    const canSubmitExpense = computed(() => {\n      if (!selectedExpense.value) return false;\n      if (selectedExpense.value.status !== 'draft') return false;\n\n      // Only the owner can submit their expense\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      return selectedExpense.value.user_id === currentUserId;\n    });\n\n    // Check if user can review (approve/reject) the selected expense\n    const canReviewExpense = computed(() => {\n      if (!selectedExpense.value) return false;\n      if (selectedExpense.value.status !== 'submitted') return false;\n\n      // Admin can approve any expense\n      if (store.getters['auth/isAdmin']) return true;\n\n      // Managers can approve expenses of their direct reports\n      if (store.getters['auth/isManager']) {\n        // In a real app, we would check if the expense is from a direct report\n        // For now, we'll simulate this\n        return selectedExpense.value.user_manager_id === store.getters['auth/currentUser']?.id;\n      }\n      return false;\n    });\n\n    // Check if user can mark the expense as paid\n    const canMarkAsPaid = computed(() => {\n      if (!selectedExpense.value) return false;\n      if (selectedExpense.value.status !== 'approved') return false;\n\n      // Only admin can mark as paid\n      return store.getters['auth/isAdmin'];\n    });\n\n    // Show actions section if user can perform any action on this expense\n    const showExpenseActions = computed(() => {\n      return canSubmitExpense.value || canReviewExpense.value || canMarkAsPaid.value || canEditExpense(selectedExpense.value);\n    });\n\n    // Format approvals for timeline\n    const formattedApprovals = computed(() => {\n      if (!selectedExpense.value || !selectedExpense.value.approvals) return [];\n      return selectedExpense.value.approvals.map(approval => ({\n        status: approval.status,\n        date: approval.updated_at || approval.created_at,\n        user: approval.approver_name,\n        action: getApprovalAction(approval.status),\n        comments: approval.comments\n      }));\n    });\n\n    // Determine action text for approval status\n    const getApprovalAction = status => {\n      switch (status) {\n        case 'approved':\n          return 'approved this expense';\n        case 'rejected':\n          return 'rejected this expense';\n        case 'pending':\n          return 'needs to review this expense';\n        default:\n          return 'reviewed this expense';\n      }\n    };\n\n    // Check if receipt is PDF\n    const isReceiptPdf = computed(() => {\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return false;\n      return selectedExpense.value.receipt_path.toLowerCase().endsWith('.pdf');\n    });\n\n    // Filter change handler\n    const onFilterChange = () => {\n      fetchExpenses();\n    };\n\n    // Fetch expenses from API\n    const fetchExpenses = async () => {\n      tableLoading.value = true;\n      try {\n        // Build query parameters\n        const params = {\n          page: pagination.value.page,\n          limit: pagination.value.rows\n        };\n\n        // Add filters if set\n        if (filters.search) params.search = filters.search;\n        if (filters.status) params.status = filters.status;\n        if (filters.category) params.category = filters.category;\n\n        // Add date range if selected\n        if (filters.dateRange && Array.isArray(filters.dateRange) && filters.dateRange.length === 2) {\n          params.startDate = filters.dateRange[0].toISOString().split('T')[0];\n          params.endDate = filters.dateRange[1].toISOString().split('T')[0];\n        }\n\n        // In a real app, this would be an API call\n        // For now, we'll use mock data\n        const response = await mockFetchExpenses(params);\n        expenses.value = response.data;\n        pagination.value.totalRecords = response.pagination.total;\n      } catch (error) {\n        console.error('Error fetching expenses:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to load expenses',\n          life: 3000\n        });\n      } finally {\n        tableLoading.value = false;\n      }\n    };\n\n    // Fetch expense statistics\n    const fetchExpenseStats = async () => {\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll use mock data\n        const response = await mockFetchExpenseStats();\n        stats.value = response;\n      } catch (error) {\n        console.error('Error fetching expense stats:', error);\n      }\n    };\n\n    // Mock function to fetch expenses\n    const mockFetchExpenses = params => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          // Generate mock data\n          const mockData = [{\n            id: '1',\n            amount: 125.50,\n            currency: 'USD',\n            date: new Date(2025, 3, 5),\n            description: 'Business lunch with clients',\n            category: 'Meals',\n            receipt_path: '/uploads/receipts/receipt1.pdf',\n            status: 'approved',\n            user_id: '1',\n            user_name: 'John Doe',\n            user_email: 'john@example.com',\n            created_at: new Date(2025, 3, 4),\n            updated_at: new Date(2025, 3, 5),\n            approvals: [{\n              id: '101',\n              status: 'approved',\n              approver_id: '2',\n              approver_name: 'Jane Smith',\n              comments: 'Approved as per company policy',\n              created_at: new Date(2025, 3, 5)\n            }]\n          }, {\n            id: '2',\n            amount: 450.00,\n            currency: 'USD',\n            date: new Date(2025, 3, 2),\n            description: 'Conference registration fee',\n            category: 'Training',\n            receipt_path: '/uploads/receipts/receipt2.pdf',\n            status: 'submitted',\n            user_id: '1',\n            user_name: 'John Doe',\n            user_email: 'john@example.com',\n            created_at: new Date(2025, 3, 1),\n            updated_at: new Date(2025, 3, 2)\n          }, {\n            id: '3',\n            amount: 89.99,\n            currency: 'USD',\n            date: new Date(2025, 3, 1),\n            description: 'Office supplies - printer ink',\n            category: 'Office Supplies',\n            receipt_path: '/uploads/receipts/receipt3.jpg',\n            status: 'draft',\n            user_id: '1',\n            user_name: 'John Doe',\n            user_email: 'john@example.com',\n            created_at: new Date(2025, 3, 1)\n          }];\n\n          // Filter data based on params\n          let filteredData = [...mockData];\n          if (params.status) {\n            filteredData = filteredData.filter(expense => expense.status === params.status);\n          }\n          if (params.category) {\n            filteredData = filteredData.filter(expense => expense.category === params.category);\n          }\n          if (params.search) {\n            const search = params.search.toLowerCase();\n            filteredData = filteredData.filter(expense => expense.description.toLowerCase().includes(search) || expense.category.toLowerCase().includes(search) || expense.user_name.toLowerCase().includes(search));\n          }\n          if (params.startDate && params.endDate) {\n            const startDate = new Date(params.startDate);\n            const endDate = new Date(params.endDate);\n            filteredData = filteredData.filter(expense => {\n              const expenseDate = new Date(expense.date);\n              return expenseDate >= startDate && expenseDate <= endDate;\n            });\n          }\n\n          // Calculate pagination\n          const total = filteredData.length;\n          const start = (params.page - 1) * params.limit;\n          const end = start + params.limit;\n          const paginatedData = filteredData.slice(start, end);\n          resolve({\n            data: paginatedData,\n            pagination: {\n              total,\n              per_page: params.limit,\n              current_page: params.page,\n              last_page: Math.ceil(total / params.limit)\n            }\n          });\n        }, 500);\n      });\n    };\n\n    // Mock function to fetch expense statistics\n    const mockFetchExpenseStats = () => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            draft: {\n              count: 2,\n              total_amount: 120.50\n            },\n            submitted: {\n              count: 1,\n              total_amount: 450.00\n            },\n            approved: {\n              count: 3,\n              total_amount: 725.75\n            },\n            rejected: {\n              count: 1,\n              total_amount: 50.25\n            },\n            paid: {\n              count: 2,\n              total_amount: 600.25\n            }\n          });\n        }, 300);\n      });\n    };\n\n    // Open new expense dialog\n    const openNewExpenseDialog = () => {\n      resetExpenseForm();\n      expense.date = new Date(); // Set default date to today\n      dialogMode.value = 'create';\n      expenseDialogVisible.value = true;\n    };\n\n    // Close expense dialog\n    const closeExpenseDialog = () => {\n      expenseDialogVisible.value = false;\n      submitted.value = false;\n      fileError.value = '';\n      selectedFile.value = null;\n      if (fileUpload.value) {\n        fileUpload.value.clear();\n      }\n    };\n\n    // Reset expense form\n    const resetExpenseForm = () => {\n      expense.id = null;\n      expense.amount = null;\n      expense.currency = 'USD';\n      expense.date = null;\n      expense.description = '';\n      expense.category = null;\n      expense.receiptPath = null;\n      expense.status = 'draft';\n    };\n\n    // Handle file selection\n    const onFileSelect = event => {\n      fileError.value = '';\n      selectedFile.value = event.files[0];\n    };\n\n    // Handle file upload error\n    const onFileError = event => {\n      fileError.value = event.message;\n    };\n\n    // View an expense\n    const viewExpense = expenseData => {\n      selectedExpense.value = expenseData;\n      expenseDetailsVisible.value = true;\n    };\n\n    // Edit an expense\n    const editExpense = expenseData => {\n      resetExpenseForm();\n\n      // Copy data to form\n      expense.id = expenseData.id;\n      expense.amount = expenseData.amount;\n      expense.currency = expenseData.currency || 'USD';\n      expense.date = new Date(expenseData.date);\n      expense.description = expenseData.description;\n      expense.category = expenseData.category;\n      expense.receiptPath = expenseData.receipt_path;\n      expense.status = expenseData.status;\n      dialogMode.value = 'edit';\n      expenseDialogVisible.value = true;\n    };\n\n    // Edit from details view\n    const editFromDetails = () => {\n      if (!selectedExpense.value) return;\n\n      // Close details dialog\n      expenseDetailsVisible.value = false;\n\n      // Edit the expense\n      editExpense(selectedExpense.value);\n    };\n\n    // Confirm delete expense\n    const confirmDeleteExpense = expenseData => {\n      confirm.require({\n        message: 'Are you sure you want to delete this expense?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        acceptClass: 'p-button-danger',\n        accept: () => deleteExpense(expenseData),\n        reject: () => {}\n      });\n    };\n\n    // Delete expense\n    const deleteExpense = async expenseData => {\n      if (!expenseData || !expenseData.id) return;\n      try {\n        // Close dialogs if open\n        expenseDialogVisible.value = false;\n        expenseDetailsVisible.value = false;\n\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Remove from local array\n        expenses.value = expenses.value.filter(e => e.id !== expenseData.id);\n\n        // Update selection if needed\n        if (selectedExpense.value && selectedExpense.value.id === expenseData.id) {\n          selectedExpense.value = null;\n        }\n\n        // Show success toast\n        toast.add({\n          severity: 'success',\n          summary: 'Expense Deleted',\n          detail: 'Expense has been deleted successfully',\n          life: 3000\n        });\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error deleting expense:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to delete expense',\n          life: 3000\n        });\n      }\n    };\n\n    // Save expense (create or update)\n    const saveExpense = async () => {\n      submitted.value = true;\n\n      // Validate form\n      if (!expense.amount || !expense.date || !expense.description || !expense.category) {\n        return;\n      }\n      saving.value = true;\n      try {\n        // Prepare form data for API submission\n        const formData = new FormData();\n        formData.append('amount', expense.amount);\n        formData.append('currency', expense.currency);\n        formData.append('date', expense.date.toISOString().split('T')[0]);\n        formData.append('description', expense.description);\n        formData.append('category', expense.category);\n        if (selectedFile.value) {\n          formData.append('receipt', selectedFile.value);\n        }\n\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Generate mock response data\n        const savedExpense = {\n          id: expense.id || Math.random().toString(36).substring(2, 11),\n          amount: expense.amount,\n          currency: expense.currency,\n          date: expense.date,\n          description: expense.description,\n          category: expense.category,\n          receipt_path: selectedFile.value ? `/uploads/receipts/mock-${selectedFile.value.name}` : expense.receiptPath,\n          status: expense.status,\n          user_id: store.getters['auth/currentUser'].id,\n          user_name: store.getters['auth/userFullName'],\n          created_at: new Date(),\n          updated_at: new Date()\n        };\n\n        // Update local data\n        if (expense.id) {\n          // Update existing record\n          const index = expenses.value.findIndex(e => e.id === expense.id);\n          if (index !== -1) {\n            expenses.value[index] = savedExpense;\n          }\n        } else {\n          // Add new record\n          expenses.value.unshift(savedExpense);\n        }\n\n        // Close dialog\n        expenseDialogVisible.value = false;\n        submitted.value = false;\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: dialogMode.value === 'create' ? 'Expense Created' : 'Expense Updated',\n          detail: dialogMode.value === 'create' ? 'Expense has been created successfully' : 'Expense has been updated successfully',\n          life: 3000\n        });\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error saving expense:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to save expense',\n          life: 3000\n        });\n      } finally {\n        saving.value = false;\n        fileError.value = '';\n        selectedFile.value = null;\n        if (fileUpload.value) {\n          fileUpload.value.clear();\n        }\n      }\n    };\n\n    // Submit expense for approval\n    const submitExpense = async () => {\n      if (!selectedExpense.value || !canSubmitExpense.value) return;\n      processingAction.value = true;\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        // Update local data\n        selectedExpense.value.status = 'submitted';\n        selectedExpense.value.updated_at = new Date();\n\n        // Update in the list\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\n        if (index !== -1) {\n          expenses.value[index] = {\n            ...selectedExpense.value\n          };\n        }\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Expense Submitted',\n          detail: 'Expense has been submitted for approval',\n          life: 3000\n        });\n\n        // Close details dialog\n        expenseDetailsVisible.value = false;\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error submitting expense:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to submit expense',\n          life: 3000\n        });\n      } finally {\n        processingAction.value = false;\n      }\n    };\n\n    // Approve expense\n    const approveExpense = async () => {\n      if (!selectedExpense.value || !canReviewExpense.value) return;\n      processingAction.value = true;\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        // Update local data\n        selectedExpense.value.status = 'approved';\n        selectedExpense.value.updated_at = new Date();\n\n        // Add approval record\n        if (!selectedExpense.value.approvals) {\n          selectedExpense.value.approvals = [];\n        }\n        selectedExpense.value.approvals.push({\n          id: Math.random().toString(36).substring(2, 11),\n          status: 'approved',\n          approver_id: store.getters['auth/currentUser'].id,\n          approver_name: store.getters['auth/userFullName'],\n          comments: null,\n          created_at: new Date()\n        });\n\n        // Update in the list\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\n        if (index !== -1) {\n          expenses.value[index] = {\n            ...selectedExpense.value\n          };\n        }\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Expense Approved',\n          detail: 'Expense has been approved',\n          life: 3000\n        });\n\n        // Close details dialog\n        expenseDetailsVisible.value = false;\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error approving expense:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to approve expense',\n          life: 3000\n        });\n      } finally {\n        processingAction.value = false;\n      }\n    };\n\n    // Open reject dialog\n    const openRejectDialog = () => {\n      rejectReason.value = '';\n      rejectDialogVisible.value = true;\n    };\n\n    // Reject expense\n    const rejectExpense = async () => {\n      if (!selectedExpense.value || !canReviewExpense.value) return;\n      processingAction.value = true;\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        // Update local data\n        selectedExpense.value.status = 'rejected';\n        selectedExpense.value.updated_at = new Date();\n\n        // Add rejection record\n        if (!selectedExpense.value.approvals) {\n          selectedExpense.value.approvals = [];\n        }\n        selectedExpense.value.approvals.push({\n          id: Math.random().toString(36).substring(2, 11),\n          status: 'rejected',\n          approver_id: store.getters['auth/currentUser'].id,\n          approver_name: store.getters['auth/userFullName'],\n          comments: rejectReason.value || null,\n          created_at: new Date()\n        });\n\n        // Update in the list\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\n        if (index !== -1) {\n          expenses.value[index] = {\n            ...selectedExpense.value\n          };\n        }\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Expense Rejected',\n          detail: 'Expense has been rejected',\n          life: 3000\n        });\n\n        // Close dialogs\n        rejectDialogVisible.value = false;\n        expenseDetailsVisible.value = false;\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error rejecting expense:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to reject expense',\n          life: 3000\n        });\n      } finally {\n        processingAction.value = false;\n      }\n    };\n\n    // Mark expense as paid\n    const markAsPaid = async () => {\n      if (!selectedExpense.value || !canMarkAsPaid.value) return;\n      processingAction.value = true;\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll simulate success\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        // Update local data\n        selectedExpense.value.status = 'paid';\n        selectedExpense.value.paid_at = new Date();\n        selectedExpense.value.updated_at = new Date();\n\n        // Update in the list\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\n        if (index !== -1) {\n          expenses.value[index] = {\n            ...selectedExpense.value\n          };\n        }\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: 'Expense Paid',\n          detail: 'Expense has been marked as paid',\n          life: 3000\n        });\n\n        // Close details dialog\n        expenseDetailsVisible.value = false;\n\n        // Refresh stats\n        fetchExpenseStats();\n      } catch (error) {\n        console.error('Error marking expense as paid:', error);\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to mark expense as paid',\n          life: 3000\n        });\n      } finally {\n        processingAction.value = false;\n      }\n    };\n\n    // View receipt\n    const viewReceipt = () => {\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\n\n      // In a real app, this would open the file in a new tab\n      window.open(selectedExpense.value.receipt_path, '_blank');\n    };\n\n    // Download receipt from details view\n    const downloadReceiptFromDetails = () => {\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\n\n      // In a real app, this would trigger a download\n      // For now, just simulate opening the file\n      window.open(selectedExpense.value.receipt_path, '_blank');\n    };\n\n    // Download receipt from dialog\n    const downloadReceipt = () => {\n      if (!expense.receiptPath) return;\n\n      // In a real app, this would trigger a download\n      // For now, just simulate opening the file\n      window.open(expense.receiptPath, '_blank');\n    };\n\n    // Row select handler\n    const onExpenseSelect = event => {\n      viewExpense(event.data);\n    };\n\n    // Row unselect handler\n    const onExpenseUnselect = () => {\n      // Nothing to do here\n    };\n\n    // Initialize component\n    onMounted(() => {\n      Promise.all([fetchExpenses(), fetchExpenseStats()]).finally(() => {\n        loading.value = false;\n      });\n    });\n    return {\n      loading,\n      tableLoading,\n      expenses,\n      stats,\n      selectedExpenses,\n      selectedExpense,\n      expenseDialogVisible,\n      expenseDetailsVisible,\n      rejectDialogVisible,\n      dialogMode,\n      saving,\n      submitted,\n      processingAction,\n      rejectReason,\n      selectedFile,\n      fileError,\n      fileUpload,\n      pagination,\n      filters,\n      expense,\n      statusOptions,\n      categoryOptions,\n      paginationSummary,\n      canSubmitExpense,\n      canReviewExpense,\n      canMarkAsPaid,\n      showExpenseActions,\n      formattedApprovals,\n      isReceiptPdf,\n      // Methods\n      formatStatus,\n      formatCurrency,\n      formatDate,\n      getStatusSeverity,\n      getCategorySeverity,\n      canEditExpense,\n      canDeleteExpense,\n      onFilterChange,\n      openNewExpenseDialog,\n      closeExpenseDialog,\n      onFileSelect,\n      onFileError,\n      viewExpense,\n      editExpense,\n      editFromDetails,\n      confirmDeleteExpense,\n      saveExpense,\n      submitExpense,\n      approveExpense,\n      openRejectDialog,\n      rejectExpense,\n      markAsPaid,\n      viewReceipt,\n      downloadReceiptFromDetails,\n      downloadReceipt,\n      onExpenseSelect,\n      onExpenseUnselect\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","useRouter","useConfirm","useToast","Button","InputText","Dropdown","Calendar","DataTable","Column","Tag","ProgressSpinner","Dialog","InputNumber","Textarea","FileUpload","Divider","Timeline","ConfirmDialog","name","components","setup","store","confirm","toast","fileUpload","loading","tableLoading","expenses","stats","selectedExpenses","selectedExpense","expenseDialogVisible","expenseDetailsVisible","rejectDialogVisible","dialogMode","saving","submitted","processingAction","rejectReason","selectedFile","fileError","pagination","page","rows","totalRecords","filters","search","status","dateRange","category","expense","id","amount","currency","date","description","receiptPath","statusOptions","label","value","categoryOptions","formatStatus","charAt","toUpperCase","slice","formatCurrency","undefined","Intl","NumberFormat","style","format","formatDate","dateString","Date","DateTimeFormat","year","month","day","getStatusSeverity","getCategorySeverity","canEditExpense","expenseData","includes","getters","currentUserId","user_id","canDeleteExpense","paginationSummary","first","last","Math","min","canSubmitExpense","canReviewExpense","user_manager_id","canMarkAsPaid","showExpenseActions","formattedApprovals","approvals","map","approval","updated_at","created_at","user","approver_name","action","getApprovalAction","comments","isReceiptPdf","receipt_path","toLowerCase","endsWith","onFilterChange","fetchExpenses","params","limit","Array","isArray","length","startDate","toISOString","split","endDate","response","mockFetchExpenses","data","total","error","console","add","severity","summary","detail","life","fetchExpenseStats","mockFetchExpenseStats","Promise","resolve","setTimeout","mockData","user_name","user_email","approver_id","filteredData","filter","expenseDate","start","end","paginatedData","per_page","current_page","last_page","ceil","draft","count","total_amount","approved","rejected","paid","openNewExpenseDialog","resetExpenseForm","closeExpenseDialog","clear","onFileSelect","event","files","onFileError","message","viewExpense","editExpense","editFromDetails","confirmDeleteExpense","require","header","icon","acceptClass","accept","deleteExpense","reject","e","saveExpense","formData","FormData","append","savedExpense","random","toString","substring","index","findIndex","unshift","submitExpense","approveExpense","push","openRejectDialog","rejectExpense","markAsPaid","paid_at","viewReceipt","window","open","downloadReceiptFromDetails","downloadReceipt","onExpenseSelect","onExpenseUnselect","all","finally"],"sources":["/home/pi/projects/intranet/frontend/src/views/Expenses.vue"],"sourcesContent":["<template>\r\n  <div class=\"expenses-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Expenses</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          label=\"New Expense\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewExpenseAppDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense stats summary cards -->\r\n    <div class=\"grid expense-stats\">\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Draft</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.draft?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.draft?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Submitted</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.submitted?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.submitted?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Approved</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.approved?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.approved?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-12 md:col-6 lg:col-3\">\r\n        <div class=\"card summary-card\">\r\n          <div class=\"summary-title\">Paid</div>\r\n          <div class=\"summary-value\">{{ formatCurrency(stats.paid?.total_amount || 0) }}</div>\r\n          <div class=\"summary-count\">{{ stats.paid?.count || 0 }} expenses</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense filters and table -->\r\n    <div class=\"card\">\r\n      <div class=\"expense-filters\">\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-3\">\r\n            <span class=\"p-input-icon-left w-full\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText \r\n                v-model=\"filters.search\" \r\n                placeholder=\"Search expenses\" \r\n                class=\"w-full\"\r\n                @input=\"onFilterChange\"\r\n              />\r\n            </span>\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.status\"\r\n              :options=\"statusOptions\"\r\n              optionLabel=\"label\"\r\n              optionValue=\"value\"\r\n              placeholder=\"Status\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.category\"\r\n              :options=\"categoryOptions\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"name\"\r\n              placeholder=\"Category\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Calendar\r\n              v-model=\"filters.dateRange\"\r\n              selectionMode=\"range\"\r\n              placeholder=\"Date range\"\r\n              class=\"w-full\"\r\n              @date-select=\"onFilterChange\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading spinner -->\r\n      <div v-if=\"loading\" class=\"loading-container\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- Expense table -->\r\n      <DataTable \r\n        v-else\r\n        :value=\"expenses\" \r\n        :paginator=\"true\" \r\n        :rows=\"10\"\r\n        :rowsPerPageOptions=\"[10, 25, 50]\"\r\n        tableStyle=\"min-width: 50rem\"\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} expenses\"\r\n        responsiveLayout=\"scroll\"\r\n        :loading=\"tableLoading\"\r\n        sortField=\"date\"\r\n        :sortOrder=\"-1\"\r\n        v-model:selection=\"selectedExpenses\"\r\n        dataKey=\"id\"\r\n        @rowSelect=\"onExpenseSelect\"\r\n        @rowUnselect=\"onExpenseUnselect\"\r\n        class=\"expense-table\"\r\n      >\r\n        <template #empty>\r\n          <div class=\"empty-message\">\r\n            <i class=\"pi pi-money-bill\"></i>\r\n            <p>No expenses found</p>\r\n          </div>\r\n        </template>\r\n\r\n        <Column selectionMode=\"single\" style=\"width: 3rem\" :exportable=\"false\"></Column>\r\n        \r\n        <Column field=\"date\" header=\"Date\" sortable>\r\n          <template #body=\"slotProps\">\r\n            {{ formatDate(slotProps.data.date) }}\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"description\" header=\"Description\" sortable></Column>\r\n\r\n        <Column field=\"category\" header=\"Category\" sortable>\r\n          <template #body=\"slotProps\">\r\n            <Tag :value=\"slotProps.data.category\" :severity=\"getCategorySeverity(slotProps.data.category)\" />\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"amount\" header=\"Amount\" sortable>\r\n          <template #body=\"slotProps\">\r\n            {{ formatCurrency(slotProps.data.amount) }}\r\n          </template>\r\n        </Column>\r\n\r\n        <Column field=\"status\" header=\"Status\" sortable>\r\n          <template #body=\"slotProps\">\r\n            <Tag \r\n              :value=\"formatStatus(slotProps.data.status)\" \r\n              :severity=\"getStatusSeverity(slotProps.data.status)\" \r\n            />\r\n          </template>\r\n        </Column>\r\n\r\n        <Column header=\"Actions\" style=\"width: 8rem\">\r\n          <template #body=\"slotProps\">\r\n            <div class=\"action-buttons\">\r\n              <Button \r\n                icon=\"pi pi-eye\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"viewExpense(slotProps.data)\" \r\n                tooltip=\"View\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n              <Button \r\n                v-if=\"canEditExpense(slotProps.data)\" \r\n                icon=\"pi pi-pencil\" \r\n                class=\"p-button-rounded p-button-text\" \r\n                @click=\"editExpense(slotProps.data)\" \r\n                tooltip=\"Edit\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n              <Button \r\n                v-if=\"canDeleteExpense(slotProps.data)\" \r\n                icon=\"pi pi-trash\" \r\n                class=\"p-button-rounded p-button-text p-button-danger\" \r\n                @click=\"confirmDeleteExpense(slotProps.data)\" \r\n                tooltip=\"Delete\" \r\n                :tooltipOptions=\"{ position: 'top' }\"\r\n              />\r\n            </div>\r\n          </template>\r\n        </Column>\r\n      </DataTable>\r\n\r\n      <!-- Paginator controls -->\r\n      <div class=\"pagination-controls\">\r\n        <div class=\"pagination-summary\">\r\n          {{ paginationSummary }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expense Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"expenseDialogVisible\" \r\n      :style=\"{ width: '500px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New Expense' : 'Edit Expense'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid expense-dialog\"\r\n    >\r\n      <div class=\"expense-form\">\r\n        <div class=\"field\">\r\n          <label for=\"amount\">Amount *</label>\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">$</span>\r\n            <InputNumber \r\n              id=\"amount\" \r\n              v-model=\"expense.amount\" \r\n              mode=\"decimal\" \r\n              :minFractionDigits=\"2\" \r\n              :maxFractionDigits=\"2\" \r\n              required \r\n              :class=\"{ 'p-invalid': submitted && !expense.amount }\"\r\n            />\r\n          </div>\r\n          <small v-if=\"submitted && !expense.amount\" class=\"p-error\">Amount is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"date\">Date *</label>\r\n          <Calendar \r\n            id=\"date\" \r\n            v-model=\"expense.date\" \r\n            dateFormat=\"mm/dd/yy\" \r\n            :showIcon=\"true\" \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.date }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.date\" class=\"p-error\">Date is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"description\">Description *</label>\r\n          <Textarea \r\n            id=\"description\" \r\n            v-model=\"expense.description\" \r\n            rows=\"3\" \r\n            autoResize \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.description }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.description\" class=\"p-error\">Description is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"category\">Category *</label>\r\n          <Dropdown \r\n            id=\"category\" \r\n            v-model=\"expense.category\" \r\n            :options=\"categoryOptions\" \r\n            optionLabel=\"name\" \r\n            optionValue=\"name\" \r\n            placeholder=\"Select a category\" \r\n            required \r\n            :class=\"{ 'p-invalid': submitted && !expense.category }\"\r\n          />\r\n          <small v-if=\"submitted && !expense.category\" class=\"p-error\">Category is required.</small>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n          <label for=\"receipt\">Receipt</label>\r\n          <div class=\"p-fileupload-content\">\r\n            <FileUpload \r\n              ref=\"fileUpload\"\r\n              mode=\"basic\" \r\n              name=\"receipt\" \r\n              accept=\"image/*,application/pdf\" \r\n              :maxFileSize=\"5000000\" \r\n              chooseLabel=\"Select Receipt\" \r\n              class=\"p-button-outlined w-full\"\r\n              @select=\"onFileSelect\"\r\n              @error=\"onFileError\"\r\n            />\r\n          </div>\r\n          <small v-if=\"fileError\" class=\"p-error\">{{ fileError }}</small>\r\n          \r\n          <!-- Preview of existing receipt -->\r\n          <div v-if=\"expense.receiptPath && !selectedFile\" class=\"receipt-preview\">\r\n            <div class=\"receipt-preview-info\">\r\n              <i class=\"pi pi-file-pdf\" v-if=\"isReceiptPdf\"></i>\r\n              <i class=\"pi pi-image\" v-else></i>\r\n              <span>Current receipt</span>\r\n            </div>\r\n            <Button \r\n              icon=\"pi pi-download\" \r\n              class=\"p-button-text p-button-sm\" \r\n              @click=\"downloadReceipt\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeExpenseAppDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && canDeleteExpense(expense)\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteExpense(expense)\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveExpense\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Expense Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"expenseDetailsVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"selectedExpense ? `Expense: ${formatCurrency(selectedExpense.amount)}` : 'Expense Details'\" \r\n      :modal=\"true\"\r\n      class=\"expense-details-dialog\"\r\n    >\r\n      <div v-if=\"selectedExpense\" class=\"expense-details\">\r\n        <div class=\"expense-header\">\r\n          <div class=\"expense-amount\">\r\n            <span class=\"amount-value\">{{ formatCurrency(selectedExpense.amount) }}</span>\r\n            <span class=\"currency\">{{ selectedExpense.currency || 'USD' }}</span>\r\n          </div>\r\n          <Tag \r\n            :value=\"formatStatus(selectedExpense.status)\" \r\n            :severity=\"getStatusSeverity(selectedExpense.status)\" \r\n            class=\"status-tag\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"expense-info-grid\">\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Date</div>\r\n            <div class=\"info-value\">{{ formatDate(selectedExpense.date) }}</div>\r\n          </div>\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Category</div>\r\n            <div class=\"info-value\">\r\n              <Tag :value=\"selectedExpense.category\" :severity=\"getCategorySeverity(selectedExpense.category)\" />\r\n            </div>\r\n          </div>\r\n          <div v-if=\"selectedExpense.user_name\" class=\"info-group\">\r\n            <div class=\"info-label\">Submitted By</div>\r\n            <div class=\"info-value\">{{ selectedExpense.user_name }}</div>\r\n          </div>\r\n          <div class=\"info-group\">\r\n            <div class=\"info-label\">Created</div>\r\n            <div class=\"info-value\">{{ formatDate(selectedExpense.created_at) }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <Divider />\r\n\r\n        <div class=\"description-section\">\r\n          <h3>Description</h3>\r\n          <div class=\"description-content\">{{ selectedExpense.description }}</div>\r\n        </div>\r\n\r\n        <div v-if=\"selectedExpense.receipt_path\" class=\"receipt-section\">\r\n          <Divider />\r\n          <h3>Receipt</h3>\r\n          <div class=\"receipt-actions\">\r\n            <Button \r\n              label=\"View Receipt\" \r\n              icon=\"pi pi-eye\" \r\n              class=\"p-button-outlined\" \r\n              @click=\"viewReceipt\" \r\n            />\r\n            <Button \r\n              label=\"Download\" \r\n              icon=\"pi pi-download\" \r\n              class=\"p-button-text\" \r\n              @click=\"downloadReceiptFromDetails\" \r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div v-if=\"selectedExpense.approvals && selectedExpense.approvals.length > 0\" class=\"approvals-section\">\r\n          <Divider />\r\n          <h3>Approval History</h3>\r\n          <Timeline :value=\"formattedApprovals\" class=\"approval-timeline\">\r\n            <template #content=\"slotProps\">\r\n              <div class=\"approval-item\">\r\n                <small class=\"approval-date\">{{ formatDate(slotProps.item.date) }}</small>\r\n                <div class=\"approval-content\">\r\n                  <div class=\"approval-description\">\r\n                    <span class=\"approval-user\">{{ slotProps.item.user }}</span>\r\n                    <span> {{ slotProps.item.action }} </span>\r\n                  </div>\r\n                  <div v-if=\"slotProps.item.comments\" class=\"approval-comments\">\r\n                    \"{{ slotProps.item.comments }}\"\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </template>\r\n            <template #opposite=\"slotProps\">\r\n              <Tag \r\n                :value=\"slotProps.item.status\" \r\n                :severity=\"getStatusSeverity(slotProps.item.status)\" \r\n              />\r\n            </template>\r\n          </Timeline>\r\n        </div>\r\n\r\n        <!-- Action buttons for expense workflow -->\r\n        <div v-if=\"showExpenseActions\" class=\"expense-actions\">\r\n          <Divider />\r\n          <h3>Actions</h3>\r\n          <div class=\"expense-workflow-buttons\">\r\n            <!-- Submit button (for draft expenses) -->\r\n            <Button \r\n              v-if=\"canSubmitExpense\"\r\n              label=\"Submit for Approval\" \r\n              icon=\"pi pi-send\" \r\n              class=\"p-button-success\" \r\n              @click=\"submitExpense\" \r\n              :loading=\"processingAction\"\r\n            />\r\n\r\n            <!-- Approval buttons (for managers reviewing expenses) -->\r\n            <div v-if=\"canReviewExpense\" class=\"review-buttons\">\r\n              <Button \r\n                label=\"Approve\" \r\n                icon=\"pi pi-check\" \r\n                class=\"p-button-success mr-2\" \r\n                @click=\"approveExpense\" \r\n                :loading=\"processingAction\"\r\n              />\r\n              <Button \r\n                label=\"Reject\" \r\n                icon=\"pi pi-times\" \r\n                class=\"p-button-danger\" \r\n                @click=\"openRejectAppDialog\" \r\n                :loading=\"processingAction\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Payment button (for admins) -->\r\n            <Button \r\n              v-if=\"canMarkAsPaid\"\r\n              label=\"Mark as Paid\" \r\n              icon=\"pi pi-check-circle\" \r\n              class=\"p-button-primary\" \r\n              @click=\"markAsPaid\" \r\n              :loading=\"processingAction\"\r\n            />\r\n\r\n            <!-- Edit button (if the expense can be edited) -->\r\n            <Button \r\n              v-if=\"canEditExpense(selectedExpense)\"\r\n              label=\"Edit Expense\" \r\n              icon=\"pi pi-pencil\" \r\n              class=\"p-button-secondary\" \r\n              @click=\"editFromDetails\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"expenseDetailsVisible = false\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Reject Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"rejectDialogVisible\" \r\n      :style=\"{ width: '450px' }\" \r\n      header=\"Reject Expense\" \r\n      :modal=\"true\"\r\n      class=\"p-fluid\"\r\n    >\r\n      <div class=\"reject-form\">\r\n        <div class=\"field\">\r\n          <label for=\"rejectReason\">Reason for Rejection</label>\r\n          <Textarea \r\n            id=\"rejectReason\" \r\n            v-model=\"rejectReason\" \r\n            rows=\"3\" \r\n            autoResize \r\n            placeholder=\"Please provide a reason for rejecting this expense\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"rejectDialogVisible = false\" \r\n        />\r\n        <Button \r\n          label=\"Reject\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-danger\" \r\n          @click=\"rejectExpense\" \r\n          :loading=\"processingAction\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport InputText from 'primevue/inputtext';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Calendar from 'primevue/calendar';\r\nimport DataTable from 'primevue/datatable';\r\nimport Column from 'primevue/column';\r\nimport Tag from 'primevue/tag';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport InputNumber from 'primevue/inputnumber';\r\nimport Textarea from 'primevue/textarea';\r\nimport FileUpload from 'primevue/fileupload';\r\nimport Divider from 'primevue/divider';\r\nimport Timeline from 'primevue/timeline';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\n\r\nexport default {\r\n  name: 'ExpensesView',\r\n  components: {\r\n    Button,\r\n    InputText,\r\n    Dropdown,\r\n    Calendar,\r\n    DataTable,\r\n    Column,\r\n    Tag,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    InputNumber,\r\n    Textarea,\r\n    FileUpload,\r\n    Divider,\r\n    Timeline,\r\n    ConfirmDialog\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n//    const router = useRouter();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n    const fileUpload = ref(null);\r\n\r\n    // State\r\n    const loading = ref(true);\r\n    const tableLoading = ref(false);\r\n    const expenses = ref([]);\r\n    const stats = ref({});\r\n    const selectedExpenses = ref(null);\r\n    const selectedExpense = ref(null);\r\n    const expenseDialogVisible = ref(false);\r\n    const expenseDetailsVisible = ref(false);\r\n    const rejectDialogVisible = ref(false);\r\n    const dialogMode = ref('create');\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const processingAction = ref(false);\r\n    const rejectReason = ref('');\r\n    const selectedFile = ref(null);\r\n    const fileError = ref('');\r\n\r\n    // Pagination state\r\n    const pagination = ref({\r\n      page: 1,\r\n      rows: 10,\r\n      totalRecords: 0\r\n    });\r\n\r\n    // Filter state\r\n    const filters = reactive({\r\n      search: '',\r\n      status: null,\r\n      dateRange: null,\r\n      category: null\r\n    });\r\n\r\n    // Form state\r\n    const expense = reactive({\r\n      id: null,\r\n      amount: null,\r\n      currency: 'USD',\r\n      date: null,\r\n      description: '',\r\n      category: null,\r\n      receiptPath: null,\r\n      status: 'draft'\r\n    });\r\n\r\n    // Options for status filter\r\n    const statusOptions = [\r\n      { label: 'All Statuses', value: null },\r\n      { label: 'Draft', value: 'draft' },\r\n      { label: 'Submitted', value: 'submitted' },\r\n      { label: 'Approved', value: 'approved' },\r\n      { label: 'Rejected', value: 'rejected' },\r\n      { label: 'Paid', value: 'paid' }\r\n    ];\r\n\r\n    // Options for category filter (hardcoded for now, should come from API)\r\n    const categoryOptions = [\r\n      { name: 'Travel' },\r\n      { name: 'Meals' },\r\n      { name: 'Office Supplies' },\r\n      { name: 'Training' },\r\n      { name: 'Other' }\r\n    ];\r\n\r\n    // Format status for display\r\n    const formatStatus = (status) => {\r\n      if (!status) return '';\r\n      return status.charAt(0).toUpperCase() + status.slice(1);\r\n    };\r\n\r\n    // Format currency\r\n    const formatCurrency = (amount) => {\r\n      if (amount === undefined || amount === null) return '$0.00';\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount);\r\n    };\r\n\r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      }).format(date);\r\n    };\r\n\r\n    // Get severity class for status tag\r\n    const getStatusSeverity = (status) => {\r\n      switch (status) {\r\n        case 'draft': return 'info';\r\n        case 'submitted': return 'warning';\r\n        case 'approved': return 'success';\r\n        case 'rejected': return 'danger';\r\n        case 'paid': return 'success';\r\n        default: return 'info';\r\n      }\r\n    };\r\n\r\n    // Get severity class for category tag\r\n    const getCategorySeverity = (category) => {\r\n      switch (category) {\r\n        case 'Travel': return 'info';\r\n        case 'Meals': return 'success';\r\n        case 'Office Supplies': return 'warning';\r\n        case 'Training': return 'primary';\r\n        default: return 'secondary';\r\n      }\r\n    };\r\n\r\n    // Check if the current user can edit an expense\r\n    const canEditExpense = (expenseData) => {\r\n      if (!expenseData) return false;\r\n      \r\n      // Only draft and rejected expenses can be edited\r\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\r\n      \r\n      // Admin can edit any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // User can edit their own expenses\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return expenseData.user_id === currentUserId;\r\n    };\r\n\r\n    // Check if the current user can delete an expense\r\n    const canDeleteExpense = (expenseData) => {\r\n      if (!expenseData) return false;\r\n      \r\n      // Only draft and rejected expenses can be deleted\r\n      if (!['draft', 'rejected'].includes(expenseData.status)) return false;\r\n      \r\n      // Admin can delete any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // User can delete their own expenses\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return expenseData.user_id === currentUserId;\r\n    };\r\n\r\n    // Pagination summary text\r\n    const paginationSummary = computed(() => {\r\n      const { page, rows, totalRecords } = pagination.value;\r\n      const first = (page - 1) * rows + 1;\r\n      const last = Math.min(page * rows, totalRecords);\r\n      return `Showing ${first} to ${last} of ${totalRecords} expenses`;\r\n    });\r\n\r\n    // Check if user can submit the selected expense\r\n    const canSubmitExpense = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'draft') return false;\r\n      \r\n      // Only the owner can submit their expense\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedExpense.value.user_id === currentUserId;\r\n    });\r\n\r\n    // Check if user can review (approve/reject) the selected expense\r\n    const canReviewExpense = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'submitted') return false;\r\n      \r\n      // Admin can approve any expense\r\n      if (store.getters['auth/isAdmin']) return true;\r\n      \r\n      // Managers can approve expenses of their direct reports\r\n      if (store.getters['auth/isManager']) {\r\n        // In a real app, we would check if the expense is from a direct report\r\n        // For now, we'll simulate this\r\n        return selectedExpense.value.user_manager_id === store.getters['auth/currentUser']?.id;\r\n      }\r\n      \r\n      return false;\r\n    });\r\n\r\n    // Check if user can mark the expense as paid\r\n    const canMarkAsPaid = computed(() => {\r\n      if (!selectedExpense.value) return false;\r\n      if (selectedExpense.value.status !== 'approved') return false;\r\n      \r\n      // Only admin can mark as paid\r\n      return store.getters['auth/isAdmin'];\r\n    });\r\n\r\n    // Show actions section if user can perform any action on this expense\r\n    const showExpenseActions = computed(() => {\r\n      return canSubmitExpense.value || canReviewExpense.value || \r\n             canMarkAsPaid.value || canEditExpense(selectedExpense.value);\r\n    });\r\n\r\n    // Format approvals for timeline\r\n    const formattedApprovals = computed(() => {\r\n      if (!selectedExpense.value || !selectedExpense.value.approvals) return [];\r\n      \r\n      return selectedExpense.value.approvals.map(approval => ({\r\n        status: approval.status,\r\n        date: approval.updated_at || approval.created_at,\r\n        user: approval.approver_name,\r\n        action: getApprovalAction(approval.status),\r\n        comments: approval.comments\r\n      }));\r\n    });\r\n\r\n    // Determine action text for approval status\r\n    const getApprovalAction = (status) => {\r\n      switch (status) {\r\n        case 'approved': return 'approved this expense';\r\n        case 'rejected': return 'rejected this expense';\r\n        case 'pending': return 'needs to review this expense';\r\n        default: return 'reviewed this expense';\r\n      }\r\n    };\r\n\r\n    // Check if receipt is PDF\r\n    const isReceiptPdf = computed(() => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return false;\r\n      return selectedExpense.value.receipt_path.toLowerCase().endsWith('.pdf');\r\n    });\r\n\r\n    // Filter change handler\r\n    const onFilterChange = () => {\r\n      fetchExpenses();\r\n    };\r\n\r\n    // Fetch expenses from API\r\n    const fetchExpenses = async () => {\r\n      tableLoading.value = true;\r\n      \r\n      try {\r\n        // Build query parameters\r\n        const params = {\r\n          page: pagination.value.page,\r\n          limit: pagination.value.rows\r\n        };\r\n        \r\n        // Add filters if set\r\n        if (filters.search) params.search = filters.search;\r\n        if (filters.status) params.status = filters.status;\r\n        if (filters.category) params.category = filters.category;\r\n        \r\n        // Add date range if selected\r\n        if (filters.dateRange && Array.isArray(filters.dateRange) && filters.dateRange.length === 2) {\r\n          params.startDate = filters.dateRange[0].toISOString().split('T')[0];\r\n          params.endDate = filters.dateRange[1].toISOString().split('T')[0];\r\n        }\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll use mock data\r\n        const response = await mockFetchExpenses(params);\r\n        \r\n        expenses.value = response.data;\r\n        pagination.value.totalRecords = response.pagination.total;\r\n      } catch (error) {\r\n        console.error('Error fetching expenses:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load expenses',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        tableLoading.value = false;\r\n      }\r\n    };\r\n\r\n    // Fetch expense statistics\r\n    const fetchExpenseStats = async () => {\r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll use mock data\r\n        const response = await mockFetchExpenseStats();\r\n        stats.value = response;\r\n      } catch (error) {\r\n        console.error('Error fetching expense stats:', error);\r\n      }\r\n    };\r\n\r\n    // Mock function to fetch expenses\r\n    const mockFetchExpenses = (params) => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          // Generate mock data\r\n          const mockData = [\r\n            {\r\n              id: '1',\r\n              amount: 125.50,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 5),\r\n              description: 'Business lunch with clients',\r\n              category: 'Meals',\r\n              receipt_path: '/uploads/receipts/receipt1.pdf',\r\n              status: 'approved',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 4),\r\n              updated_at: new Date(2025, 3, 5),\r\n              approvals: [\r\n                {\r\n                  id: '101',\r\n                  status: 'approved',\r\n                  approver_id: '2',\r\n                  approver_name: 'Jane Smith',\r\n                  comments: 'Approved as per company policy',\r\n                  created_at: new Date(2025, 3, 5)\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              id: '2',\r\n              amount: 450.00,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 2),\r\n              description: 'Conference registration fee',\r\n              category: 'Training',\r\n              receipt_path: '/uploads/receipts/receipt2.pdf',\r\n              status: 'submitted',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 1),\r\n              updated_at: new Date(2025, 3, 2)\r\n            },\r\n            {\r\n              id: '3',\r\n              amount: 89.99,\r\n              currency: 'USD',\r\n              date: new Date(2025, 3, 1),\r\n              description: 'Office supplies - printer ink',\r\n              category: 'Office Supplies',\r\n              receipt_path: '/uploads/receipts/receipt3.jpg',\r\n              status: 'draft',\r\n              user_id: '1',\r\n              user_name: 'John Doe',\r\n              user_email: 'john@example.com',\r\n              created_at: new Date(2025, 3, 1)\r\n            }\r\n          ];\r\n          \r\n          // Filter data based on params\r\n          let filteredData = [...mockData];\r\n          \r\n          if (params.status) {\r\n            filteredData = filteredData.filter(expense => expense.status === params.status);\r\n          }\r\n          \r\n          if (params.category) {\r\n            filteredData = filteredData.filter(expense => expense.category === params.category);\r\n          }\r\n          \r\n          if (params.search) {\r\n            const search = params.search.toLowerCase();\r\n            filteredData = filteredData.filter(expense => \r\n              expense.description.toLowerCase().includes(search) ||\r\n              expense.category.toLowerCase().includes(search) ||\r\n              expense.user_name.toLowerCase().includes(search)\r\n            );\r\n          }\r\n          \r\n          if (params.startDate && params.endDate) {\r\n            const startDate = new Date(params.startDate);\r\n            const endDate = new Date(params.endDate);\r\n            filteredData = filteredData.filter(expense => {\r\n              const expenseDate = new Date(expense.date);\r\n              return expenseDate >= startDate && expenseDate <= endDate;\r\n            });\r\n          }\r\n          \r\n          // Calculate pagination\r\n          const total = filteredData.length;\r\n          const start = (params.page - 1) * params.limit;\r\n          const end = start + params.limit;\r\n          const paginatedData = filteredData.slice(start, end);\r\n          \r\n          resolve({\r\n            data: paginatedData,\r\n            pagination: {\r\n              total,\r\n              per_page: params.limit,\r\n              current_page: params.page,\r\n              last_page: Math.ceil(total / params.limit)\r\n            }\r\n          });\r\n        }, 500);\r\n      });\r\n    };\r\n\r\n    // Mock function to fetch expense statistics\r\n    const mockFetchExpenseStats = () => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            draft: {\r\n              count: 2,\r\n              total_amount: 120.50\r\n            },\r\n            submitted: {\r\n              count: 1,\r\n              total_amount: 450.00\r\n            },\r\n            approved: {\r\n              count: 3,\r\n              total_amount: 725.75\r\n            },\r\n            rejected: {\r\n              count: 1,\r\n              total_amount: 50.25\r\n            },\r\n            paid: {\r\n              count: 2,\r\n              total_amount: 600.25\r\n            }\r\n          });\r\n        }, 300);\r\n      });\r\n    };\r\n\r\n    // Open new expense dialog\r\n    const openNewExpenseDialog = () => {\r\n      resetExpenseForm();\r\n      expense.date = new Date(); // Set default date to today\r\n      dialogMode.value = 'create';\r\n      expenseDialogVisible.value = true;\r\n    };\r\n\r\n    // Close expense dialog\r\n    const closeExpenseDialog = () => {\r\n      expenseDialogVisible.value = false;\r\n      submitted.value = false;\r\n      fileError.value = '';\r\n      selectedFile.value = null;\r\n      if (fileUpload.value) {\r\n        fileUpload.value.clear();\r\n      }\r\n    };\r\n\r\n    // Reset expense form\r\n    const resetExpenseForm = () => {\r\n      expense.id = null;\r\n      expense.amount = null;\r\n      expense.currency = 'USD';\r\n      expense.date = null;\r\n      expense.description = '';\r\n      expense.category = null;\r\n      expense.receiptPath = null;\r\n      expense.status = 'draft';\r\n    };\r\n\r\n    // Handle file selection\r\n    const onFileSelect = (event) => {\r\n      fileError.value = '';\r\n      selectedFile.value = event.files[0];\r\n    };\r\n\r\n    // Handle file upload error\r\n    const onFileError = (event) => {\r\n      fileError.value = event.message;\r\n    };\r\n\r\n    // View an expense\r\n    const viewExpense = (expenseData) => {\r\n      selectedExpense.value = expenseData;\r\n      expenseDetailsVisible.value = true;\r\n    };\r\n\r\n    // Edit an expense\r\n    const editExpense = (expenseData) => {\r\n      resetExpenseForm();\r\n      \r\n      // Copy data to form\r\n      expense.id = expenseData.id;\r\n      expense.amount = expenseData.amount;\r\n      expense.currency = expenseData.currency || 'USD';\r\n      expense.date = new Date(expenseData.date);\r\n      expense.description = expenseData.description;\r\n      expense.category = expenseData.category;\r\n      expense.receiptPath = expenseData.receipt_path;\r\n      expense.status = expenseData.status;\r\n      \r\n      dialogMode.value = 'edit';\r\n      expenseDialogVisible.value = true;\r\n    };\r\n\r\n    // Edit from details view\r\n    const editFromDetails = () => {\r\n      if (!selectedExpense.value) return;\r\n      \r\n      // Close details dialog\r\n      expenseDetailsVisible.value = false;\r\n      \r\n      // Edit the expense\r\n      editExpense(selectedExpense.value);\r\n    };\r\n\r\n    // Confirm delete expense\r\n    const confirmDeleteExpense = (expenseData) => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this expense?',\r\n        header: 'Delete Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteExpense(expenseData),\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Delete expense\r\n    const deleteExpense = async (expenseData) => {\r\n      if (!expenseData || !expenseData.id) return;\r\n      \r\n      try {\r\n        // Close dialogs if open\r\n        expenseDialogVisible.value = false;\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        \r\n        // Remove from local array\r\n        expenses.value = expenses.value.filter(e => e.id !== expenseData.id);\r\n        \r\n        // Update selection if needed\r\n        if (selectedExpense.value && selectedExpense.value.id === expenseData.id) {\r\n          selectedExpense.value = null;\r\n        }\r\n        \r\n        // Show success toast\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Deleted',\r\n          detail: 'Expense has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error deleting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to delete expense',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Save expense (create or update)\r\n    const saveExpense = async () => {\r\n      submitted.value = true;\r\n      \r\n      // Validate form\r\n      if (!expense.amount || !expense.date || !expense.description || !expense.category) {\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      try {\r\n        // Prepare form data for API submission\r\n        const formData = new FormData();\r\n        formData.append('amount', expense.amount);\r\n        formData.append('currency', expense.currency);\r\n        formData.append('date', expense.date.toISOString().split('T')[0]);\r\n        formData.append('description', expense.description);\r\n        formData.append('category', expense.category);\r\n        \r\n        if (selectedFile.value) {\r\n          formData.append('receipt', selectedFile.value);\r\n        }\r\n        \r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Generate mock response data\r\n        const savedExpense = {\r\n          id: expense.id || Math.random().toString(36).substring(2, 11),\r\n          amount: expense.amount,\r\n          currency: expense.currency,\r\n          date: expense.date,\r\n          description: expense.description,\r\n          category: expense.category,\r\n          receipt_path: selectedFile.value ? `/uploads/receipts/mock-${selectedFile.value.name}` : expense.receiptPath,\r\n          status: expense.status,\r\n          user_id: store.getters['auth/currentUser'].id,\r\n          user_name: store.getters['auth/userFullName'],\r\n          created_at: new Date(),\r\n          updated_at: new Date()\r\n        };\r\n        \r\n        // Update local data\r\n        if (expense.id) {\r\n          // Update existing record\r\n          const index = expenses.value.findIndex(e => e.id === expense.id);\r\n          if (index !== -1) {\r\n            expenses.value[index] = savedExpense;\r\n          }\r\n        } else {\r\n          // Add new record\r\n          expenses.value.unshift(savedExpense);\r\n        }\r\n        \r\n        // Close dialog\r\n        expenseDialogVisible.value = false;\r\n        submitted.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: dialogMode.value === 'create' ? 'Expense Created' : 'Expense Updated',\r\n          detail: dialogMode.value === 'create' ? 'Expense has been created successfully' : 'Expense has been updated successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error saving expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to save expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n        fileError.value = '';\r\n        selectedFile.value = null;\r\n        if (fileUpload.value) {\r\n          fileUpload.value.clear();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Submit expense for approval\r\n    const submitExpense = async () => {\r\n      if (!selectedExpense.value || !canSubmitExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'submitted';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Submitted',\r\n          detail: 'Expense has been submitted for approval',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error submitting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to submit expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Approve expense\r\n    const approveExpense = async () => {\r\n      if (!selectedExpense.value || !canReviewExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'approved';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Add approval record\r\n        if (!selectedExpense.value.approvals) {\r\n          selectedExpense.value.approvals = [];\r\n        }\r\n        \r\n        selectedExpense.value.approvals.push({\r\n          id: Math.random().toString(36).substring(2, 11),\r\n          status: 'approved',\r\n          approver_id: store.getters['auth/currentUser'].id,\r\n          approver_name: store.getters['auth/userFullName'],\r\n          comments: null,\r\n          created_at: new Date()\r\n        });\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Approved',\r\n          detail: 'Expense has been approved',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error approving expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to approve expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Open reject dialog\r\n    const openRejectDialog = () => {\r\n      rejectReason.value = '';\r\n      rejectDialogVisible.value = true;\r\n    };\r\n\r\n    // Reject expense\r\n    const rejectExpense = async () => {\r\n      if (!selectedExpense.value || !canReviewExpense.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'rejected';\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Add rejection record\r\n        if (!selectedExpense.value.approvals) {\r\n          selectedExpense.value.approvals = [];\r\n        }\r\n        \r\n        selectedExpense.value.approvals.push({\r\n          id: Math.random().toString(36).substring(2, 11),\r\n          status: 'rejected',\r\n          approver_id: store.getters['auth/currentUser'].id,\r\n          approver_name: store.getters['auth/userFullName'],\r\n          comments: rejectReason.value || null,\r\n          created_at: new Date()\r\n        });\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Rejected',\r\n          detail: 'Expense has been rejected',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close dialogs\r\n        rejectDialogVisible.value = false;\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error rejecting expense:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to reject expense',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // Mark expense as paid\r\n    const markAsPaid = async () => {\r\n      if (!selectedExpense.value || !canMarkAsPaid.value) return;\r\n      \r\n      processingAction.value = true;\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // For now, we'll simulate success\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Update local data\r\n        selectedExpense.value.status = 'paid';\r\n        selectedExpense.value.paid_at = new Date();\r\n        selectedExpense.value.updated_at = new Date();\r\n        \r\n        // Update in the list\r\n        const index = expenses.value.findIndex(e => e.id === selectedExpense.value.id);\r\n        if (index !== -1) {\r\n          expenses.value[index] = { ...selectedExpense.value };\r\n        }\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'Expense Paid',\r\n          detail: 'Expense has been marked as paid',\r\n          life: 3000\r\n        });\r\n        \r\n        // Close details dialog\r\n        expenseDetailsVisible.value = false;\r\n        \r\n        // Refresh stats\r\n        fetchExpenseStats();\r\n      } catch (error) {\r\n        console.error('Error marking expense as paid:', error);\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to mark expense as paid',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        processingAction.value = false;\r\n      }\r\n    };\r\n\r\n    // View receipt\r\n    const viewReceipt = () => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\r\n      \r\n      // In a real app, this would open the file in a new tab\r\n      window.open(selectedExpense.value.receipt_path, '_blank');\r\n    };\r\n\r\n    // Download receipt from details view\r\n    const downloadReceiptFromDetails = () => {\r\n      if (!selectedExpense.value || !selectedExpense.value.receipt_path) return;\r\n      \r\n      // In a real app, this would trigger a download\r\n      // For now, just simulate opening the file\r\n      window.open(selectedExpense.value.receipt_path, '_blank');\r\n    };\r\n\r\n    // Download receipt from dialog\r\n    const downloadReceipt = () => {\r\n      if (!expense.receiptPath) return;\r\n      \r\n      // In a real app, this would trigger a download\r\n      // For now, just simulate opening the file\r\n      window.open(expense.receiptPath, '_blank');\r\n    };\r\n\r\n    // Row select handler\r\n    const onExpenseSelect = (event) => {\r\n      viewExpense(event.data);\r\n    };\r\n\r\n    // Row unselect handler\r\n    const onExpenseUnselect = () => {\r\n      // Nothing to do here\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(() => {\r\n      Promise.all([\r\n        fetchExpenses(),\r\n        fetchExpenseStats()\r\n      ]).finally(() => {\r\n        loading.value = false;\r\n      });\r\n    });\r\n\r\n    return {\r\n      loading,\r\n      tableLoading,\r\n      expenses,\r\n      stats,\r\n      selectedExpenses,\r\n      selectedExpense,\r\n      expenseDialogVisible,\r\n      expenseDetailsVisible,\r\n      rejectDialogVisible,\r\n      dialogMode,\r\n      saving,\r\n      submitted,\r\n      processingAction,\r\n      rejectReason,\r\n      selectedFile,\r\n      fileError,\r\n      fileUpload,\r\n      pagination,\r\n      filters,\r\n      expense,\r\n      statusOptions,\r\n      categoryOptions,\r\n      paginationSummary,\r\n      canSubmitExpense,\r\n      canReviewExpense,\r\n      canMarkAsPaid,\r\n      showExpenseActions,\r\n      formattedApprovals,\r\n      isReceiptPdf,\r\n      \r\n      // Methods\r\n      formatStatus,\r\n      formatCurrency,\r\n      formatDate,\r\n      getStatusSeverity,\r\n      getCategorySeverity,\r\n      canEditExpense,\r\n      canDeleteExpense,\r\n      onFilterChange,\r\n      openNewExpenseDialog,\r\n      closeExpenseDialog,\r\n      onFileSelect,\r\n      onFileError,\r\n      viewExpense,\r\n      editExpense,\r\n      editFromDetails,\r\n      confirmDeleteExpense,\r\n      saveExpense,\r\n      submitExpense,\r\n      approveExpense,\r\n      openRejectDialog,\r\n      rejectExpense,\r\n      markAsPaid,\r\n      viewReceipt,\r\n      downloadReceiptFromDetails,\r\n      downloadReceipt,\r\n      onExpenseSelect,\r\n      onExpenseUnselect\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.expenses-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Expense stats cards */\r\n.expense-stats {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.summary-card {\r\n  padding: 1.25rem;\r\n  background-color: var(--surface-card);\r\n  border-radius: 0.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.summary-title {\r\n  font-size: 1rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.summary-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.25rem;\r\n  color: var(--text-color);\r\n}\r\n\r\n.summary-count {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Filters */\r\n.expense-filters {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Loading container */\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3rem;\r\n}\r\n\r\n/* Empty state */\r\n.empty-message {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.empty-message i {\r\n  font-size: 2.5rem;\r\n  margin-bottom: 1rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n/* Action buttons */\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  gap: 0.5rem;\r\n}\r\n\r\n/* Pagination controls */\r\n.pagination-controls {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.pagination-summary {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Receipt preview */\r\n.receipt-preview {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 0.5rem 0.75rem;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.receipt-preview-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.receipt-preview-info i {\r\n  color: var(--primary-color);\r\n}\r\n\r\n/* Expense details */\r\n.expense-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.expense-amount {\r\n  display: flex;\r\n  align-items: baseline;\r\n}\r\n\r\n.amount-value {\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.currency {\r\n  font-size: 1rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.status-tag {\r\n  font-size: 0.875rem;\r\n  padding: 0.375rem 0.75rem;\r\n}\r\n\r\n.expense-info-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 1.25rem 2rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.info-label {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: var(--text-color);\r\n  font-weight: 500;\r\n}\r\n\r\n.description-section h3,\r\n.receipt-section h3,\r\n.approvals-section h3,\r\n.expense-actions h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.description-content {\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 1rem;\r\n  white-space: pre-line;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.receipt-actions {\r\n  display: flex;\r\n  gap: 0.75rem;\r\n}\r\n\r\n/* Approval timeline */\r\n.approval-timeline {\r\n  margin: 1rem 0;\r\n}\r\n\r\n.approval-item {\r\n  padding: 0.5rem 0;\r\n}\r\n\r\n.approval-date {\r\n  color: var(--text-color-secondary);\r\n  display: block;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.approval-content {\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  padding: 0.75rem;\r\n}\r\n\r\n.approval-description {\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.approval-user {\r\n  font-weight: 500;\r\n}\r\n\r\n.approval-comments {\r\n  font-style: italic;\r\n  color: var(--text-color-secondary);\r\n  font-size: 0.875rem;\r\n}\r\n\r\n/* Action buttons */\r\n.expense-workflow-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.75rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.review-buttons {\r\n  display: flex;\r\n  gap: 0.75rem;\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .expense-info-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .expense-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .review-buttons {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n  \r\n  .review-buttons .p-button {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}