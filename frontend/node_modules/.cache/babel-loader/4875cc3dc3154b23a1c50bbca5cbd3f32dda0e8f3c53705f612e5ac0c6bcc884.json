{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { useConfirm } from 'primevue/useconfirm';\nimport { useToast } from 'primevue/usetoast';\n\n// PrimeVue components\nimport Button from 'primevue/button';\nimport InputText from 'primevue/inputtext';\nimport Dropdown from 'primevue/dropdown';\nimport Avatar from 'primevue/avatar';\nimport Tag from 'primevue/tag';\nimport ProgressSpinner from 'primevue/progressspinner';\nimport Dialog from 'primevue/dialog';\nimport Checkbox from 'primevue/checkbox';\nimport Password from 'primevue/password';\nimport Divider from 'primevue/divider';\nimport FileUpload from 'primevue/fileupload';\nimport Paginator from 'primevue/paginator';\nimport ConfirmDialog from 'primevue/confirmdialog';\nimport Ripple from 'primevue/ripple';\nexport default {\n  name: 'UsersView',\n  components: {\n    Button,\n    InputText,\n    Dropdown,\n    Avatar,\n    Tag,\n    ProgressSpinner,\n    Dialog,\n    Checkbox,\n    Password,\n    Divider,\n    FileUpload,\n    Paginator,\n    ConfirmDialog,\n    Ripple\n  },\n  directives: {\n    ripple: Ripple\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const confirm = useConfirm();\n    const toast = useToast();\n\n    // State\n    const userDialogVisible = ref(false);\n    const userDetailsVisible = ref(false);\n    const dialogMode = ref('create');\n    const saving = ref(false);\n    const submitted = ref(false);\n    const showPasswordFields = ref(false);\n    const passwordMismatch = ref(false);\n    const emailError = ref('');\n    const profileImageError = ref('');\n    const selectedProfileImage = ref(null);\n\n    // Form state for user\n    const userForm = reactive({\n      id: null,\n      firstName: '',\n      lastName: '',\n      email: '',\n      jobTitle: '',\n      phone: '',\n      departmentId: null,\n      managerId: null,\n      role: '',\n      isActive: true,\n      password: '',\n      confirmPassword: '',\n      profileImageUrl: null\n    });\n\n    // Options for roles filter\n    const roleOptions = ref([{\n      label: 'All Roles',\n      value: ''\n    }, {\n      label: 'Admin',\n      value: 'admin'\n    }, {\n      label: 'Manager',\n      value: 'manager'\n    }, {\n      label: 'Employee',\n      value: 'employee'\n    }]);\n\n    // Options for departments (should come from API in real app)\n    const departments = ref([{\n      id: '1',\n      name: 'Finance'\n    }, {\n      id: '2',\n      name: 'Human Resources'\n    }, {\n      id: '3',\n      name: 'Marketing'\n    }, {\n      id: '4',\n      name: 'Engineering'\n    }, {\n      id: '5',\n      name: 'Operations'\n    }]);\n\n    // List of managers for dropdown\n    const managers = ref([]);\n\n    // Computed properties\n    const users = computed(() => store.state.users.users);\n    const selectedUser = computed(() => store.state.users.currentUser);\n    const directReports = computed(() => store.state.users.directReports);\n    const isLoading = computed(() => store.state.users.isLoading);\n    const pagination = computed(() => store.state.users.pagination);\n    const filters = computed(() => store.state.users.filters);\n\n    // Check if current user is admin\n    const isAdmin = computed(() => {\n      return store.getters['auth/isAdmin'];\n    });\n\n    // Check if the user can be edited by current user\n    const canEditUser = computed(() => {\n      if (!selectedUser.value) return false;\n\n      // Admin can edit any user\n      if (isAdmin.value) return true;\n\n      // Users can edit their own profile\n      const currentUserId = store.getters['auth/currentUser']?.id;\n      return selectedUser.value.id === currentUserId;\n    });\n\n    // Format date\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      }).format(date);\n    };\n\n    // Get severity class for role tag\n    const getRoleSeverity = role => {\n      switch (role) {\n        case 'admin':\n          return 'danger';\n        case 'manager':\n          return 'warning';\n        case 'employee':\n          return 'info';\n        default:\n          return 'secondary';\n      }\n    };\n\n    // Filter change handler\n    const onFilterChange = () => {\n      fetchUsers(1);\n    };\n\n    // Toggle active filter\n    const toggleActiveFilter = () => {\n      store.dispatch('users/setFilter', {\n        key: 'isActive',\n        value: filters.value.isActive !== false ? false : null\n      });\n      fetchUsers(1);\n    };\n\n    // Page change handler\n    const onPageChange = event => {\n      fetchUsers(event.page + 1, event.rows);\n    };\n\n    // Fetch users from API\n    const fetchUsers = async (page = 1, limit = pagination.value.per_page) => {\n      try {\n        await store.dispatch('users/fetchUsers', {\n          page,\n          limit\n        });\n      } catch (error) {\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to load users',\n          life: 3000\n        });\n      }\n    };\n\n    // Fetch managers list for dropdown\n    const fetchManagers = async () => {\n      try {\n        const response = await store.dispatch('users/fetchUsers', {\n          limit: 100,\n          role: 'manager'\n        });\n        managers.value = response.data.map(user => ({\n          id: user.id,\n          name: `${user.first_name} ${user.last_name}`\n        }));\n\n        // Add admins as potential managers too\n        const adminResponse = await store.dispatch('users/fetchUsers', {\n          limit: 100,\n          role: 'admin'\n        });\n        adminResponse.data.forEach(user => {\n          managers.value.push({\n            id: user.id,\n            name: `${user.first_name} ${user.last_name}`\n          });\n        });\n      } catch (error) {\n        console.error('Error fetching managers:', error);\n      }\n    };\n\n    // Fetch direct reports for a user\n    const fetchDirectReports = async userId => {\n      try {\n        await store.dispatch('users/fetchDirectReports', userId);\n      } catch (error) {\n        console.error('Error fetching direct reports:', error);\n      }\n    };\n\n    // Open new user dialog\n    const openNewUserDialog = () => {\n      resetUserForm();\n      dialogMode.value = 'create';\n      userDialogVisible.value = true;\n    };\n\n    // Close user dialog\n    const closeUserDialog = () => {\n      userDialogVisible.value = false;\n      submitted.value = false;\n      passwordMismatch.value = false;\n      emailError.value = '';\n      profileImageError.value = '';\n      showPasswordFields.value = false;\n    };\n\n    // Reset user form\n    const resetUserForm = () => {\n      Object.assign(userForm, {\n        id: null,\n        firstName: '',\n        lastName: '',\n        email: '',\n        jobTitle: '',\n        phone: '',\n        departmentId: null,\n        managerId: null,\n        role: 'employee',\n        // Default role\n        isActive: true,\n        password: '',\n        confirmPassword: '',\n        profileImageUrl: null\n      });\n    };\n\n    // Handle profile image selection\n    const onProfileImageSelect = event => {\n      profileImageError.value = '';\n      selectedProfileImage.value = event.files[0];\n\n      // Generate a temporary URL for preview\n      userForm.profileImageUrl = URL.createObjectURL(selectedProfileImage.value);\n    };\n\n    // Handle profile image error\n    const onProfileImageError = event => {\n      profileImageError.value = event.message;\n    };\n\n    // View a user\n    const viewUser = async userData => {\n      try {\n        // Fetch fresh user data\n        await store.dispatch('users/fetchUser', userData.id);\n\n        // Fetch direct reports\n        await fetchDirectReports(userData.id);\n\n        // Show details dialog\n        userDetailsVisible.value = true;\n      } catch (error) {\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to load user details',\n          life: 3000\n        });\n      }\n    };\n\n    // Edit from details view\n    const editFromDetails = () => {\n      if (!selectedUser.value) return;\n\n      // Close details dialog\n      userDetailsVisible.value = false;\n\n      // Reset form\n      resetUserForm();\n\n      // Copy data to form\n      userForm.id = selectedUser.value.id;\n      userForm.firstName = selectedUser.value.first_name;\n      userForm.lastName = selectedUser.value.last_name;\n      userForm.email = selectedUser.value.email;\n      userForm.jobTitle = selectedUser.value.job_title || '';\n      userForm.phone = selectedUser.value.phone || '';\n      userForm.departmentId = selectedUser.value.department_id;\n      userForm.managerId = selectedUser.value.manager_id;\n      userForm.role = selectedUser.value.role;\n      userForm.isActive = selectedUser.value.is_active;\n      userForm.profileImageUrl = selectedUser.value.profile_image;\n\n      // Show edit dialog\n      dialogMode.value = 'edit';\n      userDialogVisible.value = true;\n    };\n\n    // Confirm delete user\n    const confirmDeleteUser = () => {\n      confirm.require({\n        message: 'Are you sure you want to delete this user?',\n        header: 'Delete Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        acceptClass: 'p-button-danger',\n        accept: () => deleteUser(),\n        reject: () => {}\n      });\n    };\n\n    // Delete user\n    const deleteUser = async () => {\n      if (!userForm.id) return;\n      try {\n        saving.value = true;\n\n        // Delete user via API\n        await store.dispatch('users/deleteUser', userForm.id);\n\n        // Close dialog\n        userDialogVisible.value = false;\n\n        // Show success toast\n        toast.add({\n          severity: 'success',\n          summary: 'User Deleted',\n          detail: 'User has been deleted successfully',\n          life: 3000\n        });\n\n        // Refresh list\n        fetchUsers();\n      } catch (error) {\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Failed to delete user',\n          life: 3000\n        });\n      } finally {\n        saving.value = false;\n      }\n    };\n\n    // Save user (create or update)\n    const saveUser = async () => {\n      submitted.value = true;\n      passwordMismatch.value = false;\n      emailError.value = '';\n\n      // Validate required fields\n      if (!userForm.firstName || !userForm.lastName || !userForm.email) {\n        return;\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userForm.email)) {\n        emailError.value = 'Please enter a valid email address.';\n        return;\n      }\n\n      // Validate role if admin\n      if (isAdmin.value && !userForm.role) {\n        return;\n      }\n\n      // Validate password for new users\n      if (dialogMode.value === 'create' && !userForm.password) {\n        return;\n      }\n\n      // Validate password confirmation\n      if ((dialogMode.value === 'create' || dialogMode.value === 'edit' && userForm.password) && userForm.password !== userForm.confirmPassword) {\n        passwordMismatch.value = true;\n        return;\n      }\n      saving.value = true;\n      try {\n        // Prepare user data\n        const userData = {\n          firstName: userForm.firstName,\n          lastName: userForm.lastName,\n          jobTitle: userForm.jobTitle,\n          phone: userForm.phone,\n          departmentId: userForm.departmentId,\n          managerId: userForm.managerId,\n          role: userForm.role,\n          isActive: userForm.isActive\n        };\n\n        // Add email and password for new users\n        if (dialogMode.value === 'create') {\n          userData.email = userForm.email;\n          userData.password = userForm.password;\n        }\n\n        // Add password if changing it\n        if (dialogMode.value === 'edit' && userForm.password) {\n          userData.password = userForm.password;\n        }\n        let savedUser;\n        if (dialogMode.value === 'create') {\n          // Create new user\n          savedUser = await store.dispatch('users/createUser', userData);\n        } else {\n          // Update existing user\n          savedUser = await store.dispatch('users/updateUser', {\n            id: userForm.id,\n            ...userData\n          });\n        }\n\n        // Handle profile image upload if selected\n        if (selectedProfileImage.value && savedUser) {\n          await store.dispatch('users/uploadProfileImage', {\n            id: savedUser.id,\n            imageFile: selectedProfileImage.value\n          });\n        }\n\n        // Close dialog\n        userDialogVisible.value = false;\n        submitted.value = false;\n\n        // Show success message\n        toast.add({\n          severity: 'success',\n          summary: dialogMode.value === 'create' ? 'User Created' : 'User Updated',\n          detail: dialogMode.value === 'create' ? 'User has been created successfully' : 'User has been updated successfully',\n          life: 3000\n        });\n\n        // Refresh user list\n        fetchUsers();\n      } catch (error) {\n        console.error('Error saving user:', error);\n        const errorMsg = error.response?.data?.message || 'Failed to save user';\n        toast.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: errorMsg,\n          life: 3000\n        });\n      } finally {\n        saving.value = false;\n      }\n    };\n\n    // Initialize component\n    onMounted(() => {\n      // Load initial data\n      fetchUsers();\n      fetchManagers();\n\n      // Load departments (in a real app, this would come from an API)\n      store.dispatch('departments/fetchDepartments').then(response => {\n        if (response && response.data) {\n          departments.value = response.data.map(dept => ({\n            id: dept.id,\n            name: dept.name\n          }));\n        }\n      }).catch(error => {\n        console.error('Error loading departments:', error);\n      });\n    });\n    return {\n      users,\n      selectedUser,\n      directReports,\n      isLoading,\n      userDialogVisible,\n      userDetailsVisible,\n      dialogMode,\n      saving,\n      submitted,\n      showPasswordFields,\n      passwordMismatch,\n      emailError,\n      profileImageError,\n      pagination,\n      filters,\n      userForm,\n      roleOptions,\n      departments,\n      managers,\n      isAdmin,\n      canEditUser,\n      // Methods\n      formatDate,\n      getRoleSeverity,\n      onFilterChange,\n      toggleActiveFilter,\n      onPageChange,\n      openNewUserDialog,\n      closeUserDialog,\n      onProfileImageSelect,\n      onProfileImageError,\n      viewUser,\n      editFromDetails,\n      confirmDeleteUser,\n      deleteUser,\n      saveUser\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","useRouter","useConfirm","useToast","Button","InputText","Dropdown","Avatar","Tag","ProgressSpinner","Dialog","Checkbox","Password","Divider","FileUpload","Paginator","ConfirmDialog","Ripple","name","components","directives","ripple","setup","store","router","confirm","toast","userDialogVisible","userDetailsVisible","dialogMode","saving","submitted","showPasswordFields","passwordMismatch","emailError","profileImageError","selectedProfileImage","userForm","id","firstName","lastName","email","jobTitle","phone","departmentId","managerId","role","isActive","password","confirmPassword","profileImageUrl","roleOptions","label","value","departments","managers","users","state","selectedUser","currentUser","directReports","isLoading","pagination","filters","isAdmin","getters","canEditUser","currentUserId","formatDate","dateString","date","Date","Intl","DateTimeFormat","year","month","day","format","getRoleSeverity","onFilterChange","fetchUsers","toggleActiveFilter","dispatch","key","onPageChange","event","page","rows","limit","per_page","error","add","severity","summary","detail","life","fetchManagers","response","data","map","user","first_name","last_name","adminResponse","forEach","push","console","fetchDirectReports","userId","openNewUserDialog","resetUserForm","closeUserDialog","Object","assign","onProfileImageSelect","files","URL","createObjectURL","onProfileImageError","message","viewUser","userData","editFromDetails","job_title","department_id","manager_id","is_active","profile_image","confirmDeleteUser","require","header","icon","acceptClass","accept","deleteUser","reject","saveUser","emailRegex","test","savedUser","imageFile","errorMsg","then","dept","catch"],"sources":["/home/pi/projects/intranet/frontend/src/views/Users.vue"],"sourcesContent":["<template>\r\n  <div class=\"users-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Company Directory</h1>\r\n      <div class=\"page-actions\">\r\n        <Button \r\n          v-if=\"isAdmin\"\r\n          label=\"Add User\" \r\n          icon=\"pi pi-plus\" \r\n          @click=\"openNewUserDialog\"\r\n          class=\"p-button-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User filters -->\r\n    <div class=\"card\">\r\n      <div class=\"user-filters\">\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-4\">\r\n            <span class=\"p-input-icon-left w-full\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText \r\n                v-model=\"filters.searchTerm\" \r\n                placeholder=\"Search users\" \r\n                class=\"w-full\"\r\n                @input=\"onFilterChange\"\r\n              />\r\n            </span>\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.departmentId\"\r\n              :options=\"departments\"\r\n              optionLabel=\"name\"\r\n              optionValue=\"id\"\r\n              placeholder=\"All Departments\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-3\">\r\n            <Dropdown\r\n              v-model=\"filters.role\"\r\n              :options=\"roleOptions\"\r\n              optionLabel=\"label\"\r\n              optionValue=\"value\"\r\n              placeholder=\"All Roles\"\r\n              class=\"w-full\"\r\n              @change=\"onFilterChange\"\r\n            />\r\n          </div>\r\n          <div class=\"col-12 md:col-2\">\r\n            <div class=\"p-inputgroup w-full\">\r\n              <span class=\"p-inputgroup-addon\">\r\n                <i class=\"pi pi-user\"></i>\r\n              </span>\r\n              <Button \r\n                :label=\"filters.isActive !== false ? 'Active Only' : 'All Users'\" \r\n                :class=\"{ 'p-button-success': filters.isActive !== false }\"\r\n                class=\"w-full\"\r\n                @click=\"toggleActiveFilter\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading spinner -->\r\n      <div v-if=\"isLoading\" class=\"loading-container\">\r\n        <ProgressSpinner />\r\n      </div>\r\n\r\n      <!-- User list - Card view -->\r\n      <div v-else class=\"user-list\">\r\n        <div v-if=\"users.length === 0\" class=\"empty-message\">\r\n          <i class=\"pi pi-users\"></i>\r\n          <p>No users found</p>\r\n        </div>\r\n        <div v-else class=\"grid\">\r\n          <div v-for=\"user in users\" :key=\"user.id\" class=\"col-12 md:col-6 lg:col-4 xl:col-3\">\r\n            <div \r\n              class=\"user-card p-ripple\" \r\n              :class=\"{ 'inactive-user': !user.is_active }\"\r\n              @click=\"viewUser(user)\"\r\n            >\r\n              <div class=\"user-card-header\">\r\n                <Avatar \r\n                  :image=\"user.profile_image\" \r\n                  size=\"large\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '64px',\r\n                        height: '64px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n                <div class=\"user-info\">\r\n                  <h3 class=\"user-name\">{{ user.first_name }} {{ user.last_name }}</h3>\r\n                  <div class=\"user-title\">{{ user.job_title || 'No title' }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"user-card-content\">\r\n                <div class=\"user-detail\">\r\n                  <i class=\"pi pi-envelope\"></i>\r\n                  <span>{{ user.email }}</span>\r\n                </div>\r\n                <div v-if=\"user.department_name\" class=\"user-detail\">\r\n                  <i class=\"pi pi-sitemap\"></i>\r\n                  <span>{{ user.department_name }}</span>\r\n                </div>\r\n                <div v-if=\"user.phone\" class=\"user-detail\">\r\n                  <i class=\"pi pi-phone\"></i>\r\n                  <span>{{ user.phone }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"user-card-footer\">\r\n                <Tag \r\n                  :value=\"user.role\" \r\n                  :severity=\"getRoleSeverity(user.role)\" \r\n                />\r\n                <Tag \r\n                  v-if=\"!user.is_active\" \r\n                  value=\"Inactive\" \r\n                  severity=\"danger\" \r\n                />\r\n              </div>\r\n              <Ripple />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Pagination controls -->\r\n        <Paginator \r\n          v-if=\"users.length > 0\" \r\n          :rows=\"pagination.per_page\" \r\n          :totalRecords=\"pagination.total\" \r\n          :rowsPerPageOptions=\"[12, 24, 48]\" \r\n          @page=\"onPageChange($event)\"\r\n          template=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n          class=\"user-paginator\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"userDialogVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"dialogMode === 'create' ? 'New User' : 'Edit User'\" \r\n      :modal=\"true\" \r\n      class=\"p-fluid user-dialog\"\r\n    >\r\n      <div class=\"user-form\">\r\n        <div class=\"profile-image-upload\">\r\n          <div class=\"profile-image-container\">\r\n            <Avatar \r\n              :image=\"userForm.profileImageUrl || null\" \r\n              size=\"xlarge\" \r\n              shape=\"circle\" \r\n              :pt=\"{\r\n                image: {\r\n                  style: { \r\n                    objectFit: 'cover',\r\n                    width: '100px',\r\n                    height: '100px'\r\n                  }\r\n                }\r\n              }\"\r\n            >\r\n              <template #icon>\r\n                <i class=\"pi pi-user\" style=\"font-size: 2rem\"></i>\r\n              </template>\r\n            </Avatar>\r\n            <div class=\"profile-upload-overlay\">\r\n              <FileUpload \r\n                mode=\"basic\" \r\n                name=\"profile\" \r\n                accept=\"image/*\" \r\n                :maxFileSize=\"1000000\" \r\n                chooseLabel=\"\"\r\n                class=\"p-button-rounded p-button-outlined p-button-sm profile-upload-button\"\r\n                @select=\"onProfileImageSelect\"\r\n                @error=\"onProfileImageError\"\r\n              >\r\n                <template #chooseicon>\r\n                  <i class=\"pi pi-camera\"></i>\r\n                </template>\r\n              </FileUpload>\r\n            </div>\r\n          </div>\r\n          <small v-if=\"profileImageError\" class=\"p-error\">{{ profileImageError }}</small>\r\n        </div>\r\n\r\n        <div class=\"grid\">\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"firstName\">First Name*</label>\r\n              <InputText \r\n                id=\"firstName\" \r\n                v-model=\"userForm.firstName\" \r\n                required \r\n                :class=\"{ 'p-invalid': submitted && !userForm.firstName }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.firstName\" class=\"p-error\">First name is required.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"lastName\">Last Name*</label>\r\n              <InputText \r\n                id=\"lastName\" \r\n                v-model=\"userForm.lastName\" \r\n                required \r\n                :class=\"{ 'p-invalid': submitted && !userForm.lastName }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.lastName\" class=\"p-error\">Last name is required.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n            <div class=\"field\">\r\n              <label for=\"email\">Email*</label>\r\n              <InputText \r\n                id=\"email\" \r\n                v-model=\"userForm.email\" \r\n                type=\"email\" \r\n                required \r\n                :disabled=\"dialogMode === 'edit'\"\r\n                :class=\"{ 'p-invalid': submitted && !userForm.email }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.email\" class=\"p-error\">Email is required.</small>\r\n              <small v-else-if=\"emailError\" class=\"p-error\">{{ emailError }}</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"jobTitle\">Job Title</label>\r\n              <InputText id=\"jobTitle\" v-model=\"userForm.jobTitle\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"phone\">Phone</label>\r\n              <InputText id=\"phone\" v-model=\"userForm.phone\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"department\">Department</label>\r\n              <Dropdown \r\n                id=\"department\" \r\n                v-model=\"userForm.departmentId\" \r\n                :options=\"departments\" \r\n                optionLabel=\"name\" \r\n                optionValue=\"id\" \r\n                placeholder=\"Select Department\" \r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"manager\">Manager</label>\r\n              <Dropdown \r\n                id=\"manager\" \r\n                v-model=\"userForm.managerId\" \r\n                :options=\"managers\" \r\n                optionLabel=\"name\" \r\n                optionValue=\"id\" \r\n                placeholder=\"Select Manager\" \r\n              />\r\n            </div>\r\n          </div>\r\n          <div v-if=\"isAdmin\" class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"role\">Role*</label>\r\n              <Dropdown \r\n                id=\"role\" \r\n                v-model=\"userForm.role\" \r\n                :options=\"roleOptions\" \r\n                optionLabel=\"label\" \r\n                optionValue=\"value\" \r\n                placeholder=\"Select Role\" \r\n                required\r\n                :class=\"{ 'p-invalid': submitted && !userForm.role }\"\r\n              />\r\n              <small v-if=\"submitted && !userForm.role\" class=\"p-error\">Role is required.</small>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"isAdmin && dialogMode === 'edit'\" class=\"col-12 md:col-6\">\r\n            <div class=\"field\">\r\n              <label for=\"isActive\">Status</label>\r\n              <div class=\"field-checkbox\">\r\n                <Checkbox id=\"isActive\" v-model=\"userForm.isActive\" :binary=\"true\" />\r\n                <label for=\"isActive\">Active user</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Password fields (only show for new users or if changing password) -->\r\n          <template v-if=\"dialogMode === 'create' || showPasswordFields\">\r\n            <div class=\"col-12\">\r\n              <Divider align=\"left\">\r\n                <div class=\"inline-flex align-items-center\">\r\n                  <i class=\"pi pi-lock mr-2\"></i>\r\n                  <b>{{ dialogMode === 'create' ? 'Set Password' : 'Change Password' }}</b>\r\n                </div>\r\n              </Divider>\r\n            </div>\r\n            <div class=\"col-12 md:col-6\">\r\n              <div class=\"field\">\r\n                <label for=\"password\">Password{{ dialogMode === 'create' ? '*' : '' }}</label>\r\n                <Password \r\n                  id=\"password\" \r\n                  v-model=\"userForm.password\" \r\n                  toggleMask \r\n                  :feedback=\"true\"\r\n                  :required=\"dialogMode === 'create'\"\r\n                  :class=\"{ 'p-invalid': submitted && dialogMode === 'create' && !userForm.password }\"\r\n                />\r\n                <small v-if=\"submitted && dialogMode === 'create' && !userForm.password\" class=\"p-error\">Password is required for new users.</small>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 md:col-6\">\r\n              <div class=\"field\">\r\n                <label for=\"confirmPassword\">Confirm Password{{ dialogMode === 'create' ? '*' : '' }}</label>\r\n                <Password \r\n                  id=\"confirmPassword\" \r\n                  v-model=\"userForm.confirmPassword\" \r\n                  toggleMask \r\n                  :feedback=\"false\"\r\n                  :required=\"dialogMode === 'create'\"\r\n                  :class=\"{ 'p-invalid': submitted && ((dialogMode === 'create' && !userForm.confirmPassword) || passwordMismatch) }\"\r\n                />\r\n                <small v-if=\"submitted && dialogMode === 'create' && !userForm.confirmPassword\" class=\"p-error\">Please confirm the password.</small>\r\n                <small v-else-if=\"passwordMismatch\" class=\"p-error\">Passwords do not match.</small>\r\n              </div>\r\n            </div>\r\n          </template>\r\n\r\n          <!-- Button to show/hide password fields when editing -->\r\n          <div v-if=\"dialogMode === 'edit' && !showPasswordFields\" class=\"col-12\">\r\n            <Button \r\n              label=\"Change Password\" \r\n              icon=\"pi pi-lock\" \r\n              class=\"p-button-outlined p-button-secondary mt-2\" \r\n              type=\"button\"\r\n              @click=\"showPasswordFields = true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Cancel\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"closeUserDialog\" \r\n        />\r\n        <Button \r\n          v-if=\"dialogMode === 'edit' && isAdmin\" \r\n          label=\"Delete\" \r\n          icon=\"pi pi-trash\" \r\n          class=\"p-button-danger mr-2\" \r\n          @click=\"confirmDeleteUser\" \r\n        />\r\n        <Button \r\n          label=\"Save\" \r\n          icon=\"pi pi-check\" \r\n          @click=\"saveUser\" \r\n          :loading=\"saving\"\r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- User Details Dialog -->\r\n    <Dialog \r\n      v-model:visible=\"userDetailsVisible\" \r\n      :style=\"{ width: '650px' }\" \r\n      :header=\"selectedUser ? `${selectedUser.first_name} ${selectedUser.last_name}` : 'User Details'\" \r\n      :modal=\"true\"\r\n      class=\"user-details-dialog\"\r\n    >\r\n      <div v-if=\"selectedUser\" class=\"user-details\">\r\n        <div class=\"user-details-header\">\r\n          <Avatar \r\n            :image=\"selectedUser.profile_image\" \r\n            size=\"xlarge\" \r\n            shape=\"circle\" \r\n            :pt=\"{\r\n              image: {\r\n                style: { \r\n                  objectFit: 'cover',\r\n                  width: '120px',\r\n                  height: '120px'\r\n                }\r\n              }\r\n            }\"\r\n          />\r\n          <div class=\"user-header-info\">\r\n            <h2 class=\"user-full-name\">{{ selectedUser.first_name }} {{ selectedUser.last_name }}</h2>\r\n            <div class=\"user-job-title\">{{ selectedUser.job_title || 'No title' }}</div>\r\n            <div class=\"user-tags\">\r\n              <Tag \r\n                :value=\"selectedUser.role\" \r\n                :severity=\"getRoleSeverity(selectedUser.role)\" \r\n              />\r\n              <Tag \r\n                v-if=\"!selectedUser.is_active\" \r\n                value=\"Inactive\" \r\n                severity=\"danger\" \r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"user-details-content\">\r\n          <div class=\"user-info-section\">\r\n            <h3>Contact Information</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Email</div>\r\n                <div class=\"info-value\">\r\n                  <a :href=\"`mailto:${selectedUser.email}`\">{{ selectedUser.email }}</a>\r\n                </div>\r\n              </div>\r\n              <div v-if=\"selectedUser.phone\" class=\"info-group\">\r\n                <div class=\"info-label\">Phone</div>\r\n                <div class=\"info-value\">\r\n                  <a :href=\"`tel:${selectedUser.phone}`\">{{ selectedUser.phone }}</a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"user-info-section\">\r\n            <h3>Organization</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div v-if=\"selectedUser.department_name\" class=\"info-group\">\r\n                <div class=\"info-label\">Department</div>\r\n                <div class=\"info-value\">{{ selectedUser.department_name }}</div>\r\n              </div>\r\n              <div v-if=\"selectedUser.manager_name\" class=\"info-group\">\r\n                <div class=\"info-label\">Manager</div>\r\n                <div class=\"info-value\">{{ selectedUser.manager_name }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Direct Reports section (if the user is a manager) -->\r\n          <div v-if=\"directReports.length > 0\" class=\"user-info-section\">\r\n            <h3>Direct Reports</h3>\r\n            <div class=\"direct-reports-list\">\r\n              <div \r\n                v-for=\"report in directReports\" \r\n                :key=\"report.id\" \r\n                class=\"direct-report-item p-ripple\"\r\n                @click=\"viewUser(report)\"\r\n              >\r\n                <Avatar \r\n                  :image=\"report.profile_image\" \r\n                  size=\"small\" \r\n                  shape=\"circle\" \r\n                  :pt=\"{\r\n                    image: {\r\n                      style: { \r\n                        objectFit: 'cover',\r\n                        width: '32px',\r\n                        height: '32px'\r\n                      }\r\n                    }\r\n                  }\"\r\n                />\r\n                <div class=\"report-info\">\r\n                  <div class=\"report-name\">{{ report.first_name }} {{ report.last_name }}</div>\r\n                  <div class=\"report-title\">{{ report.job_title || 'No title' }}</div>\r\n                </div>\r\n                <Button \r\n                  icon=\"pi pi-chevron-right\" \r\n                  class=\"p-button-text p-button-rounded\" \r\n                />\r\n                <Ripple />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Account section -->\r\n          <div class=\"user-info-section\">\r\n            <h3>Account</h3>\r\n            <div class=\"user-info-grid\">\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Last Login</div>\r\n                <div class=\"info-value\">\r\n                  {{ selectedUser.last_login ? formatDate(selectedUser.last_login) : 'Never' }}\r\n                </div>\r\n              </div>\r\n              <div class=\"info-group\">\r\n                <div class=\"info-label\">Created</div>\r\n                <div class=\"info-value\">{{ formatDate(selectedUser.created_at) }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #footer>\r\n        <Button \r\n          label=\"Close\" \r\n          icon=\"pi pi-times\" \r\n          class=\"p-button-text\" \r\n          @click=\"userDetailsVisible = false\" \r\n        />\r\n        <Button \r\n          v-if=\"canEditUser\" \r\n          label=\"Edit\" \r\n          icon=\"pi pi-pencil\" \r\n          @click=\"editFromDetails\" \r\n        />\r\n      </template>\r\n    </Dialog>\r\n\r\n    <!-- Confirm Dialog -->\r\n    <ConfirmDialog />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport { useConfirm } from 'primevue/useconfirm';\r\nimport { useToast } from 'primevue/usetoast';\r\n\r\n// PrimeVue components\r\nimport Button from 'primevue/button';\r\nimport InputText from 'primevue/inputtext';\r\nimport Dropdown from 'primevue/dropdown';\r\nimport Avatar from 'primevue/avatar';\r\nimport Tag from 'primevue/tag';\r\nimport ProgressSpinner from 'primevue/progressspinner';\r\nimport Dialog from 'primevue/dialog';\r\nimport Checkbox from 'primevue/checkbox';\r\nimport Password from 'primevue/password';\r\nimport Divider from 'primevue/divider';\r\nimport FileUpload from 'primevue/fileupload';\r\nimport Paginator from 'primevue/paginator';\r\nimport ConfirmDialog from 'primevue/confirmdialog';\r\nimport Ripple from 'primevue/ripple';\r\n\r\nexport default {\r\n  name: 'UsersView',\r\n  components: {\r\n    Button,\r\n    InputText,\r\n    Dropdown,\r\n    Avatar,\r\n    Tag,\r\n    ProgressSpinner,\r\n    Dialog,\r\n    Checkbox,\r\n    Password,\r\n    Divider,\r\n    FileUpload,\r\n    Paginator,\r\n    ConfirmDialog,\r\n    Ripple\r\n  },\r\n  directives: {\r\n    ripple: Ripple\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    const router = useRouter();\r\n    const confirm = useConfirm();\r\n    const toast = useToast();\r\n\r\n    // State\r\n    const userDialogVisible = ref(false);\r\n    const userDetailsVisible = ref(false);\r\n    const dialogMode = ref('create');\r\n    const saving = ref(false);\r\n    const submitted = ref(false);\r\n    const showPasswordFields = ref(false);\r\n    const passwordMismatch = ref(false);\r\n    const emailError = ref('');\r\n    const profileImageError = ref('');\r\n    const selectedProfileImage = ref(null);\r\n\r\n    // Form state for user\r\n    const userForm = reactive({\r\n      id: null,\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      jobTitle: '',\r\n      phone: '',\r\n      departmentId: null,\r\n      managerId: null,\r\n      role: '',\r\n      isActive: true,\r\n      password: '',\r\n      confirmPassword: '',\r\n      profileImageUrl: null\r\n    });\r\n\r\n    // Options for roles filter\r\n    const roleOptions = ref([\r\n      { label: 'All Roles', value: '' },\r\n      { label: 'Admin', value: 'admin' },\r\n      { label: 'Manager', value: 'manager' },\r\n      { label: 'Employee', value: 'employee' }\r\n    ]);\r\n\r\n    // Options for departments (should come from API in real app)\r\n    const departments = ref([\r\n      { id: '1', name: 'Finance' },\r\n      { id: '2', name: 'Human Resources' },\r\n      { id: '3', name: 'Marketing' },\r\n      { id: '4', name: 'Engineering' },\r\n      { id: '5', name: 'Operations' }\r\n    ]);\r\n\r\n    // List of managers for dropdown\r\n    const managers = ref([]);\r\n\r\n    // Computed properties\r\n    const users = computed(() => store.state.users.users);\r\n    const selectedUser = computed(() => store.state.users.currentUser);\r\n    const directReports = computed(() => store.state.users.directReports);\r\n    const isLoading = computed(() => store.state.users.isLoading);\r\n    const pagination = computed(() => store.state.users.pagination);\r\n    const filters = computed(() => store.state.users.filters);\r\n\r\n    // Check if current user is admin\r\n    const isAdmin = computed(() => {\r\n      return store.getters['auth/isAdmin'];\r\n    });\r\n\r\n    // Check if the user can be edited by current user\r\n    const canEditUser = computed(() => {\r\n      if (!selectedUser.value) return false;\r\n      \r\n      // Admin can edit any user\r\n      if (isAdmin.value) return true;\r\n      \r\n      // Users can edit their own profile\r\n      const currentUserId = store.getters['auth/currentUser']?.id;\r\n      return selectedUser.value.id === currentUserId;\r\n    });\r\n\r\n    // Format date\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      }).format(date);\r\n    };\r\n\r\n    // Get severity class for role tag\r\n    const getRoleSeverity = (role) => {\r\n      switch (role) {\r\n        case 'admin': return 'danger';\r\n        case 'manager': return 'warning';\r\n        case 'employee': return 'info';\r\n        default: return 'secondary';\r\n      }\r\n    };\r\n\r\n    // Filter change handler\r\n    const onFilterChange = () => {\r\n      fetchUsers(1);\r\n    };\r\n\r\n    // Toggle active filter\r\n    const toggleActiveFilter = () => {\r\n      store.dispatch('users/setFilter', {\r\n        key: 'isActive',\r\n        value: filters.value.isActive !== false ? false : null\r\n      });\r\n      fetchUsers(1);\r\n    };\r\n\r\n    // Page change handler\r\n    const onPageChange = (event) => {\r\n      fetchUsers(event.page + 1, event.rows);\r\n    };\r\n\r\n    // Fetch users from API\r\n    const fetchUsers = async (page = 1, limit = pagination.value.per_page) => {\r\n      try {\r\n        await store.dispatch('users/fetchUsers', { page, limit });\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load users',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Fetch managers list for dropdown\r\n    const fetchManagers = async () => {\r\n      try {\r\n        const response = await store.dispatch('users/fetchUsers', {\r\n          limit: 100,\r\n          role: 'manager'\r\n        });\r\n        \r\n        managers.value = response.data.map(user => ({\r\n          id: user.id,\r\n          name: `${user.first_name} ${user.last_name}`\r\n        }));\r\n        \r\n        // Add admins as potential managers too\r\n        const adminResponse = await store.dispatch('users/fetchUsers', {\r\n          limit: 100,\r\n          role: 'admin'\r\n        });\r\n        \r\n        adminResponse.data.forEach(user => {\r\n          managers.value.push({\r\n            id: user.id,\r\n            name: `${user.first_name} ${user.last_name}`\r\n          });\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching managers:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch direct reports for a user\r\n    const fetchDirectReports = async (userId) => {\r\n      try {\r\n        await store.dispatch('users/fetchDirectReports', userId);\r\n      } catch (error) {\r\n        console.error('Error fetching direct reports:', error);\r\n      }\r\n    };\r\n\r\n    // Open new user dialog\r\n    const openNewUserDialog = () => {\r\n      resetUserForm();\r\n      dialogMode.value = 'create';\r\n      userDialogVisible.value = true;\r\n    };\r\n\r\n    // Close user dialog\r\n    const closeUserDialog = () => {\r\n      userDialogVisible.value = false;\r\n      submitted.value = false;\r\n      passwordMismatch.value = false;\r\n      emailError.value = '';\r\n      profileImageError.value = '';\r\n      showPasswordFields.value = false;\r\n    };\r\n\r\n    // Reset user form\r\n    const resetUserForm = () => {\r\n      Object.assign(userForm, {\r\n        id: null,\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        jobTitle: '',\r\n        phone: '',\r\n        departmentId: null,\r\n        managerId: null,\r\n        role: 'employee', // Default role\r\n        isActive: true,\r\n        password: '',\r\n        confirmPassword: '',\r\n        profileImageUrl: null\r\n      });\r\n    };\r\n\r\n    // Handle profile image selection\r\n    const onProfileImageSelect = (event) => {\r\n      profileImageError.value = '';\r\n      selectedProfileImage.value = event.files[0];\r\n      \r\n      // Generate a temporary URL for preview\r\n      userForm.profileImageUrl = URL.createObjectURL(selectedProfileImage.value);\r\n    };\r\n\r\n    // Handle profile image error\r\n    const onProfileImageError = (event) => {\r\n      profileImageError.value = event.message;\r\n    };\r\n\r\n    // View a user\r\n    const viewUser = async (userData) => {\r\n      try {\r\n        // Fetch fresh user data\r\n        await store.dispatch('users/fetchUser', userData.id);\r\n        \r\n        // Fetch direct reports\r\n        await fetchDirectReports(userData.id);\r\n        \r\n        // Show details dialog\r\n        userDetailsVisible.value = true;\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to load user details',\r\n          life: 3000\r\n        });\r\n      }\r\n    };\r\n\r\n    // Edit from details view\r\n    const editFromDetails = () => {\r\n      if (!selectedUser.value) return;\r\n      \r\n      // Close details dialog\r\n      userDetailsVisible.value = false;\r\n      \r\n      // Reset form\r\n      resetUserForm();\r\n      \r\n      // Copy data to form\r\n      userForm.id = selectedUser.value.id;\r\n      userForm.firstName = selectedUser.value.first_name;\r\n      userForm.lastName = selectedUser.value.last_name;\r\n      userForm.email = selectedUser.value.email;\r\n      userForm.jobTitle = selectedUser.value.job_title || '';\r\n      userForm.phone = selectedUser.value.phone || '';\r\n      userForm.departmentId = selectedUser.value.department_id;\r\n      userForm.managerId = selectedUser.value.manager_id;\r\n      userForm.role = selectedUser.value.role;\r\n      userForm.isActive = selectedUser.value.is_active;\r\n      userForm.profileImageUrl = selectedUser.value.profile_image;\r\n      \r\n      // Show edit dialog\r\n      dialogMode.value = 'edit';\r\n      userDialogVisible.value = true;\r\n    };\r\n\r\n    // Confirm delete user\r\n    const confirmDeleteUser = () => {\r\n      confirm.require({\r\n        message: 'Are you sure you want to delete this user?',\r\n        header: 'Delete Confirmation',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        acceptClass: 'p-button-danger',\r\n        accept: () => deleteUser(),\r\n        reject: () => {}\r\n      });\r\n    };\r\n\r\n    // Delete user\r\n    const deleteUser = async () => {\r\n      if (!userForm.id) return;\r\n      \r\n      try {\r\n        saving.value = true;\r\n        \r\n        // Delete user via API\r\n        await store.dispatch('users/deleteUser', userForm.id);\r\n        \r\n        // Close dialog\r\n        userDialogVisible.value = false;\r\n        \r\n        // Show success toast\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: 'User Deleted',\r\n          detail: 'User has been deleted successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh list\r\n        fetchUsers();\r\n      } catch (error) {\r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: 'Failed to delete user',\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n      }\r\n    };\r\n\r\n    // Save user (create or update)\r\n    const saveUser = async () => {\r\n      submitted.value = true;\r\n      passwordMismatch.value = false;\r\n      emailError.value = '';\r\n      \r\n      // Validate required fields\r\n      if (!userForm.firstName || !userForm.lastName || !userForm.email) {\r\n        return;\r\n      }\r\n      \r\n      // Validate email format\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(userForm.email)) {\r\n        emailError.value = 'Please enter a valid email address.';\r\n        return;\r\n      }\r\n      \r\n      // Validate role if admin\r\n      if (isAdmin.value && !userForm.role) {\r\n        return;\r\n      }\r\n      \r\n      // Validate password for new users\r\n      if (dialogMode.value === 'create' && !userForm.password) {\r\n        return;\r\n      }\r\n      \r\n      // Validate password confirmation\r\n      if ((dialogMode.value === 'create' || (dialogMode.value === 'edit' && userForm.password)) &&\r\n          userForm.password !== userForm.confirmPassword) {\r\n        passwordMismatch.value = true;\r\n        return;\r\n      }\r\n      \r\n      saving.value = true;\r\n      \r\n      try {\r\n        // Prepare user data\r\n        const userData = {\r\n          firstName: userForm.firstName,\r\n          lastName: userForm.lastName,\r\n          jobTitle: userForm.jobTitle,\r\n          phone: userForm.phone,\r\n          departmentId: userForm.departmentId,\r\n          managerId: userForm.managerId,\r\n          role: userForm.role,\r\n          isActive: userForm.isActive\r\n        };\r\n        \r\n        // Add email and password for new users\r\n        if (dialogMode.value === 'create') {\r\n          userData.email = userForm.email;\r\n          userData.password = userForm.password;\r\n        }\r\n        \r\n        // Add password if changing it\r\n        if (dialogMode.value === 'edit' && userForm.password) {\r\n          userData.password = userForm.password;\r\n        }\r\n        \r\n        let savedUser;\r\n        \r\n        if (dialogMode.value === 'create') {\r\n          // Create new user\r\n          savedUser = await store.dispatch('users/createUser', userData);\r\n        } else {\r\n          // Update existing user\r\n          savedUser = await store.dispatch('users/updateUser', {\r\n            id: userForm.id,\r\n            ...userData\r\n          });\r\n        }\r\n        \r\n        // Handle profile image upload if selected\r\n        if (selectedProfileImage.value && savedUser) {\r\n          await store.dispatch('users/uploadProfileImage', {\r\n            id: savedUser.id,\r\n            imageFile: selectedProfileImage.value\r\n          });\r\n        }\r\n        \r\n        // Close dialog\r\n        userDialogVisible.value = false;\r\n        submitted.value = false;\r\n        \r\n        // Show success message\r\n        toast.add({\r\n          severity: 'success',\r\n          summary: dialogMode.value === 'create' ? 'User Created' : 'User Updated',\r\n          detail: dialogMode.value === 'create' ? 'User has been created successfully' : 'User has been updated successfully',\r\n          life: 3000\r\n        });\r\n        \r\n        // Refresh user list\r\n        fetchUsers();\r\n      } catch (error) {\r\n        console.error('Error saving user:', error);\r\n        \r\n        const errorMsg = error.response?.data?.message || 'Failed to save user';\r\n        \r\n        toast.add({\r\n          severity: 'error',\r\n          summary: 'Error',\r\n          detail: errorMsg,\r\n          life: 3000\r\n        });\r\n      } finally {\r\n        saving.value = false;\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(() => {\r\n      // Load initial data\r\n      fetchUsers();\r\n      fetchManagers();\r\n      \r\n      // Load departments (in a real app, this would come from an API)\r\n      store.dispatch('departments/fetchDepartments')\r\n        .then(response => {\r\n          if (response && response.data) {\r\n            departments.value = response.data.map(dept => ({\r\n              id: dept.id,\r\n              name: dept.name\r\n            }));\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error loading departments:', error);\r\n        });\r\n    });\r\n\r\n    return {\r\n      users,\r\n      selectedUser,\r\n      directReports,\r\n      isLoading,\r\n      userDialogVisible,\r\n      userDetailsVisible,\r\n      dialogMode,\r\n      saving,\r\n      submitted,\r\n      showPasswordFields,\r\n      passwordMismatch,\r\n      emailError,\r\n      profileImageError,\r\n      pagination,\r\n      filters,\r\n      userForm,\r\n      roleOptions,\r\n      departments,\r\n      managers,\r\n      isAdmin,\r\n      canEditUser,\r\n      \r\n      // Methods\r\n      formatDate,\r\n      getRoleSeverity,\r\n      onFilterChange,\r\n      toggleActiveFilter,\r\n      onPageChange,\r\n      openNewUserDialog,\r\n      closeUserDialog,\r\n      onProfileImageSelect,\r\n      onProfileImageError,\r\n      viewUser,\r\n      editFromDetails,\r\n      confirmDeleteUser,\r\n      deleteUser,\r\n      saveUser\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.users-container {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n/* User filters */\r\n.user-filters {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Loading container */\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3rem;\r\n}\r\n\r\n/* Empty state */\r\n.empty-message {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n.empty-message i {\r\n  font-size: 2.5rem;\r\n  margin-bottom: 1rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n/* User list styling */\r\n.user-list {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.user-card {\r\n  background-color: var(--surface-card);\r\n  border-radius: 0.5rem;\r\n  padding: 1.25rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);\r\n  margin-bottom: 1.5rem;\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n  cursor: pointer;\r\n  position: relative;\r\n}\r\n\r\n.user-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-info {\r\n  margin-left: 1rem;\r\n}\r\n\r\n.user-name {\r\n  font-size: 1.125rem;\r\n  font-weight: 600;\r\n  margin: 0 0 0.25rem 0;\r\n}\r\n\r\n.user-title {\r\n  color: var(--text-color-secondary);\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.user-card-content {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-detail {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.user-detail i {\r\n  margin-right: 0.5rem;\r\n  color: var(--primary-color);\r\n  width: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.user-card-footer {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.inactive-user {\r\n  opacity: 0.7;\r\n}\r\n\r\n/* User paginator */\r\n.user-paginator {\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n/* Profile image upload */\r\n.profile-image-upload {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.profile-image-container {\r\n  position: relative;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.profile-upload-overlay {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n}\r\n\r\n.profile-upload-button {\r\n  width: 2rem !important;\r\n  height: 2rem !important;\r\n}\r\n\r\n/* User details dialog */\r\n.user-details-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.user-header-info {\r\n  margin-left: 1.5rem;\r\n}\r\n\r\n.user-full-name {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  margin: 0 0 0.25rem 0;\r\n}\r\n\r\n.user-job-title {\r\n  color: var(--text-color-secondary);\r\n  font-size: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.user-tags {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.user-info-section {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.user-info-section h3 {\r\n  font-size: 1.125rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.75rem;\r\n  color: var(--text-color);\r\n  padding-bottom: 0.5rem;\r\n  border-bottom: 1px solid var(--surface-border);\r\n}\r\n\r\n.user-info-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 1rem;\r\n}\r\n\r\n.info-label {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: var(--text-color);\r\n}\r\n\r\n.info-value a {\r\n  color: var(--primary-color);\r\n  text-decoration: none;\r\n}\r\n\r\n.info-value a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Direct reports list */\r\n.direct-reports-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.direct-report-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.75rem;\r\n  background-color: var(--surface-ground);\r\n  border-radius: 0.375rem;\r\n  transition: background-color 0.2s;\r\n  cursor: pointer;\r\n  position: relative;\r\n}\r\n\r\n.direct-report-item:hover {\r\n  background-color: var(--surface-hover);\r\n}\r\n\r\n.report-info {\r\n  margin-left: 0.75rem;\r\n  flex: 1;\r\n}\r\n\r\n.report-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.report-title {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n}\r\n\r\n/* Responsive adaptations */\r\n@media screen and (max-width: 768px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .user-details-header {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n  }\r\n  \r\n  .user-header-info {\r\n    margin-left: 0;\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .user-info-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .user-tags {\r\n    justify-content: center;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}