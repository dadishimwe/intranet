{"ast":null,"code":"import { ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter, useRoute } from 'vue-router';\nimport InputText from 'primevue/inputtext';\nimport Password from 'primevue/password';\nimport Button from 'primevue/button';\nimport Checkbox from 'primevue/checkbox';\nimport Message from 'primevue/message';\nimport Dialog from 'primevue/dialog';\nimport api from '../services/api';\nexport default {\n  name: 'Login',\n  components: {\n    InputText,\n    Password,\n    Button,\n    Checkbox,\n    Message,\n    Dialog\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const route = useRoute();\n\n    // Login form\n    const email = ref('');\n    const password = ref('');\n    const rememberMe = ref(false);\n    const errorMessage = ref('');\n    const submitted = ref(false);\n    const loading = ref(false);\n\n    // Password reset\n    const forgotPasswordVisible = ref(false);\n    const resetEmail = ref('');\n    const resetMessage = ref('');\n    const resetMessageType = ref('info');\n    const resetLoading = ref(false);\n\n    // Methods\n    const handleLogin = async () => {\n      submitted.value = true;\n\n      // Validate form\n      if (!email.value || !password.value) {\n        return;\n      }\n      try {\n        loading.value = true;\n        errorMessage.value = '';\n        const result = await store.dispatch('login', {\n          email: email.value,\n          password: password.value\n        });\n        if (result.success) {\n          // Navigate to intended destination or home page\n          const redirectPath = route.query.redirect || '/';\n          router.push(redirectPath);\n        } else {\n          errorMessage.value = result.message || 'Login failed. Please check your credentials.';\n        }\n      } catch (error) {\n        errorMessage.value = 'An error occurred. Please try again later.';\n        console.error('Login error:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const showForgotPassword = () => {\n      resetEmail.value = email.value || '';\n      resetMessage.value = '';\n      forgotPasswordVisible.value = true;\n    };\n    const handleResetPassword = async () => {\n      if (!resetEmail.value) {\n        resetMessage.value = 'Please enter your email address';\n        resetMessageType.value = 'error';\n        return;\n      }\n      try {\n        resetLoading.value = true;\n        resetMessage.value = '';\n\n        // Call password reset API\n        await api.post('/auth/request-password-reset', {\n          email: resetEmail.value\n        });\n\n        // Show success message regardless of whether the email exists\n        resetMessage.value = 'If your email exists in our system, you will receive reset instructions shortly.';\n        resetMessageType.value = 'success';\n\n        // Auto-close dialog after 5 seconds\n        setTimeout(() => {\n          forgotPasswordVisible.value = false;\n        }, 5000);\n      } catch (error) {\n        resetMessage.value = 'An error occurred. Please try again later.';\n        resetMessageType.value = 'error';\n        console.error('Password reset error:', error);\n      } finally {\n        resetLoading.value = false;\n      }\n    };\n    return {\n      email,\n      password,\n      rememberMe,\n      errorMessage,\n      submitted,\n      loading,\n      forgotPasswordVisible,\n      resetEmail,\n      resetMessage,\n      resetMessageType,\n      resetLoading,\n      handleLogin,\n      showForgotPassword,\n      handleResetPassword\n    };\n  }\n};","map":{"version":3,"names":["ref","useStore","useRouter","useRoute","InputText","Password","Button","Checkbox","Message","Dialog","api","name","components","setup","store","router","route","email","password","rememberMe","errorMessage","submitted","loading","forgotPasswordVisible","resetEmail","resetMessage","resetMessageType","resetLoading","handleLogin","value","result","dispatch","success","redirectPath","query","redirect","push","message","error","console","showForgotPassword","handleResetPassword","post","setTimeout"],"sources":["/home/pi/projects/intranet/frontend/src/views/Login.vue"],"sourcesContent":["<template>\r\n    <div class=\"login-container\">\r\n      <div class=\"login-wrapper\">\r\n        <!-- Login form card -->\r\n        <div class=\"login-card\">\r\n          <!-- Logo and title -->\r\n          <div class=\"login-header\">\r\n            <i class=\"pi pi-building logo-icon\"></i>\r\n            <h1 class=\"login-title\">Corporate Intranet</h1>\r\n            <p class=\"login-subtitle\">Sign in to your account</p>\r\n          </div>\r\n          \r\n          <!-- Error message -->\r\n          <Message v-if=\"errorMessage\" severity=\"error\" :closable=\"false\">\r\n            {{ errorMessage }}\r\n          </Message>\r\n          \r\n          <!-- Login form -->\r\n          <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Email</label>\r\n              <InputText \r\n                id=\"email\" \r\n                v-model=\"email\" \r\n                type=\"email\" \r\n                class=\"w-full\" \r\n                placeholder=\"Enter your email\"\r\n                :class=\"{ 'p-invalid': submitted && !email }\"\r\n                autocomplete=\"username\"\r\n                required\r\n              />\r\n              <small v-if=\"submitted && !email\" class=\"p-error\">Email is required</small>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label for=\"password\">Password</label>\r\n              <Password \r\n                id=\"password\" \r\n                v-model=\"password\" \r\n                class=\"w-full\" \r\n                placeholder=\"Enter your password\"\r\n                :feedback=\"false\"\r\n                toggleMask\r\n                :class=\"{ 'p-invalid': submitted && !password }\"\r\n                autocomplete=\"current-password\"\r\n                required\r\n              />\r\n              <small v-if=\"submitted && !password\" class=\"p-error\">Password is required</small>\r\n            </div>\r\n            \r\n            <div class=\"form-footer\">\r\n              <div class=\"remember-me\">\r\n                <Checkbox v-model=\"rememberMe\" inputId=\"rememberMe\" :binary=\"true\" />\r\n                <label for=\"rememberMe\">Remember me</label>\r\n              </div>\r\n              \r\n              <a href=\"#\" class=\"forgot-password\" @click.prevent=\"showForgotPassword\">\r\n                Forgot password?\r\n              </a>\r\n            </div>\r\n            \r\n            <Button \r\n              type=\"submit\" \r\n              label=\"Sign In\" \r\n              icon=\"pi pi-sign-in\" \r\n              class=\"login-button\" \r\n              :loading=\"loading\" \r\n            />\r\n          </form>\r\n          \r\n          <!-- System information -->\r\n          <div class=\"system-info\">\r\n            <span>Raspberry Pi Intranet v1.0</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Forgot password dialog -->\r\n      <Dialog \r\n        v-model:visible=\"forgotPasswordVisible\" \r\n        header=\"Reset Password\" \r\n        :modal=\"true\"\r\n        :closable=\"true\"\r\n        :style=\"{ width: '450px' }\"\r\n      >\r\n        <div class=\"forgot-password-content\">\r\n          <p>Enter your email address and we'll send you instructions to reset your password.</p>\r\n          \r\n          <div class=\"form-group mt-4\">\r\n            <label for=\"resetEmail\">Email Address</label>\r\n            <InputText \r\n              id=\"resetEmail\" \r\n              v-model=\"resetEmail\" \r\n              type=\"email\" \r\n              class=\"w-full\" \r\n              placeholder=\"Enter your email\"\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <Message \r\n            v-if=\"resetMessage\" \r\n            :severity=\"resetMessageType\" \r\n            :closable=\"false\"\r\n            class=\"mt-4\"\r\n          >\r\n            {{ resetMessage }}\r\n          </Message>\r\n        </div>\r\n        \r\n        <template #footer>\r\n          <Button \r\n            label=\"Cancel\" \r\n            icon=\"pi pi-times\" \r\n            class=\"p-button-text\" \r\n            @click=\"forgotPasswordVisible = false\" \r\n          />\r\n          <Button \r\n            label=\"Submit\" \r\n            icon=\"pi pi-check\" \r\n            @click=\"handleResetPassword\" \r\n            :loading=\"resetLoading\"\r\n          />\r\n        </template>\r\n      </Dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter, useRoute } from 'vue-router';\r\n  import InputText from 'primevue/inputtext';\r\n  import Password from 'primevue/password';\r\n  import Button from 'primevue/button';\r\n  import Checkbox from 'primevue/checkbox';\r\n  import Message from 'primevue/message';\r\n  import Dialog from 'primevue/dialog';\r\n  import api from '../services/api';\r\n  \r\n  export default {\r\n    name: 'Login',\r\n    components: {\r\n      InputText,\r\n      Password,\r\n      Button,\r\n      Checkbox,\r\n      Message,\r\n      Dialog\r\n    },\r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n      const route = useRoute();\r\n      \r\n      // Login form\r\n      const email = ref('');\r\n      const password = ref('');\r\n      const rememberMe = ref(false);\r\n      const errorMessage = ref('');\r\n      const submitted = ref(false);\r\n      const loading = ref(false);\r\n      \r\n      // Password reset\r\n      const forgotPasswordVisible = ref(false);\r\n      const resetEmail = ref('');\r\n      const resetMessage = ref('');\r\n      const resetMessageType = ref('info');\r\n      const resetLoading = ref(false);\r\n      \r\n      // Methods\r\n      const handleLogin = async () => {\r\n        submitted.value = true;\r\n        \r\n        // Validate form\r\n        if (!email.value || !password.value) {\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          loading.value = true;\r\n          errorMessage.value = '';\r\n          \r\n          const result = await store.dispatch('login', {\r\n            email: email.value,\r\n            password: password.value\r\n          });\r\n          \r\n          if (result.success) {\r\n            // Navigate to intended destination or home page\r\n            const redirectPath = route.query.redirect || '/';\r\n            router.push(redirectPath);\r\n          } else {\r\n            errorMessage.value = result.message || 'Login failed. Please check your credentials.';\r\n          }\r\n        } catch (error) {\r\n          errorMessage.value = 'An error occurred. Please try again later.';\r\n          console.error('Login error:', error);\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const showForgotPassword = () => {\r\n        resetEmail.value = email.value || '';\r\n        resetMessage.value = '';\r\n        forgotPasswordVisible.value = true;\r\n      };\r\n      \r\n      const handleResetPassword = async () => {\r\n        if (!resetEmail.value) {\r\n          resetMessage.value = 'Please enter your email address';\r\n          resetMessageType.value = 'error';\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          resetLoading.value = true;\r\n          resetMessage.value = '';\r\n          \r\n          // Call password reset API\r\n          await api.post('/auth/request-password-reset', {\r\n            email: resetEmail.value\r\n          });\r\n          \r\n          // Show success message regardless of whether the email exists\r\n          resetMessage.value = 'If your email exists in our system, you will receive reset instructions shortly.';\r\n          resetMessageType.value = 'success';\r\n          \r\n          // Auto-close dialog after 5 seconds\r\n          setTimeout(() => {\r\n            forgotPasswordVisible.value = false;\r\n          }, 5000);\r\n          \r\n        } catch (error) {\r\n          resetMessage.value = 'An error occurred. Please try again later.';\r\n          resetMessageType.value = 'error';\r\n          console.error('Password reset error:', error);\r\n        } finally {\r\n          resetLoading.value = false;\r\n        }\r\n      };\r\n      \r\n      return {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        errorMessage,\r\n        submitted,\r\n        loading,\r\n        forgotPasswordVisible,\r\n        resetEmail,\r\n        resetMessage,\r\n        resetMessageType,\r\n        resetLoading,\r\n        handleLogin,\r\n        showForgotPassword,\r\n        handleResetPassword\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .login-container {\r\n    display: flex;\r\n    min-height: 100vh;\r\n    background-color: var(--surface-ground);\r\n    overflow: auto;\r\n  }\r\n  \r\n  .login-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    min-height: 100vh;\r\n    padding: 2rem;\r\n  }\r\n  \r\n  .login-card {\r\n    width: 100%;\r\n    max-width: 450px;\r\n    background-color: var(--surface-card);\r\n    border-radius: 1rem;\r\n    box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.1),\r\n                0 1px 1px 0 rgba(0, 0, 0, 0.07),\r\n                0 1px 3px 0 rgba(0, 0, 0, 0.06);\r\n    padding: 2rem;\r\n  }\r\n  \r\n  .login-header {\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n  }\r\n  \r\n  .logo-icon {\r\n    font-size: 3rem;\r\n    color: var(--primary-color);\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .login-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    color: var(--text-color);\r\n    margin: 0;\r\n  }\r\n  \r\n  .login-subtitle {\r\n    color: var(--text-color-secondary);\r\n    margin-top: 0.5rem;\r\n  }\r\n  \r\n  .login-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .form-group label {\r\n    display: block;\r\n    margin-bottom: 0.5rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .form-footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .remember-me {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .forgot-password {\r\n    color: var(--primary-color);\r\n    text-decoration: none;\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .login-button {\r\n    width: 100%;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .system-info {\r\n    text-align: center;\r\n    margin-top: 2rem;\r\n    color: var(--text-color-secondary);\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .forgot-password-content {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  /* Make form inputs full width on PrimeVue components */\r\n  :deep(.p-password),\r\n  :deep(.p-inputtext) {\r\n    width: 100%;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}