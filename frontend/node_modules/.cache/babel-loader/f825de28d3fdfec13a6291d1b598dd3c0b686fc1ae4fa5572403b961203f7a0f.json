{"ast":null,"code":"import { ref, computed, onMounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport Button from 'primevue/button';\nimport Dropdown from 'primevue/dropdown';\nimport InputText from 'primevue/inputtext';\nimport Dialog from 'primevue/dialog';\nimport Divider from 'primevue/divider';\nimport Tag from 'primevue/tag';\nimport ProgressSpinner from 'primevue/progressspinner';\nimport OrgNode from '../components/orgchart/OrgNode.vue';\nexport default {\n  name: 'OrgChartView',\n  components: {\n    Button,\n    Dropdown,\n    InputText,\n    Dialog,\n    Divider,\n    Tag,\n    ProgressSpinner,\n    OrgNode\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n\n    // State\n    const loading = ref(false);\n    const error = ref(null);\n    const orgData = ref([]);\n    const departments = ref([]);\n    const rootNode = ref(null);\n    const zoomLevel = ref(1);\n    const showDepartments = ref(true);\n    const selectedDepartment = ref(null);\n    const searchTerm = ref('');\n    const highlightedNodes = ref([]);\n    const employeeDialogVisible = ref(false);\n    const selectedEmployee = ref(null);\n    const directReports = ref([]);\n\n    // DOM refs\n    const chartContainer = ref(null);\n    const orgchart = ref(null);\n\n    // Computed properties\n    const departmentOptions = computed(() => {\n      const options = [{\n        id: null,\n        name: 'All Departments'\n      }];\n      departments.value.forEach(dept => {\n        options.push(dept);\n      });\n      return options;\n    });\n\n    // Methods\n    const loadOrgData = async () => {\n      try {\n        loading.value = true;\n        error.value = null;\n\n        // Fetch org chart data\n        await store.dispatch('users/fetchOrgChart');\n        orgData.value = store.state.users.orgChart;\n\n        // Fetch departments\n        await store.dispatch('departments/fetchDepartments');\n        departments.value = store.state.departments.list;\n\n        // Build tree structure\n        buildOrgTree();\n      } catch (err) {\n        console.error('Error loading org chart data:', err);\n        error.value = 'Failed to load organization data. Please try again.';\n      } finally {\n        loading.value = false;\n      }\n    };\n    const buildOrgTree = () => {\n      if (!orgData.value || orgData.value.length === 0) {\n        rootNode.value = null;\n        return;\n      }\n\n      // Create nodes map\n      const nodesMap = new Map();\n\n      // First pass: Create all nodes\n      orgData.value.forEach(employee => {\n        nodesMap.set(employee.id, {\n          ...employee,\n          children: []\n        });\n      });\n\n      // Second pass: Build parent-child relationships\n      let root = null;\n      orgData.value.forEach(employee => {\n        const node = nodesMap.get(employee.id);\n        if (employee.manager_id) {\n          // Add to parent's children\n          const parent = nodesMap.get(employee.manager_id);\n          if (parent) {\n            parent.children.push(node);\n          }\n        } else {\n          // This is a root node (no manager)\n          root = node;\n        }\n      });\n\n      // Sort children by last name in each node\n      const sortChildren = node => {\n        if (node.children && node.children.length > 0) {\n          node.children.sort((a, b) => a.last_name.localeCompare(b.last_name) || a.first_name.localeCompare(b.first_name));\n          node.children.forEach(child => sortChildren(child));\n        }\n      };\n      if (root) {\n        sortChildren(root);\n      }\n      rootNode.value = root;\n    };\n    const zoomIn = () => {\n      zoomLevel.value = Math.min(2, zoomLevel.value + 0.1);\n    };\n    const zoomOut = () => {\n      zoomLevel.value = Math.max(0.5, zoomLevel.value - 0.1);\n    };\n    const toggleDepartments = () => {\n      showDepartments.value = !showDepartments.value;\n    };\n    const filterByDepartment = () => {\n      if (!selectedDepartment.value || selectedDepartment.value.id === null) {\n        highlightedNodes.value = [];\n        buildOrgTree(); // Reset to original tree\n        return;\n      }\n\n      // Find employees in the selected department\n      const deptEmployees = orgData.value.filter(emp => emp.department_id === selectedDepartment.value.id);\n\n      // Highlight these nodes\n      highlightedNodes.value = deptEmployees.map(emp => emp.id);\n\n      // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\n      buildOrgTree();\n    };\n    const filterBySearch = () => {\n      if (!searchTerm.value.trim()) {\n        highlightedNodes.value = [];\n        buildOrgTree(); // Reset to original tree\n        return;\n      }\n      const term = searchTerm.value.toLowerCase();\n\n      // Find employees matching the search term\n      const matchingEmployees = orgData.value.filter(emp => emp.first_name.toLowerCase().includes(term) || emp.last_name.toLowerCase().includes(term) || emp.job_title?.toLowerCase().includes(term) || emp.email.toLowerCase().includes(term));\n\n      // Highlight these nodes\n      highlightedNodes.value = matchingEmployees.map(emp => emp.id);\n\n      // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\n      buildOrgTree();\n    };\n    const viewEmployeeDetails = async employee => {\n      selectedEmployee.value = employee;\n\n      // Get direct reports\n      try {\n        const reports = await store.dispatch('users/fetchDirectReports', employee.id);\n        directReports.value = reports || [];\n      } catch (error) {\n        console.error('Error fetching direct reports:', error);\n        directReports.value = [];\n      }\n      employeeDialogVisible.value = true;\n    };\n    const goToEmployeeProfile = () => {\n      if (selectedEmployee.value) {\n        router.push(`/users/${selectedEmployee.value.id}`);\n      }\n    };\n    const getInitials = employee => {\n      if (!employee) return '';\n      const first = employee.first_name.charAt(0).toUpperCase();\n      const last = employee.last_name.charAt(0).toUpperCase();\n      return `${first}${last}`;\n    };\n    const exportOrgChart = () => {\n      // In a real application, this would create a PDF or image export\n      // For this implementation, we'll just show a message\n      store.dispatch('showToast', {\n        severity: 'info',\n        summary: 'Export',\n        detail: 'Organization chart export functionality would be implemented here'\n      });\n    };\n\n    // Load data when component mounts\n    onMounted(async () => {\n      await loadOrgData();\n\n      // Center the chart after it's rendered\n      nextTick(() => {\n        if (chartContainer.value && orgchart.value) {\n          chartContainer.value.scrollLeft = (orgchart.value.scrollWidth - chartContainer.value.clientWidth) / 2;\n        }\n      });\n    });\n    return {\n      loading,\n      error,\n      rootNode,\n      departments,\n      departmentOptions,\n      zoomLevel,\n      showDepartments,\n      selectedDepartment,\n      searchTerm,\n      highlightedNodes,\n      employeeDialogVisible,\n      selectedEmployee,\n      directReports,\n      chartContainer,\n      orgchart,\n      loadOrgData,\n      zoomIn,\n      zoomOut,\n      toggleDepartments,\n      filterByDepartment,\n      filterBySearch,\n      viewEmployeeDetails,\n      goToEmployeeProfile,\n      getInitials,\n      exportOrgChart\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","nextTick","useStore","useRouter","Button","Dropdown","InputText","Dialog","Divider","Tag","ProgressSpinner","OrgNode","name","components","setup","store","router","loading","error","orgData","departments","rootNode","zoomLevel","showDepartments","selectedDepartment","searchTerm","highlightedNodes","employeeDialogVisible","selectedEmployee","directReports","chartContainer","orgchart","departmentOptions","options","id","value","forEach","dept","push","loadOrgData","dispatch","state","users","orgChart","list","buildOrgTree","err","console","length","nodesMap","Map","employee","set","children","root","node","get","manager_id","parent","sortChildren","sort","a","b","last_name","localeCompare","first_name","child","zoomIn","Math","min","zoomOut","max","toggleDepartments","filterByDepartment","deptEmployees","filter","emp","department_id","map","filterBySearch","trim","term","toLowerCase","matchingEmployees","includes","job_title","email","viewEmployeeDetails","reports","goToEmployeeProfile","getInitials","first","charAt","toUpperCase","last","exportOrgChart","severity","summary","detail","scrollLeft","scrollWidth","clientWidth"],"sources":["/home/pi/projects/intranet/frontend/src/views/OrgChart.vue"],"sourcesContent":["<template>\r\n    <div class=\"orgchart-container\">\r\n      <div class=\"page-header\">\r\n        <h1 class=\"page-title\">Organization Chart</h1>\r\n        <div class=\"page-actions\">\r\n          <Button \r\n            label=\"Export\" \r\n            icon=\"pi pi-download\" \r\n            class=\"p-button-outlined\" \r\n            @click=\"exportOrgChart\"\r\n          />\r\n          <Button \r\n            :label=\"showDepartments ? 'Hide Departments' : 'Show Departments'\" \r\n            :icon=\"showDepartments ? 'pi pi-eye-slash' : 'pi pi-eye'\" \r\n            class=\"p-button-outlined ml-2\" \r\n            @click=\"toggleDepartments\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Loading state -->\r\n      <div v-if=\"loading\" class=\"card loading-card\">\r\n        <ProgressSpinner class=\"spinner\" />\r\n        <p>Loading organization data...</p>\r\n      </div>\r\n      \r\n      <!-- Error state -->\r\n      <div v-else-if=\"error\" class=\"card error-card\">\r\n        <i class=\"pi pi-exclamation-triangle error-icon\"></i>\r\n        <h3>Error Loading Data</h3>\r\n        <p>{{ error }}</p>\r\n        <Button label=\"Retry\" icon=\"pi pi-refresh\" @click=\"loadOrgData\" />\r\n      </div>\r\n      \r\n      <!-- Organization Chart -->\r\n      <div v-else class=\"orgchart-wrapper card\">\r\n        <div class=\"orgchart-actions\">\r\n          <div class=\"zoom-controls\">\r\n            <Button icon=\"pi pi-minus\" class=\"p-button-rounded p-button-text\" @click=\"zoomOut\" />\r\n            <span class=\"zoom-level\">{{ Math.round(zoomLevel * 100) }}%</span>\r\n            <Button icon=\"pi pi-plus\" class=\"p-button-rounded p-button-text\" @click=\"zoomIn\" />\r\n          </div>\r\n          \r\n          <div class=\"orgchart-filters\">\r\n            <Dropdown \r\n              v-if=\"departments.length > 0\"\r\n              v-model=\"selectedDepartment\" \r\n              :options=\"departmentOptions\" \r\n              optionLabel=\"name\" \r\n              placeholder=\"Filter by Department\" \r\n              class=\"department-filter\"\r\n              @change=\"filterByDepartment\"\r\n            />\r\n            \r\n            <div class=\"p-input-icon-left search-box\">\r\n              <i class=\"pi pi-search\" />\r\n              <InputText v-model=\"searchTerm\" placeholder=\"Search employees\" @input=\"filterBySearch\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"chart-container\" ref=\"chartContainer\">\r\n          <div class=\"orgchart\" ref=\"orgchart\" :style=\"{ transform: `scale(${zoomLevel})` }\">\r\n            <!-- Recursive tree component -->\r\n            <OrgNode \r\n              v-if=\"rootNode\" \r\n              :node=\"rootNode\" \r\n              :show-departments=\"showDepartments\"\r\n              :highlighted-nodes=\"highlightedNodes\"\r\n              @node-click=\"viewEmployeeDetails\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Employee Details Dialog -->\r\n      <Dialog \r\n        v-model:visible=\"employeeDialogVisible\" \r\n        :header=\"selectedEmployee ? `${selectedEmployee.first_name} ${selectedEmployee.last_name}` : 'Employee Details'\" \r\n        :modal=\"true\"\r\n        :dismissableMask=\"true\"\r\n        :style=\"{ width: '500px' }\"\r\n        :closeOnEscape=\"true\"\r\n      >\r\n        <div v-if=\"selectedEmployee\" class=\"employee-details\">\r\n          <div class=\"employee-header\">\r\n            <div class=\"employee-avatar\">\r\n              <img \r\n                v-if=\"selectedEmployee.profile_image\" \r\n                :src=\"selectedEmployee.profile_image\" \r\n                :alt=\"selectedEmployee.first_name\" \r\n                class=\"employee-image\"\r\n              />\r\n              <div v-else class=\"employee-initials\">\r\n                {{ getInitials(selectedEmployee) }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"employee-title\">\r\n              <h3>{{ selectedEmployee.first_name }} {{ selectedEmployee.last_name }}</h3>\r\n              <div class=\"employee-position\">{{ selectedEmployee.job_title }}</div>\r\n              <Tag \r\n                v-if=\"selectedEmployee.department_name\" \r\n                :value=\"selectedEmployee.department_name\"\r\n                severity=\"info\"\r\n                class=\"department-tag\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <Divider />\r\n          \r\n          <div class=\"employee-info\">\r\n            <div class=\"info-item\">\r\n              <div class=\"info-label\">Email</div>\r\n              <div class=\"info-value\">\r\n                <a :href=\"`mailto:${selectedEmployee.email}`\">{{ selectedEmployee.email }}</a>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-if=\"selectedEmployee.phone\" class=\"info-item\">\r\n              <div class=\"info-label\">Phone</div>\r\n              <div class=\"info-value\">{{ selectedEmployee.phone }}</div>\r\n            </div>\r\n            \r\n            <div v-if=\"selectedEmployee.manager_name\" class=\"info-item\">\r\n              <div class=\"info-label\">Manager</div>\r\n              <div class=\"info-value\">{{ selectedEmployee.manager_name }}</div>\r\n            </div>\r\n            \r\n            <div v-if=\"directReports.length > 0\" class=\"info-item\">\r\n              <div class=\"info-label\">Direct Reports</div>\r\n              <div class=\"info-value\">\r\n                <ul class=\"direct-reports-list\">\r\n                  <li v-for=\"report in directReports\" :key=\"report.id\">\r\n                    {{ report.first_name }} {{ report.last_name }}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <template #footer>\r\n          <Button \r\n            label=\"View Profile\" \r\n            icon=\"pi pi-user\" \r\n            @click=\"goToEmployeeProfile\" \r\n          />\r\n        </template>\r\n      </Dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed, onMounted, nextTick } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import Button from 'primevue/button';\r\n  import Dropdown from 'primevue/dropdown';\r\n  import InputText from 'primevue/inputtext';\r\n  import Dialog from 'primevue/dialog';\r\n  import Divider from 'primevue/divider';\r\n  import Tag from 'primevue/tag';\r\n  import ProgressSpinner from 'primevue/progressspinner';\r\n  import OrgNode from '../components/orgchart/OrgNode.vue';\r\n  \r\n  export default {\r\n    name: 'OrgChartView',\r\n    components: {\r\n      Button,\r\n      Dropdown,\r\n      InputText,\r\n      Dialog,\r\n      Divider,\r\n      Tag,\r\n      ProgressSpinner,\r\n      OrgNode\r\n    },\r\n    \r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n      \r\n      // State\r\n      const loading = ref(false);\r\n      const error = ref(null);\r\n      const orgData = ref([]);\r\n      const departments = ref([]);\r\n      const rootNode = ref(null);\r\n      const zoomLevel = ref(1);\r\n      const showDepartments = ref(true);\r\n      const selectedDepartment = ref(null);\r\n      const searchTerm = ref('');\r\n      const highlightedNodes = ref([]);\r\n      const employeeDialogVisible = ref(false);\r\n      const selectedEmployee = ref(null);\r\n      const directReports = ref([]);\r\n      \r\n      // DOM refs\r\n      const chartContainer = ref(null);\r\n      const orgchart = ref(null);\r\n      \r\n      // Computed properties\r\n      const departmentOptions = computed(() => {\r\n        const options = [{ id: null, name: 'All Departments' }];\r\n        departments.value.forEach(dept => {\r\n          options.push(dept);\r\n        });\r\n        return options;\r\n      });\r\n      \r\n      // Methods\r\n      const loadOrgData = async () => {\r\n        try {\r\n          loading.value = true;\r\n          error.value = null;\r\n          \r\n          // Fetch org chart data\r\n          await store.dispatch('users/fetchOrgChart');\r\n          orgData.value = store.state.users.orgChart;\r\n          \r\n          // Fetch departments\r\n          await store.dispatch('departments/fetchDepartments');\r\n          departments.value = store.state.departments.list;\r\n          \r\n          // Build tree structure\r\n          buildOrgTree();\r\n        } catch (err) {\r\n          console.error('Error loading org chart data:', err);\r\n          error.value = 'Failed to load organization data. Please try again.';\r\n        } finally {\r\n          loading.value = false;\r\n        }\r\n      };\r\n      \r\n      const buildOrgTree = () => {\r\n        if (!orgData.value || orgData.value.length === 0) {\r\n          rootNode.value = null;\r\n          return;\r\n        }\r\n        \r\n        // Create nodes map\r\n        const nodesMap = new Map();\r\n        \r\n        // First pass: Create all nodes\r\n        orgData.value.forEach(employee => {\r\n          nodesMap.set(employee.id, {\r\n            ...employee,\r\n            children: []\r\n          });\r\n        });\r\n        \r\n        // Second pass: Build parent-child relationships\r\n        let root = null;\r\n        \r\n        orgData.value.forEach(employee => {\r\n          const node = nodesMap.get(employee.id);\r\n          \r\n          if (employee.manager_id) {\r\n            // Add to parent's children\r\n            const parent = nodesMap.get(employee.manager_id);\r\n            if (parent) {\r\n              parent.children.push(node);\r\n            }\r\n          } else {\r\n            // This is a root node (no manager)\r\n            root = node;\r\n          }\r\n        });\r\n        \r\n        // Sort children by last name in each node\r\n        const sortChildren = (node) => {\r\n          if (node.children && node.children.length > 0) {\r\n            node.children.sort((a, b) => \r\n              a.last_name.localeCompare(b.last_name) || \r\n              a.first_name.localeCompare(b.first_name)\r\n            );\r\n            \r\n            node.children.forEach(child => sortChildren(child));\r\n          }\r\n        };\r\n        \r\n        if (root) {\r\n          sortChildren(root);\r\n        }\r\n        \r\n        rootNode.value = root;\r\n      };\r\n      \r\n      const zoomIn = () => {\r\n        zoomLevel.value = Math.min(2, zoomLevel.value + 0.1);\r\n      };\r\n      \r\n      const zoomOut = () => {\r\n        zoomLevel.value = Math.max(0.5, zoomLevel.value - 0.1);\r\n      };\r\n      \r\n      const toggleDepartments = () => {\r\n        showDepartments.value = !showDepartments.value;\r\n      };\r\n      \r\n      const filterByDepartment = () => {\r\n        if (!selectedDepartment.value || selectedDepartment.value.id === null) {\r\n          highlightedNodes.value = [];\r\n          buildOrgTree(); // Reset to original tree\r\n          return;\r\n        }\r\n        \r\n        // Find employees in the selected department\r\n        const deptEmployees = orgData.value.filter(\r\n          emp => emp.department_id === selectedDepartment.value.id\r\n        );\r\n        \r\n        // Highlight these nodes\r\n        highlightedNodes.value = deptEmployees.map(emp => emp.id);\r\n        \r\n        // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\r\n        buildOrgTree();\r\n      };\r\n      \r\n      const filterBySearch = () => {\r\n        if (!searchTerm.value.trim()) {\r\n          highlightedNodes.value = [];\r\n          buildOrgTree(); // Reset to original tree\r\n          return;\r\n        }\r\n        \r\n        const term = searchTerm.value.toLowerCase();\r\n        \r\n        // Find employees matching the search term\r\n        const matchingEmployees = orgData.value.filter(\r\n          emp => emp.first_name.toLowerCase().includes(term) || \r\n                 emp.last_name.toLowerCase().includes(term) ||\r\n                 emp.job_title?.toLowerCase().includes(term) ||\r\n                 emp.email.toLowerCase().includes(term)\r\n        );\r\n        \r\n        // Highlight these nodes\r\n        highlightedNodes.value = matchingEmployees.map(emp => emp.id);\r\n        \r\n        // Rebuild the tree to show all nodes (highlighted ones will be styled differently)\r\n        buildOrgTree();\r\n      };\r\n      \r\n      const viewEmployeeDetails = async (employee) => {\r\n        selectedEmployee.value = employee;\r\n        \r\n        // Get direct reports\r\n        try {\r\n          const reports = await store.dispatch('users/fetchDirectReports', employee.id);\r\n          directReports.value = reports || [];\r\n        } catch (error) {\r\n          console.error('Error fetching direct reports:', error);\r\n          directReports.value = [];\r\n        }\r\n        \r\n        employeeDialogVisible.value = true;\r\n      };\r\n      \r\n      const goToEmployeeProfile = () => {\r\n        if (selectedEmployee.value) {\r\n          router.push(`/users/${selectedEmployee.value.id}`);\r\n        }\r\n      };\r\n      \r\n      const getInitials = (employee) => {\r\n        if (!employee) return '';\r\n        \r\n        const first = employee.first_name.charAt(0).toUpperCase();\r\n        const last = employee.last_name.charAt(0).toUpperCase();\r\n        \r\n        return `${first}${last}`;\r\n      };\r\n      \r\n      const exportOrgChart = () => {\r\n        // In a real application, this would create a PDF or image export\r\n        // For this implementation, we'll just show a message\r\n        store.dispatch('showToast', {\r\n          severity: 'info',\r\n          summary: 'Export',\r\n          detail: 'Organization chart export functionality would be implemented here'\r\n        });\r\n      };\r\n      \r\n      // Load data when component mounts\r\n      onMounted(async () => {\r\n        await loadOrgData();\r\n        \r\n        // Center the chart after it's rendered\r\n        nextTick(() => {\r\n          if (chartContainer.value && orgchart.value) {\r\n            chartContainer.value.scrollLeft = \r\n              (orgchart.value.scrollWidth - chartContainer.value.clientWidth) / 2;\r\n          }\r\n        });\r\n      });\r\n      \r\n      return {\r\n        loading,\r\n        error,\r\n        rootNode,\r\n        departments,\r\n        departmentOptions,\r\n        zoomLevel,\r\n        showDepartments,\r\n        selectedDepartment,\r\n        searchTerm,\r\n        highlightedNodes,\r\n        employeeDialogVisible,\r\n        selectedEmployee,\r\n        directReports,\r\n        chartContainer,\r\n        orgchart,\r\n        \r\n        loadOrgData,\r\n        zoomIn,\r\n        zoomOut,\r\n        toggleDepartments,\r\n        filterByDepartment,\r\n        filterBySearch,\r\n        viewEmployeeDetails,\r\n        goToEmployeeProfile,\r\n        getInitials,\r\n        exportOrgChart\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .orgchart-container {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .page-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .page-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    margin: 0;\r\n  }\r\n  \r\n  .loading-card, .error-card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 3rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .spinner {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .error-icon {\r\n    font-size: 3rem;\r\n    color: var(--danger-color);\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .orgchart-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .orgchart-actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .zoom-controls {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .zoom-level {\r\n    margin: 0 0.5rem;\r\n    min-width: 3rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .orgchart-filters {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .department-filter {\r\n    width: 200px;\r\n  }\r\n  \r\n  .search-box {\r\n    width: 200px;\r\n  }\r\n  \r\n  .chart-container {\r\n    overflow: auto;\r\n    border: 1px solid var(--surface-border);\r\n    padding: 2rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    min-height: 500px;\r\n    background-color: var(--surface-ground);\r\n  }\r\n  \r\n  .orgchart {\r\n    transform-origin: center top;\r\n    transition: transform 0.3s;\r\n  }\r\n  \r\n  /* Employee details styles */\r\n  .employee-details {\r\n    padding: 1rem 0;\r\n  }\r\n  \r\n  .employee-header {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .employee-avatar {\r\n    width: 80px;\r\n    height: 80px;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    margin-right: 1.5rem;\r\n    background-color: var(--primary-color);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .employee-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  .employee-initials {\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n    color: white;\r\n  }\r\n  \r\n  .employee-title h3 {\r\n    margin: 0 0 0.5rem 0;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  .employee-position {\r\n    color: var(--text-color-secondary);\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .department-tag {\r\n    font-size: 0.75rem;\r\n  }\r\n  \r\n  .employee-info {\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .info-item {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .info-label {\r\n    font-weight: 500;\r\n    margin-bottom: 0.25rem;\r\n    color: var(--text-color-secondary);\r\n  }\r\n  \r\n  .info-value {\r\n    color: var(--text-color);\r\n  }\r\n  \r\n  .direct-reports-list {\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n  }\r\n  \r\n  .direct-reports-list li {\r\n    padding: 0.25rem 0;\r\n  }\r\n  \r\n  /* Responsive adjustments */\r\n  @media screen and (max-width: 768px) {\r\n    .page-header {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .page-actions {\r\n      margin-top: 1rem;\r\n      width: 100%;\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n    \r\n    .orgchart-actions {\r\n      flex-direction: column;\r\n      align-items: stretch;\r\n    }\r\n    \r\n    .zoom-controls {\r\n      margin-bottom: 1rem;\r\n      justify-content: center;\r\n    }\r\n    \r\n    .orgchart-filters {\r\n      flex-direction: column;\r\n      width: 100%;\r\n    }\r\n    \r\n    .department-filter,\r\n    .search-box {\r\n      width: 100%;\r\n    }\r\n    \r\n    .chart-container {\r\n      min-height: 400px;\r\n    }\r\n    \r\n    .employee-header {\r\n      flex-direction: column;\r\n      text-align: center;\r\n    }\r\n    \r\n    .employee-avatar {\r\n      margin-right: 0;\r\n      margin-bottom: 1rem;\r\n    }\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}